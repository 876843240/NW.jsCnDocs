{
    "docs": [
        {
            "location": "/",
            "text": "NW.js 0.13.0 \u53c2\u8003\u6587\u6863\n\n\n\n\n\n\nNW.js\n \u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528WEB(html5\u3001css3\u3001javascript)\u6280\u672f\uff0c\u5305\u62ec\nNode.js\n\u6781\u5176\u6240\u6709\nmodules\n\u6765\u5f00\u53d1\u684c\u9762\u5e94\u7528\u7684\u4e00\u79cd\u65b0\u65b9\u5f0f\u3002\u5979\u7684\u524d\u8eab\u662f \"node-webkit\" \u9879\u76ee\u3002\n\n\n\n\n\u8be5\u6587\u6863\u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u7ec4\u6210\u90e8\u5206:\n\n\n\n\n\u7528\u6237\u624b\u518c\n - \u5f53\u60a8\u4ec5\u4f7f\u7528NW.js\u5f00\u53d1\u5e94\u7528\u65f6\u53c2\u8003\u8be5\u90e8\u5206\u6587\u6863\n\n\n\u5f00\u53d1\u8005\u624b\u518c\n - \u5f53\u60a8\u60f3\u6269\u5c55NW.js\u65f6\u5019\u53ef\u4ee5\u53c2\u8003\u8be5\u90e8\u5206\u6587\u6863\n\n\n\u53c2\u8003\u8d44\u6599\n - NW.js API \u6587\u6863\n\n\n\n\n\u8be5\u9879\u76ee\u7684\u6240\u6709\u6e90\u7801\u548c\u6587\u6863\u90fd\u5728\nGIT\u4ed3\u5e93\n\u4e2d\uff0c\u6b22\u8fce\u60a8\u6765Pull Requests.\n\n\n\u6587\u6863\u76ee\u5f55\n\n\n\n\n\u4e3b\u9875\n\n\nFor Users\n\n\nGetting Started\n\n\nDebugging with DevTools\n\n\nPackage and Distribute\n\n\nFAQ\n\n\nFrom 0.12 to 0.13\n\n\nAdvanced\n\n\nBuild Flavors\n\n\nJavaScript Contexts in NW.js\n\n\nProtect JavaScript Source Code\n\n\nSecurity in NW.js\n\n\nTest with ChromeDriver\n\n\nUse NaCl in NW.js\n\n\nUse Native Node Modules\n\n\nContent Verification\n\n\n\n\n\n\n\n\n\n\nFor Developers\n\n\nBuilding NW.js\n\n\nContributing to NW.js\n\n\nEnable Proprietary Codecs\n\n\nRepositories\n\n\nUnderstanding Crash Dump\n\n\nWriting Documents for NW.js\n\n\nWriting Test Cases for NW.js\n\n\nContributors of Documents\n\n\n\n\n\n\nReferences\n\n\nApp\n\n\nChanges to DOM\n\n\nChanges to Node\n\n\nClipboard\n\n\nCommand Line Options\n\n\nManifest Format\n\n\nMenu\n\n\nMenuItem\n\n\nScreen\n\n\nShell\n\n\nShortcut\n\n\nTray\n\n\nwebview Tag\n\n\nWindow",
            "title": "Home"
        },
        {
            "location": "/#nwjs-0130",
            "text": "NW.js  \u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528WEB(html5\u3001css3\u3001javascript)\u6280\u672f\uff0c\u5305\u62ec Node.js \u6781\u5176\u6240\u6709 modules \u6765\u5f00\u53d1\u684c\u9762\u5e94\u7528\u7684\u4e00\u79cd\u65b0\u65b9\u5f0f\u3002\u5979\u7684\u524d\u8eab\u662f \"node-webkit\" \u9879\u76ee\u3002   \u8be5\u6587\u6863\u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u7ec4\u6210\u90e8\u5206:   \u7528\u6237\u624b\u518c  - \u5f53\u60a8\u4ec5\u4f7f\u7528NW.js\u5f00\u53d1\u5e94\u7528\u65f6\u53c2\u8003\u8be5\u90e8\u5206\u6587\u6863  \u5f00\u53d1\u8005\u624b\u518c  - \u5f53\u60a8\u60f3\u6269\u5c55NW.js\u65f6\u5019\u53ef\u4ee5\u53c2\u8003\u8be5\u90e8\u5206\u6587\u6863  \u53c2\u8003\u8d44\u6599  - NW.js API \u6587\u6863   \u8be5\u9879\u76ee\u7684\u6240\u6709\u6e90\u7801\u548c\u6587\u6863\u90fd\u5728 GIT\u4ed3\u5e93 \u4e2d\uff0c\u6b22\u8fce\u60a8\u6765Pull Requests.",
            "title": "NW.js 0.13.0 \u53c2\u8003\u6587\u6863"
        },
        {
            "location": "/#_1",
            "text": "\u4e3b\u9875  For Users  Getting Started  Debugging with DevTools  Package and Distribute  FAQ  From 0.12 to 0.13  Advanced  Build Flavors  JavaScript Contexts in NW.js  Protect JavaScript Source Code  Security in NW.js  Test with ChromeDriver  Use NaCl in NW.js  Use Native Node Modules  Content Verification      For Developers  Building NW.js  Contributing to NW.js  Enable Proprietary Codecs  Repositories  Understanding Crash Dump  Writing Documents for NW.js  Writing Test Cases for NW.js  Contributors of Documents    References  App  Changes to DOM  Changes to Node  Clipboard  Command Line Options  Manifest Format  Menu  MenuItem  Screen  Shell  Shortcut  Tray  webview Tag  Window",
            "title": "\u6587\u6863\u76ee\u5f55"
        },
        {
            "location": "/For Developers/Building NW.js/",
            "text": "Building NW.js {: .doctitle}\n\n\n\n\n\n\n\n\nBuilding NW.js {: .doctitle}\n\n\nPrerequisites\n\n\nGet the Code\n\n\nBuild\n\n\n32-bit/64-bit Build\n\n\nBuild Flavors\n\n\nEnable Proprietary Codecs\n\n\n\n\n\n\nBuild Faster\n\n\n\n\n\n\n\n\n\n\n!!! important\n    This document is written for latest \nNW 0.13\n. For legacy build instructions, please read the \nwiki page\n on GitHub.\n\n\nPrerequisites\n\n\nNW.js use same build tools and similar steps as Chromium. Read the instructions according to your platform to install \ndepot_tools\n and other prerequistes:\n\n\n\n\nWindows\n\n\nMac OS X\n\n\nLinux\n\n\n\n\n!!! note \"Windows\"\n    As suggested by Chromium document, you need to run \nset DEPOT_TOOLS_WIN_TOOLCHAIN=0\n or set the variable in your global environment.\n    CLang is the build tool used by non-Windows platforms. On Windows, it's not supported yet. You need to run \nset GYP_DEFINES=\"clang=0\"\n to disable CLang on Windows before going to next steps.\n\n\n!!! note \"Xcode 7\"\n    Mac SDK 10.11 as part of Xcode 7 is not supported yet. If you have upgraded to Xcode 7, either downgrade to Xcode 6 or copy Mac SDK 10.10 from other machines under \n`xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs\n as suggested by \nChromium document\n.\n\n\nGet the Code\n\n\nStep 1.\n Create a folder for holding NW.js source code, like \n$HOME/nwjs\n, and run following command in the folder to generate \n.gclient\n file:\n\n\nmkdir -p $HOME/nwjs\ncd $HOME/nwjs\ngclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13\n\n\n\n\nGenerally if you are not interested in running Chromium tests, you don't have to sync the test cases and reference builds, which saves you lot of time. Open the \n.gclient\n file you just created and replace \ncustom_deps\n section with followings:\n\n\n\"custom_deps\" : {\n    \"src/third_party/WebKit/LayoutTests\": None,\n    \"src/chrome_frame/tools/test/reference_build/chrome\": None,\n    \"src/chrome_frame/tools/test/reference_build/chrome_win\": None,\n    \"src/chrome/tools/test/reference_build/chrome\": None,\n    \"src/chrome/tools/test/reference_build/chrome_linux\": None,\n    \"src/chrome/tools/test/reference_build/chrome_mac\": None,\n    \"src/chrome/tools/test/reference_build/chrome_win\": None,\n}\n\n\n\n\nStep 2.\n Run following command in your terminal:\n\n\ngclient sync --with_branch_heads\n\n\n\n\nThis usually downloads 20G+ from GitHub and Google's Git repos. Make sure you have a good network provider and be patient :stuck_out_tongue:\n\n\nWhen finished, you will see a \nsrc\n folder created in the same folder as \n.gclient\n.\n\n\n!!! note \"First Build on Linux\"\n    If you are building on Linux \nfor the first time\n, you need to run \ngclient sync --with_branch_heads --nohooks\n and then run \n./build/install-build-deps.sh\n to install dependencies on Ubuntu. See \nChromium document\n for detailed instructions of getting the source code.\n\n\n!!! note \"First Build on Windows\"\n    On Windows, you have to install \nDirectX SDK\n and copy the files into the source folder manually using following bash command:\n\n\nmkdir -p $HOME/nwjs/src/third_party/directxsdk/files\ncp -r /c/Program\\ Files\\ \\(x86\\)/Microsoft\\ DirectX\\ SDK\\ \\(June\\ 2010\\)/* \\\n$HOME/nwjs/src/third_party/directxsdk/files/\n\n\n\n\nBuild\n\n\nBuild files are generated in \nout/\n folder during \ngclient sync\n. Run following command in your terminal will generate the Debug build of standard NW.js binaries in \nout/Debug\n folder:\n\n\ncd src\nninja -C out/Debug nwjs\n\n\n\n\n!!! tip \"Build Time\"\n    Generally a full build takes hours of time depending on the performance of your machine. Recommended configuration is to build on a PC with multicore CPU (>=8 cores), SSD and large memory (>= 8G). And you can read \nBuild Faster\n section below for some tips to speed up the build.\n\n\nTo generate Release build, switch the second command to \nninja -C out/Release nwjs\n.\n\n\nTo build 32-bit/64-bit binaries or non-standard build flavors, you need to setup \nGYP_DEFINES\n variable in your environment and run \ngclient runhooks --force\n to generate build files. And then re-run the commands above to generate binaries. Continue to read following sections to find out how to setup \nGYP_DEFINES\n.\n\n\n32-bit/64-bit Build\n\n\n\n\nWindows\n\n\n32-bit: is the default build target\n\n\n64-bit: \nset GYP_DEFINES=\"target_arch=x64\"\n and rebuild in \nout/Debug_x64\n or \nout/Release_x64\n folder\n\n\n\n\n\n\nLinux\n\n\n32-bit: \nTODO: chroot\n\n\n64-bit: is the default build target\n\n\n\n\n\n\nMac\n\n\n32-bit: \nexport GYP_DEFINES=\"host_arch=ia32 target_arch=ia32\"\n and rebuild in \nout/Debug\n or \nout/Release\n folder\n\n\n64-bit: is the default build target\n\n\n\n\n\n\n\n\nBuild Flavors\n\n\n\n\nStandard: it's generated by default. Same as \nGYP_DEFINES=\"nwjs_sdk=0 disable_nacl=1\"\n.\n\n\nSDK: \nGYP_DEFINES=\"nwjs_sdk=1 disable_nacl=0\"\n\n\nNaCl: \nGYP_DEFINES=\"disable_nacl=0\"\n\n\n\n\nSee \nBuild Flavors\n for the differences of all supported build flavors.\n\n\nEnable Proprietary Codecs\n\n\nDue to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. So you can't play MP3/MP4 with \n<audio>\n and \n<video>\n tags with prebuilt NW.js. To enable those medias, you have to build NW.js from source code by following the document of \nEnable Proprietary Codecs\n.\n\n\nBuild Faster\n\n\nFrom Google's website, there are a few tips to speed up your build. Open the links below to see the tips for your platform:\n\n\n\n\nMac Build Instructions: Faster builds\n\n\nTips for improving build speed on Linux",
            "title": "Building NW.js"
        },
        {
            "location": "/For Developers/Building NW.js/#building-nwjs-doctitle",
            "text": "Building NW.js {: .doctitle}  Prerequisites  Get the Code  Build  32-bit/64-bit Build  Build Flavors  Enable Proprietary Codecs    Build Faster      !!! important\n    This document is written for latest  NW 0.13 . For legacy build instructions, please read the  wiki page  on GitHub.",
            "title": "Building NW.js {: .doctitle}"
        },
        {
            "location": "/For Developers/Building NW.js/#prerequisites",
            "text": "NW.js use same build tools and similar steps as Chromium. Read the instructions according to your platform to install  depot_tools  and other prerequistes:   Windows  Mac OS X  Linux   !!! note \"Windows\"\n    As suggested by Chromium document, you need to run  set DEPOT_TOOLS_WIN_TOOLCHAIN=0  or set the variable in your global environment.\n    CLang is the build tool used by non-Windows platforms. On Windows, it's not supported yet. You need to run  set GYP_DEFINES=\"clang=0\"  to disable CLang on Windows before going to next steps.  !!! note \"Xcode 7\"\n    Mac SDK 10.11 as part of Xcode 7 is not supported yet. If you have upgraded to Xcode 7, either downgrade to Xcode 6 or copy Mac SDK 10.10 from other machines under  `xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs  as suggested by  Chromium document .",
            "title": "Prerequisites"
        },
        {
            "location": "/For Developers/Building NW.js/#get-the-code",
            "text": "Step 1.  Create a folder for holding NW.js source code, like  $HOME/nwjs , and run following command in the folder to generate  .gclient  file:  mkdir -p $HOME/nwjs\ncd $HOME/nwjs\ngclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13  Generally if you are not interested in running Chromium tests, you don't have to sync the test cases and reference builds, which saves you lot of time. Open the  .gclient  file you just created and replace  custom_deps  section with followings:  \"custom_deps\" : {\n    \"src/third_party/WebKit/LayoutTests\": None,\n    \"src/chrome_frame/tools/test/reference_build/chrome\": None,\n    \"src/chrome_frame/tools/test/reference_build/chrome_win\": None,\n    \"src/chrome/tools/test/reference_build/chrome\": None,\n    \"src/chrome/tools/test/reference_build/chrome_linux\": None,\n    \"src/chrome/tools/test/reference_build/chrome_mac\": None,\n    \"src/chrome/tools/test/reference_build/chrome_win\": None,\n}  Step 2.  Run following command in your terminal:  gclient sync --with_branch_heads  This usually downloads 20G+ from GitHub and Google's Git repos. Make sure you have a good network provider and be patient :stuck_out_tongue:  When finished, you will see a  src  folder created in the same folder as  .gclient .  !!! note \"First Build on Linux\"\n    If you are building on Linux  for the first time , you need to run  gclient sync --with_branch_heads --nohooks  and then run  ./build/install-build-deps.sh  to install dependencies on Ubuntu. See  Chromium document  for detailed instructions of getting the source code.  !!! note \"First Build on Windows\"\n    On Windows, you have to install  DirectX SDK  and copy the files into the source folder manually using following bash command:  mkdir -p $HOME/nwjs/src/third_party/directxsdk/files\ncp -r /c/Program\\ Files\\ \\(x86\\)/Microsoft\\ DirectX\\ SDK\\ \\(June\\ 2010\\)/* \\\n$HOME/nwjs/src/third_party/directxsdk/files/",
            "title": "Get the Code"
        },
        {
            "location": "/For Developers/Building NW.js/#build",
            "text": "Build files are generated in  out/  folder during  gclient sync . Run following command in your terminal will generate the Debug build of standard NW.js binaries in  out/Debug  folder:  cd src\nninja -C out/Debug nwjs  !!! tip \"Build Time\"\n    Generally a full build takes hours of time depending on the performance of your machine. Recommended configuration is to build on a PC with multicore CPU (>=8 cores), SSD and large memory (>= 8G). And you can read  Build Faster  section below for some tips to speed up the build.  To generate Release build, switch the second command to  ninja -C out/Release nwjs .  To build 32-bit/64-bit binaries or non-standard build flavors, you need to setup  GYP_DEFINES  variable in your environment and run  gclient runhooks --force  to generate build files. And then re-run the commands above to generate binaries. Continue to read following sections to find out how to setup  GYP_DEFINES .  32-bit/64-bit Build   Windows  32-bit: is the default build target  64-bit:  set GYP_DEFINES=\"target_arch=x64\"  and rebuild in  out/Debug_x64  or  out/Release_x64  folder    Linux  32-bit:  TODO: chroot  64-bit: is the default build target    Mac  32-bit:  export GYP_DEFINES=\"host_arch=ia32 target_arch=ia32\"  and rebuild in  out/Debug  or  out/Release  folder  64-bit: is the default build target     Build Flavors   Standard: it's generated by default. Same as  GYP_DEFINES=\"nwjs_sdk=0 disable_nacl=1\" .  SDK:  GYP_DEFINES=\"nwjs_sdk=1 disable_nacl=0\"  NaCl:  GYP_DEFINES=\"disable_nacl=0\"   See  Build Flavors  for the differences of all supported build flavors.  Enable Proprietary Codecs  Due to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. So you can't play MP3/MP4 with  <audio>  and  <video>  tags with prebuilt NW.js. To enable those medias, you have to build NW.js from source code by following the document of  Enable Proprietary Codecs .",
            "title": "Build"
        },
        {
            "location": "/For Developers/Building NW.js/#build-faster",
            "text": "From Google's website, there are a few tips to speed up your build. Open the links below to see the tips for your platform:   Mac Build Instructions: Faster builds  Tips for improving build speed on Linux",
            "title": "Build Faster"
        },
        {
            "location": "/For Developers/Contributing to NW.js/",
            "text": "Contributing to NW.js {: .doctitle}\n\n\n\n\n\n\n\n\nContributing to NW.js {: .doctitle}\n\n\n\n\n\n\nNW.js project is in active development. And you are encouraged to contribute new features and bug fixes for the project.\n\n\nHere is a general rule when you submit your pull request:\n\n\n\n\nRun test cases and make sure you didn't break any\n\n\nWrite proper test cases\n to test your feature and bug\n\n\nWrite document\n for your features\n\n\nAdd your name and email to \nAUTHORS\n\n\n\n\nWe are liable to accept features which are \ncross platform\n and \neasy to test\n, to make NW.js in good shape and quality.",
            "title": "Contributing to NW.js"
        },
        {
            "location": "/For Developers/Contributing to NW.js/#contributing-to-nwjs-doctitle",
            "text": "Contributing to NW.js {: .doctitle}    NW.js project is in active development. And you are encouraged to contribute new features and bug fixes for the project.  Here is a general rule when you submit your pull request:   Run test cases and make sure you didn't break any  Write proper test cases  to test your feature and bug  Write document  for your features  Add your name and email to  AUTHORS   We are liable to accept features which are  cross platform  and  easy to test , to make NW.js in good shape and quality.",
            "title": "Contributing to NW.js {: .doctitle}"
        },
        {
            "location": "/For Developers/Contributors of Documents/",
            "text": "Contributors of Documents {: .doctitle}\n\n\n\n\n\n\nRoger Wang \nroger.wang@intel.com\n\n\nCong Liu \ncong.liu@intel.com",
            "title": "Contributors of Documents"
        },
        {
            "location": "/For Developers/Contributors of Documents/#contributors-of-documents-doctitle",
            "text": "Roger Wang  roger.wang@intel.com  Cong Liu  cong.liu@intel.com",
            "title": "Contributors of Documents {: .doctitle}"
        },
        {
            "location": "/For Developers/Enable Proprietary Codecs/",
            "text": "Enable Proprietary Codecs\n\n\n\n\n\n\n\n\nEnable Proprietary Codecs\n\n\nSupported Codecs in Prebuilt NW.js Binary\n\n\nEnable Proprietary Codecs in NW.js\n\n\n\n\n\n\n\n\n\n\nSupported Codecs in Prebuilt NW.js Binary\n\n\nAs NW.js is based on Chromium, the media components are essentially the same.\n\n\nIn the pre-built NW.js, following codecs are supported:\n\n\ntheora,vorbis,vp8,pcm_u8,pcm_s16le,pcm_s24le,pcm_f32le,pcm_s16be,pcm_s24be\n\n\n\n\nand following demuxers are supported:\n\n\nogg,matroska,wav\n\n\n\n\nEnable Proprietary Codecs in NW.js\n\n\n!!! warning \"License and Patent Fee\"\n    MP3 and H.264 codecs are licensed under the GPL in \nffmpeg\n used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.\n\n\nIn order to use MP3 and H.264, you'll need to compile ffmpeg with patch and corresponding options.\n\n\nStep 1.\n Apply following patch to \nthird_party/ffmpeg/ffmpeg.gyp\n to make \nffmpeg\n include the codecs:\n\n\ndiff --git a/ffmpeg.gyp b/ffmpeg.gyp                   \nindex 294dd2e..7dfcd3a 100755                          \n--- a/ffmpeg.gyp                                       \n+++ b/ffmpeg.gyp                                       \n@@ -72,7 +72,7 @@                                      \n       ['chromeos == 1', {                             \n         'ffmpeg_branding%': '<(branding)OS',          \n       }, {  # otherwise, assume Chrome/Chromium.      \n-        'ffmpeg_branding%': '<(branding)',            \n+        'ffmpeg_branding%': 'Chrome'                  \n       }],                                             \n     ],                                                \n\n\n\n\nStep 2.\n Setup \nGYP_DEFINES\n to \nproprietary_codecs=1\n to turn on codecs support on Chromium side.\n\n\nStep 3.\n Regenerate the gyp files again with \ngclient runhooks\n.\n\n\nStep 4.\n Rebuild NW.js with \nninja -C out/Release nwjs\n.",
            "title": "Enable Proprietary Codecs"
        },
        {
            "location": "/For Developers/Enable Proprietary Codecs/#enable-proprietary-codecs",
            "text": "Enable Proprietary Codecs  Supported Codecs in Prebuilt NW.js Binary  Enable Proprietary Codecs in NW.js",
            "title": "Enable Proprietary Codecs"
        },
        {
            "location": "/For Developers/Enable Proprietary Codecs/#supported-codecs-in-prebuilt-nwjs-binary",
            "text": "As NW.js is based on Chromium, the media components are essentially the same.  In the pre-built NW.js, following codecs are supported:  theora,vorbis,vp8,pcm_u8,pcm_s16le,pcm_s24le,pcm_f32le,pcm_s16be,pcm_s24be  and following demuxers are supported:  ogg,matroska,wav",
            "title": "Supported Codecs in Prebuilt NW.js Binary"
        },
        {
            "location": "/For Developers/Enable Proprietary Codecs/#enable-proprietary-codecs-in-nwjs",
            "text": "!!! warning \"License and Patent Fee\"\n    MP3 and H.264 codecs are licensed under the GPL in  ffmpeg  used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.  In order to use MP3 and H.264, you'll need to compile ffmpeg with patch and corresponding options.  Step 1.  Apply following patch to  third_party/ffmpeg/ffmpeg.gyp  to make  ffmpeg  include the codecs:  diff --git a/ffmpeg.gyp b/ffmpeg.gyp                   \nindex 294dd2e..7dfcd3a 100755                          \n--- a/ffmpeg.gyp                                       \n+++ b/ffmpeg.gyp                                       \n@@ -72,7 +72,7 @@                                      \n       ['chromeos == 1', {                             \n         'ffmpeg_branding%': '<(branding)OS',          \n       }, {  # otherwise, assume Chrome/Chromium.      \n-        'ffmpeg_branding%': '<(branding)',            \n+        'ffmpeg_branding%': 'Chrome'                  \n       }],                                             \n     ],                                                  Step 2.  Setup  GYP_DEFINES  to  proprietary_codecs=1  to turn on codecs support on Chromium side.  Step 3.  Regenerate the gyp files again with  gclient runhooks .  Step 4.  Rebuild NW.js with  ninja -C out/Release nwjs .",
            "title": "Enable Proprietary Codecs in NW.js"
        },
        {
            "location": "/For Developers/Repositories/",
            "text": "Repositories\n\n\n\n\nFollowing repositories are related to NW.js:\n\n\n\n\nhttps://github.com/nwjs/chromium.src\n\n\nhttps://github.com/nwjs/nw.js\n\n\nhttps://github.com/nwjs/blink\n\n\nhttps://github.com/nwjs/breakpad\n\n\nhttps://github.com/nwjs/node\n\n\nhttps://github.com/nwjs/v8",
            "title": "Repositories"
        },
        {
            "location": "/For Developers/Repositories/#repositories",
            "text": "Following repositories are related to NW.js:   https://github.com/nwjs/chromium.src  https://github.com/nwjs/nw.js  https://github.com/nwjs/blink  https://github.com/nwjs/breakpad  https://github.com/nwjs/node  https://github.com/nwjs/v8",
            "title": "Repositories"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/",
            "text": "Understanding Crash Dump {: .doctitle}\n\n\n\n\n\n\n\n\nUnderstanding Crash Dump {: .doctitle}\n\n\nFind Minidump File\n\n\nOrganize Symbol Files\n\n\nDecode Minidump with minidump_stackwalk\n\n\nTrigger Crash for Testing\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\nOnce NW.js crashed, a \nminidump\n file (\n.dmp\n) will be generated on disk. Users can include it in the bug report. You can decode the \nminidump\n file to get the stack trace when crashed. So it's helpful to find out what's wrong with NW.js in certain cases.\n\n\nTo extract the stack trace from the \nminidump\n file, you need three things: the minidump (\n.dmp\n) file generated from the crash, symbols file of NW.js binary and the \nminidump_stackwalk\n tool.\n\n\nFind Minidump File\n\n\nThe minidump file will be generated in the following default directories when NW.js crashed:\n\n\n\n\nLinux: \n~/.config/<name-in-manifest>/Crash\\ Reports/\n\n\nWindows: \nSystem temporary directory\n\n\nMac: \n~/Library/Application\\ Support/<name-in-manifest>/CrashPad/\n\n\n\n\nThe \n<name-in-manifest>\n is the \nname\n field of \nManifest file\n.\n\n\n!!! note \"Strip Headers from Linux Minidump File\"\n    Minidump file generated on Linux has additional headers in text format. They have to be stripped off before decoding. The real content of minidump file starts with \nMDMP\n followed by unreadable binaries. So simply delete the text before \nMDMP\n.\n\n\nOrganize Symbol Files\n\n\nPackages of symbol files for released NW.js can be found within the same folder of NW.js download folder. The symbol files (.sym) can be extracted from the downloaded packages.\n\n\nThen you have to organize the symbol files in a \ncorrect path with correct file name\n in order be used by \nminidump_stackwalk\n tool. \nminidump_stackwalk\n uses \nsimple symbol supplier\n to find symbol files. Following is the way of how it finds the symbol files.\n\n\nThe tool will try to search the \n.sym\n file as in following pattern:\n\n{SYMBOLS_ROOT}/{DEBUG_FILE_NAME}/{DEBUG_IDENTIFIER}/{DEBUG_FILE_NAME_WITHOUT_PDB}.sym\n\n\n\n\n{SYMBOLS_ROOT}\n is the root folder of all symbol files. You can put all versions / platforms of NW \n.sym\n files in a same folder.\n\n\n{DEBUG_FILE_NAME}\n, \n{DEBUG_IDENTIFIER}\n and \n{DEBUG_FILE_NAME_WITHOUT_PDB}\n can be obtained from the first line of \n.sym\n file which typically looks like \nMODULE Linux x86_64 265BDB6BE043D5C70D3A1E279A8F0B1A0 nw\n.\n\n\n265BDB6BE043D5C70D3A1E279A8F0B1A0\n is \n{DEBUG_IDENTIFIER}\n\n\nnw\n is \n{DEBUG_FILE_NAME}\n.\n\n\n{DEBUG_FILE_NAME_WITHOUT_PDB}\n can be converted from \n{DEBUG_FILE_NAME}\n by removing \n.pdb\n extension which is only necessary for Windows.\n\n\n\n\n\n\n\n\nDecode Minidump with \nminidump_stackwalk\n\n\nminidump_stackwalk\n can be built with NW.js or from breakpad source code directly on Mac and Linux. Or you can install prebuilt from Cygwin on Windows.\n\n\nTo get the stack trace from \nminidump\n file, run following command:\n\n\nminidump_stackwalk minidump_file.dmp /path/to/symbols_root 2>&1\n\n\n\n\nIf the symbol files were not organized correctly, you still can get call stack from this tool. But you will not see symbols and there will be a warning in last section of output - \"Loaded modules\" like this:\n\n\n0x00240000 - 0x02b29fff nw.exe ??? (main) (WARNING: No symbols, nw.exe.pdb, 669008F7B6EE44058CBD5F21BEB5B5CFe)\n\n\n\n\nTrigger Crash for Testing\n\n\nTo test the crash dump feature, you can trigger the crash on purpose with APIs provided by NW.js: \nApp.crashBrowser()\n and \nApp.crashRenderer()\n. They crash the browser process and the renderer process respectively.\n\n\nReferences\n\n\n\n\nhttp://www.chromium.org/developers/decoding-crash-dumps  \n\n\nhttp://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad",
            "title": "Understanding Crash Dump"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#understanding-crash-dump-doctitle",
            "text": "Understanding Crash Dump {: .doctitle}  Find Minidump File  Organize Symbol Files  Decode Minidump with minidump_stackwalk  Trigger Crash for Testing  References      Once NW.js crashed, a  minidump  file ( .dmp ) will be generated on disk. Users can include it in the bug report. You can decode the  minidump  file to get the stack trace when crashed. So it's helpful to find out what's wrong with NW.js in certain cases.  To extract the stack trace from the  minidump  file, you need three things: the minidump ( .dmp ) file generated from the crash, symbols file of NW.js binary and the  minidump_stackwalk  tool.",
            "title": "Understanding Crash Dump {: .doctitle}"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#find-minidump-file",
            "text": "The minidump file will be generated in the following default directories when NW.js crashed:   Linux:  ~/.config/<name-in-manifest>/Crash\\ Reports/  Windows:  System temporary directory  Mac:  ~/Library/Application\\ Support/<name-in-manifest>/CrashPad/   The  <name-in-manifest>  is the  name  field of  Manifest file .  !!! note \"Strip Headers from Linux Minidump File\"\n    Minidump file generated on Linux has additional headers in text format. They have to be stripped off before decoding. The real content of minidump file starts with  MDMP  followed by unreadable binaries. So simply delete the text before  MDMP .",
            "title": "Find Minidump File"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#organize-symbol-files",
            "text": "Packages of symbol files for released NW.js can be found within the same folder of NW.js download folder. The symbol files (.sym) can be extracted from the downloaded packages.  Then you have to organize the symbol files in a  correct path with correct file name  in order be used by  minidump_stackwalk  tool.  minidump_stackwalk  uses  simple symbol supplier  to find symbol files. Following is the way of how it finds the symbol files.  The tool will try to search the  .sym  file as in following pattern: {SYMBOLS_ROOT}/{DEBUG_FILE_NAME}/{DEBUG_IDENTIFIER}/{DEBUG_FILE_NAME_WITHOUT_PDB}.sym   {SYMBOLS_ROOT}  is the root folder of all symbol files. You can put all versions / platforms of NW  .sym  files in a same folder.  {DEBUG_FILE_NAME} ,  {DEBUG_IDENTIFIER}  and  {DEBUG_FILE_NAME_WITHOUT_PDB}  can be obtained from the first line of  .sym  file which typically looks like  MODULE Linux x86_64 265BDB6BE043D5C70D3A1E279A8F0B1A0 nw .  265BDB6BE043D5C70D3A1E279A8F0B1A0  is  {DEBUG_IDENTIFIER}  nw  is  {DEBUG_FILE_NAME} .  {DEBUG_FILE_NAME_WITHOUT_PDB}  can be converted from  {DEBUG_FILE_NAME}  by removing  .pdb  extension which is only necessary for Windows.",
            "title": "Organize Symbol Files"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#decode-minidump-with-minidump_stackwalk",
            "text": "minidump_stackwalk  can be built with NW.js or from breakpad source code directly on Mac and Linux. Or you can install prebuilt from Cygwin on Windows.  To get the stack trace from  minidump  file, run following command:  minidump_stackwalk minidump_file.dmp /path/to/symbols_root 2>&1  If the symbol files were not organized correctly, you still can get call stack from this tool. But you will not see symbols and there will be a warning in last section of output - \"Loaded modules\" like this:  0x00240000 - 0x02b29fff nw.exe ??? (main) (WARNING: No symbols, nw.exe.pdb, 669008F7B6EE44058CBD5F21BEB5B5CFe)",
            "title": "Decode Minidump with minidump_stackwalk"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#trigger-crash-for-testing",
            "text": "To test the crash dump feature, you can trigger the crash on purpose with APIs provided by NW.js:  App.crashBrowser()  and  App.crashRenderer() . They crash the browser process and the renderer process respectively.",
            "title": "Trigger Crash for Testing"
        },
        {
            "location": "/For Developers/Understanding Crash Dump/#references",
            "text": "http://www.chromium.org/developers/decoding-crash-dumps    http://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad",
            "title": "References"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/",
            "text": "Writing Documents for NW.js {: .doctitle}\n\n\n\n\n\n\nWriting Documents for NW.js {: .doctitle}\n\n\nRead Before Writing New Document\n\n\nView the Document Offline\n\n\nTemplate for API Reference Page\n\n\nChecklist for Pull Request\n\n\nMarkdown Extensions\n\n\n\n\n\n\n\n\n\n\nRead Before Writing New Document\n\n\nGithub provides nice representation of Markdown online with its own syntax GFM (Github Flavored Markdown). And many of the developers are reading documents directly on GitHub. To enable the best documentation of NW.js for any developers, \nmake sure the document is readable on GitHub before submitting your PR\n.\n\n\nThe documentation site of NW.js is generated by \nMkDocs\n which supports a slightly different Markdown syntax than GFM. So the page may be broken on GitHub while works under MkDocs, or vice versa.\nA bad example is not having \n.md\n suffix in internal links, like \n[Build NW.js](Build NW.js)\n. On GitHub, the link is broken because the file \nBuild NW.js\n without \n.md\n does not exist. Always add \n.md\n suffix to your internal links.\n\n\nView the Document Offline\n\n\nTo view the well-formatted documents on your own laptop, you need \nPython\n and install following dependencies:\n\n\npip install mkdocs pygments pymdown-extensions\n\n\n\n\nRun following commands in the root of NW.js repo:\n\n\nmkdocs serve\n\n\n\n\nThen open your browser and navigate to http://localhost:8000/ .\n\n\nTemplate for API Reference Page\n\n\nHere is a minimal template for writing a page for NW.js API reference:\n\n\n# Module Name {: .doctitle}\n\n---\n\n[TOC]\n\nDescribe the usage and other details of the module here.\n\n## Module.staticMethod(arg1, arg2)\n\n* `arg1` `{String}` description of `arg1`\n* `arg2` `{Object}` description of `arg2`\n  * `isSet` `{Boolean}` description of the field\n* Returns `{Type}` description of the return value\n\nDetails about the the method.\n\n## inst.method(arg1, arg2)\n\n## Event: eventName(arg1, arg2)\n\n\n\n\n\n\n[MUST]\n use \n#\n for page title and \n##\n or \n###\n headers for sections. \nDO NOT\n use \n=======\n or \n-------\n.\n\n\n[MUST]\n add \n{: .doctitle}\n right to the page title. This is the CSS class name for the document title.\n\n\n[MUST]\n add a horizontal ruler with \n---\n after the page title.\n\n\n[MUST]\n add a \n[TOC]\n after the ruler.\n\n\n[MUST]\n quote any code with a back tick (\n`\n) in the document unless it's in the headers.\n\n\n[MUST]\n specify the language for the code blocks.\n\n\nInstance methods / properties in headers \n[MUST]\n use lower case instance name. Bad example: \nWindow.resizeTo(x,y)\n; Good example: \nwin.resizeTo(x,y)\n\n\nEvents \n[MUST]\n in headers be written as \nEvent: eventName(args...)\n\n\n[MUST]\n provide detailed list of arguments and return values for methods, including name, type wrapped with brackets ({TypeName}) and whether it's optional in italic (\nOptional\n).\n\n\n\n\nChecklist for Pull Request\n\n\n\n\n[ ] Comply with the \nTemplate for API Reference Page\n above\n\n\n[ ] Make sure the document is readable on GitHub\n\n\n[ ] Make sure the links are not broken\n\n\n[ ] Add your name and email to \nContributors of Documents.md\n\n\n\n\nMarkdown Extensions\n\n\nCurrently the documentation site of NW.js enables following extensions for generating documents. See \nmkdocs.yml\n in the root for detailed configuration.\n\n\n\n\nmarkdown.extensions.toc\n\n\nmarkdown.extensions.admonition\n\n\nmarkdown.extensions.smarty\n\n\nmarkdown.extensions.nl2br\n\n\nmarkdown.extensions.codehilite\n\n\npymdownx.extra\n\n\npymdownx.inlinehilite\n\n\npymdownx.magiclink\n\n\npymdownx.tilde\n\n\npymdownx.caret\n\n\npymdownx.smartsymbols\n\n\npymdownx.githubemoji\n\n\npymdownx.tasklist\n\n\npymdownx.progressbar\n\n\npymdownx.headeranchor\n\n\npymdownx.arithmatex\n\n\npymdownx.mark\n\n\npymdownx.critic",
            "title": "Writing Documents for NW.js"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#writing-documents-for-nwjs-doctitle",
            "text": "Writing Documents for NW.js {: .doctitle}  Read Before Writing New Document  View the Document Offline  Template for API Reference Page  Checklist for Pull Request  Markdown Extensions",
            "title": "Writing Documents for NW.js {: .doctitle}"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#read-before-writing-new-document",
            "text": "Github provides nice representation of Markdown online with its own syntax GFM (Github Flavored Markdown). And many of the developers are reading documents directly on GitHub. To enable the best documentation of NW.js for any developers,  make sure the document is readable on GitHub before submitting your PR .  The documentation site of NW.js is generated by  MkDocs  which supports a slightly different Markdown syntax than GFM. So the page may be broken on GitHub while works under MkDocs, or vice versa.\nA bad example is not having  .md  suffix in internal links, like  [Build NW.js](Build NW.js) . On GitHub, the link is broken because the file  Build NW.js  without  .md  does not exist. Always add  .md  suffix to your internal links.",
            "title": "Read Before Writing New Document"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#view-the-document-offline",
            "text": "To view the well-formatted documents on your own laptop, you need  Python  and install following dependencies:  pip install mkdocs pygments pymdown-extensions  Run following commands in the root of NW.js repo:  mkdocs serve  Then open your browser and navigate to http://localhost:8000/ .",
            "title": "View the Document Offline"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#template-for-api-reference-page",
            "text": "Here is a minimal template for writing a page for NW.js API reference:  # Module Name {: .doctitle}\n\n---\n\n[TOC]\n\nDescribe the usage and other details of the module here.\n\n## Module.staticMethod(arg1, arg2)\n\n* `arg1` `{String}` description of `arg1`\n* `arg2` `{Object}` description of `arg2`\n  * `isSet` `{Boolean}` description of the field\n* Returns `{Type}` description of the return value\n\nDetails about the the method.\n\n## inst.method(arg1, arg2)\n\n## Event: eventName(arg1, arg2)   [MUST]  use  #  for page title and  ##  or  ###  headers for sections.  DO NOT  use  =======  or  ------- .  [MUST]  add  {: .doctitle}  right to the page title. This is the CSS class name for the document title.  [MUST]  add a horizontal ruler with  ---  after the page title.  [MUST]  add a  [TOC]  after the ruler.  [MUST]  quote any code with a back tick ( ` ) in the document unless it's in the headers.  [MUST]  specify the language for the code blocks.  Instance methods / properties in headers  [MUST]  use lower case instance name. Bad example:  Window.resizeTo(x,y) ; Good example:  win.resizeTo(x,y)  Events  [MUST]  in headers be written as  Event: eventName(args...)  [MUST]  provide detailed list of arguments and return values for methods, including name, type wrapped with brackets ({TypeName}) and whether it's optional in italic ( Optional ).",
            "title": "Template for API Reference Page"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#checklist-for-pull-request",
            "text": "[ ] Comply with the  Template for API Reference Page  above  [ ] Make sure the document is readable on GitHub  [ ] Make sure the links are not broken  [ ] Add your name and email to  Contributors of Documents.md",
            "title": "Checklist for Pull Request"
        },
        {
            "location": "/For Developers/Writing Documents for NW.js/#markdown-extensions",
            "text": "Currently the documentation site of NW.js enables following extensions for generating documents. See  mkdocs.yml  in the root for detailed configuration.   markdown.extensions.toc  markdown.extensions.admonition  markdown.extensions.smarty  markdown.extensions.nl2br  markdown.extensions.codehilite  pymdownx.extra  pymdownx.inlinehilite  pymdownx.magiclink  pymdownx.tilde  pymdownx.caret  pymdownx.smartsymbols  pymdownx.githubemoji  pymdownx.tasklist  pymdownx.progressbar  pymdownx.headeranchor  pymdownx.arithmatex  pymdownx.mark  pymdownx.critic",
            "title": "Markdown Extensions"
        },
        {
            "location": "/For Developers/Writing Test Cases for NW.js/",
            "text": "Writing Test Cases for NW.js {: .doctitle}\n\n\n\n\n\n\n\n\nWriting Test Cases for NW.js {: .doctitle}\n\n\nTest Framework\n\n\nWrite Test Cases\n\n\nAuto Test Case\n\n\nRemoting Test Case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest Framework\n\n\nNW.js is using a tiny Python based framework only in three files. You can read the source code in \ntest\n directory\n.\n\n\nEach test case in NW.js is a runnable app, so that you can manually run the case without the framework.\n\n\nIn NW.js, there are two types of test cases: \nauto\n and \nremoting\n. See \nWrite Test Cases\n sections below to see the instructions.\n\n\nTo run the test cases, use the following command:\n\n\npython test/test.py -t 80 auto\npython test/test.py -t 80 remoting\n\n\n\n\nWrite Test Cases\n\n\nAuto Test Case\n\n\nTODO\n\n\nRemoting Test Case\n\n\nThe remoting test cases are driven by ChromeDriver. Usually these test cases involves user interaction. See \nTest with ChromeDriver\n for the usage of ChromeDriver.\n\n\nA remoting test case requires a \ntest.py\n file in the root of the application folder.\n\n\nHere is the template of \ntest.py\n file:\n\n\nimport time\nimport os\n\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nchrome_options = Options()\nchrome_options.add_argument(\"nwapp=\" + os.path.dirname(os.path.abspath(__file__)))\n\ndriver = webdriver.Chrome(executable_path=os.environ['CHROMEDRIVER'], chrome_options=chrome_options)\ntime.sleep(1)\ntry:\n    print driver.current_url\n    # Put your test code here using `assert`\nfinally:\n    driver.quit()\n\n\n\n\nThe real case is an NW.js app. With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. For example, with following code, when you click the button of \"Click Me\", a new DOM element will be added to the document with content of \"success\":\n\n\n<button id=\"clickme\" onclick=\"success()\">Click Me</button>\n<script>\nfunction success() {\n    var el = document.createElement('div');\n    el.id = 'result';\n    el.innerHTML = 'success';\n    document.body.appendChild(el);\n}\n</script>\n\n\n\n\nThen you can test it in \ntest.py\n script:\n\n\ndriver.implicitly_wait(10) # 10s timeout when finding an element\n\nclickme = driver.find_element_by_id('clickme')\nclickme.click() # click the button\n\nresult = driver.find_element_by_id('result')\nassert(\"success\" in result.get_attribute('innerHTML')) # assert \"success\" is in the element",
            "title": "Writing Test Cases for NW.js"
        },
        {
            "location": "/For Developers/Writing Test Cases for NW.js/#writing-test-cases-for-nwjs-doctitle",
            "text": "Writing Test Cases for NW.js {: .doctitle}  Test Framework  Write Test Cases  Auto Test Case  Remoting Test Case",
            "title": "Writing Test Cases for NW.js {: .doctitle}"
        },
        {
            "location": "/For Developers/Writing Test Cases for NW.js/#test-framework",
            "text": "NW.js is using a tiny Python based framework only in three files. You can read the source code in  test  directory .  Each test case in NW.js is a runnable app, so that you can manually run the case without the framework.  In NW.js, there are two types of test cases:  auto  and  remoting . See  Write Test Cases  sections below to see the instructions.  To run the test cases, use the following command:  python test/test.py -t 80 auto\npython test/test.py -t 80 remoting",
            "title": "Test Framework"
        },
        {
            "location": "/For Developers/Writing Test Cases for NW.js/#write-test-cases",
            "text": "Auto Test Case  TODO  Remoting Test Case  The remoting test cases are driven by ChromeDriver. Usually these test cases involves user interaction. See  Test with ChromeDriver  for the usage of ChromeDriver.  A remoting test case requires a  test.py  file in the root of the application folder.  Here is the template of  test.py  file:  import time\nimport os\n\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nchrome_options = Options()\nchrome_options.add_argument(\"nwapp=\" + os.path.dirname(os.path.abspath(__file__)))\n\ndriver = webdriver.Chrome(executable_path=os.environ['CHROMEDRIVER'], chrome_options=chrome_options)\ntime.sleep(1)\ntry:\n    print driver.current_url\n    # Put your test code here using `assert`\nfinally:\n    driver.quit()  The real case is an NW.js app. With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. For example, with following code, when you click the button of \"Click Me\", a new DOM element will be added to the document with content of \"success\":  <button id=\"clickme\" onclick=\"success()\">Click Me</button>\n<script>\nfunction success() {\n    var el = document.createElement('div');\n    el.id = 'result';\n    el.innerHTML = 'success';\n    document.body.appendChild(el);\n}\n</script>  Then you can test it in  test.py  script:  driver.implicitly_wait(10) # 10s timeout when finding an element\n\nclickme = driver.find_element_by_id('clickme')\nclickme.click() # click the button\n\nresult = driver.find_element_by_id('result')\nassert(\"success\" in result.get_attribute('innerHTML')) # assert \"success\" is in the element",
            "title": "Write Test Cases"
        },
        {
            "location": "/For Users/Debugging with DevTools/",
            "text": "Debugging with DevTools {: .doctitle}\n\n\n\n\n!!! note \"SDK Flavor Only\"\n    DevTools is only available in \nSDK flavor\n. It's recommended to use SDK flavor to develop and test your app. And use other flavors for production.\n\n\nOpen Developer Tools\n\n\nDevTools can be opened with keyboard shortcut \nF12\n for Windows and Linux or \n\u2318\n+\n\u2325\n+\ni\n.\n\n\nAlternatively, you\u00a0may\u00a0open DevTools programmatically using NW.js API \nwin.showDevTools()`\n for a window.\n\n\nRemote Debugging\n\n\nYou can use the \n--remote-debugging-port=port\n command line option to specify which port the DevTools should listen to. For example, by running \nnw --remote-debugging-port=9222\n, you can open http://localhost:9222/ in your browser to visit the debugger remotely.",
            "title": "Debugging with DevTools"
        },
        {
            "location": "/For Users/Debugging with DevTools/#debugging-with-devtools-doctitle",
            "text": "!!! note \"SDK Flavor Only\"\n    DevTools is only available in  SDK flavor . It's recommended to use SDK flavor to develop and test your app. And use other flavors for production.",
            "title": "Debugging with DevTools {: .doctitle}"
        },
        {
            "location": "/For Users/Debugging with DevTools/#open-developer-tools",
            "text": "DevTools can be opened with keyboard shortcut  F12  for Windows and Linux or  \u2318 + \u2325 + i .  Alternatively, you\u00a0may\u00a0open DevTools programmatically using NW.js API  win.showDevTools()`  for a window.",
            "title": "Open Developer Tools"
        },
        {
            "location": "/For Users/Debugging with DevTools/#remote-debugging",
            "text": "You can use the  --remote-debugging-port=port  command line option to specify which port the DevTools should listen to. For example, by running  nw --remote-debugging-port=9222 , you can open http://localhost:9222/ in your browser to visit the debugger remotely.",
            "title": "Remote Debugging"
        },
        {
            "location": "/For Users/FAQ/",
            "text": "FAQ {: .doctitle}\n\n\n\n\n\n\n\n\nFAQ {: .doctitle}\n\n\n1. var crypto = require('crypto') gets a wrong object\n\n\n2. Images are broken in AnugarJS and receive Failed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME in DevTools\n\n\n\n\n\n\n\n\n\n\n1. \nvar crypto = require('crypto')\n gets a wrong object\n\n\nChromium has its\u00a0own global \ncrypto\n object which can't be overwritten. So you can't use the same variable name \ncrypto\n. Changing your variable name to something else, like \nnodeCrypto\n, will work.\n\n\n2. Images are broken in AnugarJS and receive \nFailed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME\n in DevTools\n\n\nAngularJS added \nunsafe:\n prefix for unknown scheme to prevent XSS attack. URLs in NW.js and Chrome apps are started with \nchrome-extension:\n scheme, which is unknown to AnuglarJS. The solution is to config the whitelist of known schemes with AngularJS by adding following lines:\n\n\nmyApp.config(['$compileProvider',\n  function($compileProvider) {\n    $compileProvider.imgSrcSanitizationWhitelist(/^\\s*((https?|ftp|file|blob|chrome-extension):|data:image\\/)/);\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|tel|file:chrome-extension):/);\n  }]);",
            "title": "FAQ"
        },
        {
            "location": "/For Users/FAQ/#faq-doctitle",
            "text": "FAQ {: .doctitle}  1. var crypto = require('crypto') gets a wrong object  2. Images are broken in AnugarJS and receive Failed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME in DevTools",
            "title": "FAQ {: .doctitle}"
        },
        {
            "location": "/For Users/FAQ/#1-var-crypto-requirecrypto-gets-a-wrong-object",
            "text": "Chromium has its\u00a0own global  crypto  object which can't be overwritten. So you can't use the same variable name  crypto . Changing your variable name to something else, like  nodeCrypto , will work.",
            "title": "1. var crypto = require('crypto') gets a wrong object"
        },
        {
            "location": "/For Users/FAQ/#2-images-are-broken-in-anugarjs-and-receive-failed-to-load-resource-xxx-neterr_unknown_url_scheme-in-devtools",
            "text": "AngularJS added  unsafe:  prefix for unknown scheme to prevent XSS attack. URLs in NW.js and Chrome apps are started with  chrome-extension:  scheme, which is unknown to AnuglarJS. The solution is to config the whitelist of known schemes with AngularJS by adding following lines:  myApp.config(['$compileProvider',\n  function($compileProvider) {\n    $compileProvider.imgSrcSanitizationWhitelist(/^\\s*((https?|ftp|file|blob|chrome-extension):|data:image\\/)/);\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|tel|file:chrome-extension):/);\n  }]);",
            "title": "2. Images are broken in AnugarJS and receive Failed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME in DevTools"
        },
        {
            "location": "/For Users/Getting Started/",
            "text": "Getting Started with NW.js\n\n\n\n\n\n\n\n\nGetting Started with NW.js\n\n\nWhat can NW.js do?\n\n\nGet NW.js\n\n\nWrite NW.js App\n\n\nExample 1 - Hello World\n\n\nExample 2 - Using NW.js APIs\n\n\nExample 3 - Using Node.js API\n\n\n\n\n\n\nWhat's next\n\n\nGetting Help\n\n\n\n\n\n\n\n\n\n\nWhat can NW.js do?\n\n\nNW.js is based on \nChromium\n and \nNode.js\n. It\u00a0lets\u00a0you\u00a0call Node.js code and modules directly from browser and also use Web technologies in your app. Further, you can easily package a web application to a native application.\n\n\nGet NW.js\n\n\nYou can get the latest binaries from official website http://nwjs.io. Or you can also build NW.js binaries yourself by following the instructions in \nBuilding NW.js\n.\n\n\n!!! tip\n    You are recommended to choose SDK build flavor to develop your app, which enables you to use DevTools to debug your app. See \nBuild Flavors\n for the differences between build flavors.\n\n\nWrite NW.js App\n\n\nExample 1 - Hello World\n\n\nThis the basic example shows how to write an NW.js app.\n\n\nStep 1.\n Create \npackage.json\n:\n\n\n{\n  \"name\": \"helloworld\",\n  \"main\": \"index.html\"\n}\n\n\n\n\npackage.json\n is the manifest file in your app. It is written in \nJSON format\n. The \nmain\n field figures out the first page opened by the NW.js, i.e. \n\"index.html\"\n in this example. And the \nname\n field is the unique name used among NW.js apps. See \nManifest Format\n for more details.\n\n\nStep 2.\n Create \nindex.html\n:\n\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n\n\n\n\nThis is the normal HTML file. You can use any web technologies supported by latest browsers.\n\n\n!!! note \"Chromium Specific Features\"\n    NW.js is based on Chromium, which also enables you to use Chrome specific features. Such as \nFile System API\n, experimental CSS styles with \n-webkit-\n prefix. \nBe careful with these non-standard features since they may be deprecated shortly.\n\n\nStep 3.\n Run your app\n\n\ncd /path/to/your/app\n/path/to/nw .\n\n\n\n\n/path/to/nw\n is the binary file of NW.js. On Windows, it's \nnw.exe\n; On Linux, it's \nnw\n; On Mac, it's \nnwjs.app/Contents/MacOS/nwjs\n.\n\n\n!!! tip \"Drag & Drop on Windows\"\n    On Windows, you can drag the \npackage.json\n to \nnw.exe\n to run your app.\n\n\nExample 2 - Using NW.js APIs\n\n\nAll NW.js APIs are loaded in \nnw\n object globally and can be used directly in JavaScript files. See \nAPI References\n for full list of supported APIs.\n\n\nThis example shows how to create a native context menu in your NW.js app. You can create \nindex.html\n with following content:\n\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Context Menu</title>\n</head>\n<body style=\"width: 100%; height: 100%;\">\n\n<p>'Right click' to show context menu.</p>\n\n<script>\n// Create an empty context menu\nvar menu = new nw.Menu();\n\n// Add some items with label\nmenu.append(new nw.MenuItem({\n  label: 'Item A',\n  click: function(){\n    alert('You have clicked at \"Item A\"');\n  }\n}));\nmenu.append(new nw.MenuItem({ label: 'Item B' }));\nmenu.append(new nw.MenuItem({ type: 'separator' }));\nmenu.append(new nw.MenuItem({ label: 'Item C' }));\n\n// Hooks the \"contextmenu\" event\ndocument.body.addEventListener('contextmenu', function(ev) {\n  // Prevent showing default context menu\n  ev.preventDefault();\n  // Popup the native context menu at place you click\n  menu.popup(ev.x, ev.y);\n\n  return false;\n}, false);\n\n</script>  \n</body>\n</html>\n\n\n\n\n... then run your app:\n\n\ncd /path/to/your/app\n/path/to/nw .\n\n\n\n\n!!! tip \"require('nw.gui')\"\n    The legacy way of loading NW.js APIs using \nrequire('nw.gui')\n is also supported. It returns the same \nnw\n object.\n\n\nExample 3 - Using Node.js API\n\n\nYou can call node.js and modules directly from the DOM. So it enables endless possibilities for writing apps with nw.js.\n\n\nThis example shows how to query the OS platform with \nos\n module of Node.js. Simpley create the \nindex.html\n file with following content and run it with NW.js.\n\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My OS Platform</title>\n</head>\n<body>\n<script>\n// get the system platform using node.js\nvar os = require('os');\ndocument.write('You are running on ', os.platform());\n</script>\n</body>\n</html>\n\n\n\n\nYou could also use the modules installed by \nnpm\n with NW.js.\n\n\n!!! note \"Native Node Modules\"\n    Native Node modules, built when running \nnpm install\n, are not compatible with NW.js ABI. To use them, you have to rebuild it from source code with \nnw-gyp\n. See \nUse Native Node Modules\n for details.\n\n\nWhat's next\n\n\nSee \nDebugging with DevTools\n for debugging NW.js apps.\n\n\nSee \nPackage and Distribute\n for packaging and reditribute your app in production.\n\n\nSee \nFAQ\n for issues you may encounter.\n\n\nSee \nthe migration notes\n, if you are migrating your app from NW.js 0.12 or older versions.\n\n\nGetting Help\n\n\nThere are lots of useful information on \nNW.js wiki\n. The wiki is also open for everyone, and you are encouraged to publish your knowledge on wiki.\n\n\nYou can also ask questions on \nmail list on Google group\n or chat on \nGitter\n.\n\n\nPlease report bugs or submit requirements on \nGitHub\n to make NW.js more powerful.",
            "title": "Getting Started"
        },
        {
            "location": "/For Users/Getting Started/#getting-started-with-nwjs",
            "text": "Getting Started with NW.js  What can NW.js do?  Get NW.js  Write NW.js App  Example 1 - Hello World  Example 2 - Using NW.js APIs  Example 3 - Using Node.js API    What's next  Getting Help",
            "title": "Getting Started with NW.js"
        },
        {
            "location": "/For Users/Getting Started/#what-can-nwjs-do",
            "text": "NW.js is based on  Chromium  and  Node.js . It\u00a0lets\u00a0you\u00a0call Node.js code and modules directly from browser and also use Web technologies in your app. Further, you can easily package a web application to a native application.",
            "title": "What can NW.js do?"
        },
        {
            "location": "/For Users/Getting Started/#get-nwjs",
            "text": "You can get the latest binaries from official website http://nwjs.io. Or you can also build NW.js binaries yourself by following the instructions in  Building NW.js .  !!! tip\n    You are recommended to choose SDK build flavor to develop your app, which enables you to use DevTools to debug your app. See  Build Flavors  for the differences between build flavors.",
            "title": "Get NW.js"
        },
        {
            "location": "/For Users/Getting Started/#write-nwjs-app",
            "text": "Example 1 - Hello World  This the basic example shows how to write an NW.js app.  Step 1.  Create  package.json :  {\n  \"name\": \"helloworld\",\n  \"main\": \"index.html\"\n}  package.json  is the manifest file in your app. It is written in  JSON format . The  main  field figures out the first page opened by the NW.js, i.e.  \"index.html\"  in this example. And the  name  field is the unique name used among NW.js apps. See  Manifest Format  for more details.  Step 2.  Create  index.html :  <!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>  This is the normal HTML file. You can use any web technologies supported by latest browsers.  !!! note \"Chromium Specific Features\"\n    NW.js is based on Chromium, which also enables you to use Chrome specific features. Such as  File System API , experimental CSS styles with  -webkit-  prefix.  Be careful with these non-standard features since they may be deprecated shortly.  Step 3.  Run your app  cd /path/to/your/app\n/path/to/nw .  /path/to/nw  is the binary file of NW.js. On Windows, it's  nw.exe ; On Linux, it's  nw ; On Mac, it's  nwjs.app/Contents/MacOS/nwjs .  !!! tip \"Drag & Drop on Windows\"\n    On Windows, you can drag the  package.json  to  nw.exe  to run your app.  Example 2 - Using NW.js APIs  All NW.js APIs are loaded in  nw  object globally and can be used directly in JavaScript files. See  API References  for full list of supported APIs.  This example shows how to create a native context menu in your NW.js app. You can create  index.html  with following content:  <!DOCTYPE html>\n<html>\n<head>\n  <title>Context Menu</title>\n</head>\n<body style=\"width: 100%; height: 100%;\">\n\n<p>'Right click' to show context menu.</p>\n\n<script>\n// Create an empty context menu\nvar menu = new nw.Menu();\n\n// Add some items with label\nmenu.append(new nw.MenuItem({\n  label: 'Item A',\n  click: function(){\n    alert('You have clicked at \"Item A\"');\n  }\n}));\nmenu.append(new nw.MenuItem({ label: 'Item B' }));\nmenu.append(new nw.MenuItem({ type: 'separator' }));\nmenu.append(new nw.MenuItem({ label: 'Item C' }));\n\n// Hooks the \"contextmenu\" event\ndocument.body.addEventListener('contextmenu', function(ev) {\n  // Prevent showing default context menu\n  ev.preventDefault();\n  // Popup the native context menu at place you click\n  menu.popup(ev.x, ev.y);\n\n  return false;\n}, false);\n\n</script>  \n</body>\n</html>  ... then run your app:  cd /path/to/your/app\n/path/to/nw .  !!! tip \"require('nw.gui')\"\n    The legacy way of loading NW.js APIs using  require('nw.gui')  is also supported. It returns the same  nw  object.  Example 3 - Using Node.js API  You can call node.js and modules directly from the DOM. So it enables endless possibilities for writing apps with nw.js.  This example shows how to query the OS platform with  os  module of Node.js. Simpley create the  index.html  file with following content and run it with NW.js.  <!DOCTYPE html>\n<html>\n<head>\n  <title>My OS Platform</title>\n</head>\n<body>\n<script>\n// get the system platform using node.js\nvar os = require('os');\ndocument.write('You are running on ', os.platform());\n</script>\n</body>\n</html>  You could also use the modules installed by  npm  with NW.js.  !!! note \"Native Node Modules\"\n    Native Node modules, built when running  npm install , are not compatible with NW.js ABI. To use them, you have to rebuild it from source code with  nw-gyp . See  Use Native Node Modules  for details.",
            "title": "Write NW.js App"
        },
        {
            "location": "/For Users/Getting Started/#whats-next",
            "text": "See  Debugging with DevTools  for debugging NW.js apps.  See  Package and Distribute  for packaging and reditribute your app in production.  See  FAQ  for issues you may encounter.  See  the migration notes , if you are migrating your app from NW.js 0.12 or older versions.",
            "title": "What's next"
        },
        {
            "location": "/For Users/Getting Started/#getting-help",
            "text": "There are lots of useful information on  NW.js wiki . The wiki is also open for everyone, and you are encouraged to publish your knowledge on wiki.  You can also ask questions on  mail list on Google group  or chat on  Gitter .  Please report bugs or submit requirements on  GitHub  to make NW.js more powerful.",
            "title": "Getting Help"
        },
        {
            "location": "/For Users/Package and Distribute/",
            "text": "Package and Distribute {: .doctitle}\n\n\n\n\n\n\n\n\nPackage and Distribute {: .doctitle}\n\n\nQuick Start\n\n\nPrepare Your App\n\n\nPrepare NW.js\n\n\nPackage Your App\n\n\nPackage Option 1. Plain Files (Recommended)\n\n\nPackage Option 2. Zip File\n\n\n\n\n\n\nPlatform Specific Steps\n\n\nWindows\n\n\nLinux\n\n\nMac OS X\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\nThis document guides you how to package and distribute NW.js based app.\n\n\nQuick Start\n\n\nYou can use \nnw-builder\n to quickly generate a package for you.\n\n\n\n\nPrepare your app\n as below.\n\n\nInstall \nnw-builder\n with \nnpm install -g nw-builder\n\n\nPackage your app with \nnwbuild -p linux64 /path/to/your/app\n\n\n\n\nYour app can be found in \n./build\n folder.\n\n\nPrepare Your App\n\n\nBefore packaging, you should prepare all necessary files on hands. Check out following checklist to make sure you didn't miss anything:\n\n\n\n\n[ ] Source code and resources\n\n\n[ ] Install NPM modules with \nnpm install\n\n\n[ ] \nRebuild native Node modules\n\n\n[ ] \nBuild NaCl binaries\n\n\n[ ] \nCompile source code\n and remove the original files\n\n\n[ ] Icon used in \nmanifest file\n\n\n\n\n!!! warning\n    Do not assume your \nnode_modules\n that target one platform work \nas is\n in all platforms. For instance \nnode-email-templates\n has specific Windows & Mac OS X\nnpm install\n commands. Besides, it requires python to install properly, which is not installed by default on Windows.\n    As a rule of thumb \nnpm install\n your \npackage.json\n on each platform you target\n to ensure everything works as expected.\n\n\n!!! note \"Filename and Path\"\n    On most Linux and some Mac OS X, the file system is \ncase sensitive\n. That means \ntest.js\n and \nTest.js\n are different files. Make sure the paths and filenames used in your app have the right case. Otherwise your app may look bad or crash on those file systems.\n\n\n!!! note \"Long Path on Windows\"\n    The length of path used in your app may exceed the maximum length (260 characters) on Windows. That will cause various build failures. This usually happens during installing dependencies with \nnpm install\n using older version of NPM (<3.0). Please build your app in the root directory, like \nC:\\build\\\n, to avoid this issue as much as possible.\n\n\nPrepare NW.js\n\n\nYou have to redistribute NW.js with your app to get your app running. NW.js provided multiple \nbuild flavors\n for different requirements and package size. Choose the proper build flavor for your product or \nbuild it from source code\n.\n\n\nAll files in the downloaded package should be redistributed with your product, except \nnwjc\n or \nnwjc.exe\n in SDK flavor.\n\n\nPackage Your App\n\n\nThere two options to pack your app: plain files or zip file.\n\n\nPackage Option 1. Plain Files (Recommended)\n\n\nOn Windows and Linux, you can put the files of your app in the same folder of NW.js binaries and then ship them to your users. Make sure \nnw\n (or \nnw.exe\n) is in the same folder as \npackage.json\n. Or you can put the files of your app in a folder named \npackage.nw\n in the same folder as \nnw\n (or \nnw.exe\n).\n\n\nOn Mac, put the files of your app into a folder named \napp.nw\n in \nnwjs.app/Contents/Resources/\n and done.\n\n\nIt's the recommended way to pack your app.\n\n\nPackage Option 2. Zip File\n\n\nYou can package all the files into a zip file and rename it as \npackage.nw\n. And put it along with NW.js binaries for Windows and Linux. For Mac, put \npackage.nw\n in \nnwjs.app/Contents/Resources/\n.\n\n\n!!! warning \"Start Slow with Big Package or Too Many Files\"\n    At starting time, NW.js will unzip the package into temp folder and load it from there. So it will start slower if your package is big or contains too many files.\n\n\nOn Windows and Linux, you can even hide the zip file by appending the zip file to the end of \nnw\n or \nnw.exe\n.\nYou can run following command on Windows to achieve this:\n\n\ncopy /b nw.exe+package.nw app.exe\n\n\n\n\nor following command on Linux:\n\n\ncat nw app.nw > app && chmod +x app \n\n\n\n\nPlatform Specific Steps\n\n\nWindows\n\n\nIcon for \nnw.exe\n can be replaced with tools like \nResource Hacker\n, \nnode-webkit-builder\n and \nnode-winresourcer\n.\n\n\nYou can create a installer to deploy all necessary files onto end user's system. You can use \nWindows Installer\n, \nNSIS\n or \nInno Setup\n.\n\n\nLinux\n\n\nOn Linux, you need to create proper \n.desktop\n file\n.\n\n\nTo create a self-extractable installer script, you can use scripts like \nshar\n or \nmakeself\n.\n\n\nTo distribute your app through the package management sysmtem, like \napt\n, \nyum\n, \npacman\n etc, please follow their official documents to create the packages.\n\n\nMac OS X\n\n\nOn Mac OS X, you need to modify following files to have your own icon and boundle id:\n\n\n\n\nContents/Resources/nw.icns\n: icon of your app. \nnw.icns\n is in \nApple Icon Image Format\n. You can convert your icon in PNG/JPEG format into ICNS by using tools like \nImage2Icon\n.\n\n\nContents/Info.plist\n: the apple package description file. You can view \nImplementing Cocoa's Standard About Panel\n on how this file will influence your app and what fields you should modify.\n\n\n\n\nAnd you should sign you Mac app. Or the user won't launch the app if Gatekeeper is turned on. See \nSigned Apps or Installer Packages\n for details.\n\n\nReferences\n\n\nSee \nwiki of NW.js\n for more tools of packaging your app.",
            "title": "Package and Distribute"
        },
        {
            "location": "/For Users/Package and Distribute/#package-and-distribute-doctitle",
            "text": "Package and Distribute {: .doctitle}  Quick Start  Prepare Your App  Prepare NW.js  Package Your App  Package Option 1. Plain Files (Recommended)  Package Option 2. Zip File    Platform Specific Steps  Windows  Linux  Mac OS X    References      This document guides you how to package and distribute NW.js based app.",
            "title": "Package and Distribute {: .doctitle}"
        },
        {
            "location": "/For Users/Package and Distribute/#quick-start",
            "text": "You can use  nw-builder  to quickly generate a package for you.   Prepare your app  as below.  Install  nw-builder  with  npm install -g nw-builder  Package your app with  nwbuild -p linux64 /path/to/your/app   Your app can be found in  ./build  folder.",
            "title": "Quick Start"
        },
        {
            "location": "/For Users/Package and Distribute/#prepare-your-app",
            "text": "Before packaging, you should prepare all necessary files on hands. Check out following checklist to make sure you didn't miss anything:   [ ] Source code and resources  [ ] Install NPM modules with  npm install  [ ]  Rebuild native Node modules  [ ]  Build NaCl binaries  [ ]  Compile source code  and remove the original files  [ ] Icon used in  manifest file   !!! warning\n    Do not assume your  node_modules  that target one platform work  as is  in all platforms. For instance  node-email-templates  has specific Windows & Mac OS X npm install  commands. Besides, it requires python to install properly, which is not installed by default on Windows.\n    As a rule of thumb  npm install  your  package.json  on each platform you target  to ensure everything works as expected.  !!! note \"Filename and Path\"\n    On most Linux and some Mac OS X, the file system is  case sensitive . That means  test.js  and  Test.js  are different files. Make sure the paths and filenames used in your app have the right case. Otherwise your app may look bad or crash on those file systems.  !!! note \"Long Path on Windows\"\n    The length of path used in your app may exceed the maximum length (260 characters) on Windows. That will cause various build failures. This usually happens during installing dependencies with  npm install  using older version of NPM (<3.0). Please build your app in the root directory, like  C:\\build\\ , to avoid this issue as much as possible.",
            "title": "Prepare Your App"
        },
        {
            "location": "/For Users/Package and Distribute/#prepare-nwjs",
            "text": "You have to redistribute NW.js with your app to get your app running. NW.js provided multiple  build flavors  for different requirements and package size. Choose the proper build flavor for your product or  build it from source code .  All files in the downloaded package should be redistributed with your product, except  nwjc  or  nwjc.exe  in SDK flavor.",
            "title": "Prepare NW.js"
        },
        {
            "location": "/For Users/Package and Distribute/#package-your-app",
            "text": "There two options to pack your app: plain files or zip file.  Package Option 1. Plain Files (Recommended)  On Windows and Linux, you can put the files of your app in the same folder of NW.js binaries and then ship them to your users. Make sure  nw  (or  nw.exe ) is in the same folder as  package.json . Or you can put the files of your app in a folder named  package.nw  in the same folder as  nw  (or  nw.exe ).  On Mac, put the files of your app into a folder named  app.nw  in  nwjs.app/Contents/Resources/  and done.  It's the recommended way to pack your app.  Package Option 2. Zip File  You can package all the files into a zip file and rename it as  package.nw . And put it along with NW.js binaries for Windows and Linux. For Mac, put  package.nw  in  nwjs.app/Contents/Resources/ .  !!! warning \"Start Slow with Big Package or Too Many Files\"\n    At starting time, NW.js will unzip the package into temp folder and load it from there. So it will start slower if your package is big or contains too many files.  On Windows and Linux, you can even hide the zip file by appending the zip file to the end of  nw  or  nw.exe .\nYou can run following command on Windows to achieve this:  copy /b nw.exe+package.nw app.exe  or following command on Linux:  cat nw app.nw > app && chmod +x app",
            "title": "Package Your App"
        },
        {
            "location": "/For Users/Package and Distribute/#platform-specific-steps",
            "text": "Windows  Icon for  nw.exe  can be replaced with tools like  Resource Hacker ,  node-webkit-builder  and  node-winresourcer .  You can create a installer to deploy all necessary files onto end user's system. You can use  Windows Installer ,  NSIS  or  Inno Setup .  Linux  On Linux, you need to create proper  .desktop  file .  To create a self-extractable installer script, you can use scripts like  shar  or  makeself .  To distribute your app through the package management sysmtem, like  apt ,  yum ,  pacman  etc, please follow their official documents to create the packages.  Mac OS X  On Mac OS X, you need to modify following files to have your own icon and boundle id:   Contents/Resources/nw.icns : icon of your app.  nw.icns  is in  Apple Icon Image Format . You can convert your icon in PNG/JPEG format into ICNS by using tools like  Image2Icon .  Contents/Info.plist : the apple package description file. You can view  Implementing Cocoa's Standard About Panel  on how this file will influence your app and what fields you should modify.   And you should sign you Mac app. Or the user won't launch the app if Gatekeeper is turned on. See  Signed Apps or Installer Packages  for details.",
            "title": "Platform Specific Steps"
        },
        {
            "location": "/For Users/Package and Distribute/#references",
            "text": "See  wiki of NW.js  for more tools of packaging your app.",
            "title": "References"
        },
        {
            "location": "/For Users/Advanced/Build Flavors/",
            "text": "Build Flavors {: .doctitle}\n\n\n\n\n\n\n\n\nBuild Flavors {: .doctitle}\n\n\n\n\n\n\nNW.js supports various build flavors for reducing the application size. Currently NW.js supports following build flavors:\n\n\n\n\nSDK flavor: has builtin support for DevTools and NaCl plugins. SDK flavor has the same capabilities as the builds before 0.13.0\n\n\nNaCL flavor: supports Native Client (NaCl) plugins, but has no builtin DevTools.\n\n\nNormal flavor: is a minimum build without DevTools and NaCl plugin support.\n\n\n\n\nSee \nBuild Flavors section in Building NW.js\n for how to build them from source code.",
            "title": "Build Flavors"
        },
        {
            "location": "/For Users/Advanced/Build Flavors/#build-flavors-doctitle",
            "text": "Build Flavors {: .doctitle}    NW.js supports various build flavors for reducing the application size. Currently NW.js supports following build flavors:   SDK flavor: has builtin support for DevTools and NaCl plugins. SDK flavor has the same capabilities as the builds before 0.13.0  NaCL flavor: supports Native Client (NaCl) plugins, but has no builtin DevTools.  Normal flavor: is a minimum build without DevTools and NaCl plugin support.   See  Build Flavors section in Building NW.js  for how to build them from source code.",
            "title": "Build Flavors {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/Content Verification/",
            "text": "Content Verification\n\n\n\n\n\n\n\n\nContent Verification\n\n\nSign an application\n\n\nRebuild to use your own keypair\n\n\n\n\n\n\n\n\n\n\nThe \"content verification\" feature, or \"app signing\", prevents loading unsigned files with your official binary. Given a keypair, 'verified_contents.json' is the signature for the application files. It's created with the tool 'sign.py' and the private key (private_key.pem file). The public key is built into NW.js binary. To run the signed application, use \nnw --verify-content=enforce_strict .\n in the application directory. It will show the simple page. In the next, try to modify index.html a little bit and run it again. NW will report the file is corrupted and quit immediately.\n\n\n!!! note\n    This feature doesn't prevent someone from hacking your app and loading it with other NW binaries. Consider writing some of your features with C++ and load it with Node.js module, NaCl or \ncompile your JS to binary with nwjc\n\n\nSign an application\n\n\nTo sign an application with the demo keypair, do the following:\n\n\n\n\nchange to application directory\n\n\nmake sure \nverified_contents.json\n or \ncomputed_hashes.json\n is not there (you can just remove them)\n\n\nrun \npayload.exe\n; it will generate \npayload.json\n, which serves as input for \nsign.py\n\n\nrun \npython sign.py > /tmp/verified_contents.json\n (it's important that the tmp destination directory is not application directory)\n\n\nmove the generated \nverified_contents.json\n file to application dir and it's done.\n\n\n\n\nRebuild to use your own keypair\n\n\nTo use your own keypair you'll need to rebuild the NW binary. And the argument for \n--verify-content=\n in the command line need to be set to \nenforce_strict\n by default in your build.\n\n\n\n\ngenerate your keypair: \nopenssl genrsa -out private_key.pem 2048\n\n(the output file contains both the private and public key)\n\n\nrun python convertkey.py; it will convert the public key to C source code.\n\n\nput the generated source code in\n\ncontent/nw/src/nw_content_verifier_delegate.cc\n; replace the default key.\n\n\nchange the default value for the command line argument: change line no.73 in that file to:\n   \nMode experiment_value =  ContentVerifierDelegate::ENFORCE_STRICT;\n\n\nbuild the NW binary.\n\n\n\n\nTools, sample application and the demo private key is under \ntools/sign\n directory. The demo private key is paired with the public key built into the official NW binaries.",
            "title": "Content Verification"
        },
        {
            "location": "/For Users/Advanced/Content Verification/#content-verification",
            "text": "Content Verification  Sign an application  Rebuild to use your own keypair      The \"content verification\" feature, or \"app signing\", prevents loading unsigned files with your official binary. Given a keypair, 'verified_contents.json' is the signature for the application files. It's created with the tool 'sign.py' and the private key (private_key.pem file). The public key is built into NW.js binary. To run the signed application, use  nw --verify-content=enforce_strict .  in the application directory. It will show the simple page. In the next, try to modify index.html a little bit and run it again. NW will report the file is corrupted and quit immediately.  !!! note\n    This feature doesn't prevent someone from hacking your app and loading it with other NW binaries. Consider writing some of your features with C++ and load it with Node.js module, NaCl or  compile your JS to binary with nwjc",
            "title": "Content Verification"
        },
        {
            "location": "/For Users/Advanced/Content Verification/#sign-an-application",
            "text": "To sign an application with the demo keypair, do the following:   change to application directory  make sure  verified_contents.json  or  computed_hashes.json  is not there (you can just remove them)  run  payload.exe ; it will generate  payload.json , which serves as input for  sign.py  run  python sign.py > /tmp/verified_contents.json  (it's important that the tmp destination directory is not application directory)  move the generated  verified_contents.json  file to application dir and it's done.",
            "title": "Sign an application"
        },
        {
            "location": "/For Users/Advanced/Content Verification/#rebuild-to-use-your-own-keypair",
            "text": "To use your own keypair you'll need to rebuild the NW binary. And the argument for  --verify-content=  in the command line need to be set to  enforce_strict  by default in your build.   generate your keypair:  openssl genrsa -out private_key.pem 2048 \n(the output file contains both the private and public key)  run python convertkey.py; it will convert the public key to C source code.  put the generated source code in content/nw/src/nw_content_verifier_delegate.cc ; replace the default key.  change the default value for the command line argument: change line no.73 in that file to:\n    Mode experiment_value =  ContentVerifierDelegate::ENFORCE_STRICT;  build the NW binary.   Tools, sample application and the demo private key is under  tools/sign  directory. The demo private key is paired with the public key built into the official NW binaries.",
            "title": "Rebuild to use your own keypair"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/",
            "text": "JavaScript Contexts in NW.js {: .doctitle}\n\n\n\n\n\n\n\n\nJavaScript Contexts in NW.js {: .doctitle}\n\n\nConcept of JavaScript Context\n\n\nSeparate Context Mode\n\n\nBrowser Context\n\n\nLoad Script in Browser Context\n\n\nGlobal Objects in Browser Context\n\n\nCreate New Browser Context\n\n\nAccess Node.js and NW.js API in Browser Context\n\n\nRelative Path Resovling of require() in Browser Context\n\n\n\n\n\n\nNode Context\n\n\nLoad Script in Node Context\n\n\nGlobal Objects in Node Context\n\n\nCreate New Node Context\n\n\nAccess Browser and NW.js API in Node Context\n\n\nRelative Paths Resolving of require() in Node Context\n\n\n\n\n\n\n\n\n\n\nMixed Context Mode\n\n\nLoad Script in Mixed Context Mode\n\n\nGlobal Objects in Mixed Context\n\n\nComparing with Separate Context\n\n\n\n\n\n\nWorking with Multiple Contexts\n\n\nProblem with instanceOf\n\n\nProblem with obj.constructor\n\n\nProblem of obj.__proto__\n\n\nProblems in 3rd-Party Library\n\n\nReliable Way of Type Checking Across Contexts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConcept of JavaScript Context\n\n\nScripts running in different windows live in different JavaScript contexts, i.e. each\u00a0window has its\u00a0own global object and its\u00a0own set of global constructors (such as \nArray\n or \nObject\n).\n\n\nThat's common practice among web\u00a0browsers and it's a\u00a0good\u00a0thing because, for\u00a0example:\n\n\n\n\nwhen an object's prototype is replaced or augmented by some library (such\u00a0as \nPrototype\n) or\u00a0a\u00a0simpler script, the\u00a0analogous objects in\u00a0other\u00a0windows are unaffected nevertheless;\n\n\nwhen a\u00a0programmer makes a\u00a0mistake (such\u00a0as \nmissing \nnew\n before a\u00a0poorly\u00a0written constructor\n) and\u00a0the\u00a0bug affects (pollutes) the\u00a0global scope, it\u00a0still cannot affect larger areas (several windows);\n\n\nmalicious applications cannot access confidential data structures in\u00a0other\u00a0windows.\n\n\n\n\nWhen a script accessing to an object / function defined in another context, JS engine will temporarily enter the target context and leave it once finished. \n\n\nSeparate Context Mode\n\n\nBesides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. So NW.js has two types of JavaScript contexts: \nBrowser Context\n and \nNode Context\n.\n\n\n!!! note \"Web Worker\"\n    Actually Web Workers are running in a separate JavaScript context which is neither browser context nor node context. But you can't access Web or Node.js or NW.js APIs in Web Worker's context.\n\n\nBrowser Context\n\n\nLoad Script in Browser Context\n\n\nScripts loaded or embedded by traditional web ways, such as using \n<script>\n element or jQuery's \n$.getScript()\n or \nRequireJS\n, are running in browser context.\n\n\nGlobal Objects in Browser Context\n\n\nIn browser context, there are some global objects including \nJS builtin objects\n (such as \nDate\n or \nError\n or \nTypedArray\n) and \nWeb API\n (such as DOM API).\n\n\nCreate New Browser Context\n\n\nDifferent windows and frames have different contexts. So when you create a new frame or window, you will get a new browser context.\n\n\nAccess Node.js and NW.js API in Browser Context\n\n\nSome objects of Node context are copied to Browser context so that scripts running in Browser context can access Node.js objects:\n\n\n\n\nnw\n -- the object of all \nNW.js APIs\n\n\nglobal\n -- the global object of Node Context; same as \nnw.global\n\n\nrequire\n -- the \nrequire()\n function for loading Node.js modules; similar to \nnw.require()\n, but it also supports \nrequire('nw.gui')\n to load NW.js API module.\n\n\nprocess\n -- the \nprocess module\n of Node.js; same as \nnw.process\n\n\nBuffer\n -- the \nBuffer class\n of Node.js\n\n\n\n\nRelative Path Resovling of \nrequire()\n in Browser Context\n\n\nRelative paths in Browser context are resolved according to path of main HTML file (like all browsers do).\n\n\nNode Context\n\n\nLoad Script in Node Context\n\n\nScripts loaded with following ways are running in Node context:\n\n\n\n\nScripts loaded by \nrequire()\n of Node.js API\n\n\nScripts loaded by \nnode-main\n in Manifest file\n\n\n\n\nGlobal Objects in Node Context\n\n\nScripts running in\u00a0the\u00a0Node context can use \nJS builtin objects\n like browser context. In addition, you can also use \nglobal objects defined by Node.js\n, such as \n__dirname\n, \nprocess\n, \nBuffer\n etc.\n\n\n!!! note\n    Web APIs are not available in Node context. See \nAccess Browser and NW.js API in Node Context\n below to find out how to use them.\n\n\nCreate New Node Context\n\n\nAll node modules shares a same Node context in separate context mode\n. But you have several ways to create new Node contexts:\n\n\n\n\nSet \nnew-instance\n option to \ntrue\n when creating window with \nWindow.open()\n\n\nStart NW.js with \n--mixed-context\n CLI option to turn NW.js into \nMixed Context mode\n\n\n\n\nAccess Browser and NW.js API in Node Context\n\n\nIn Node context, there are no browser side or NW.js APIs, such as \nalert()\n or \ndocument.*\n or \nnw.Clipboard\n etc. To access browser APIs, you have to pass the corresponding objects, such as \nwindow\n object, to functions in Node context.\n\n\nSee following example for how to achive this.\n\n\nFollowing script are running in Node context (myscript.js):\n\n\n// `el` should be passed from browser context\nexports.setText = function(el) {\n    el.innerHTML = 'hello';\n};\n\n\n\n\nIn the browser side (index.html):\n\n\n<div id=\"el\"></div>\n<script>\nvar myscript = require('./myscript');\n// pass the `el` element to the Node function\nmyscript.setText(document.getElementbyId('el'));\n// you will see \"hello\" in the element\n</script>\n\n\n\n\n!!! note \"\nwindow\n in Node Context\"\n    There is a \nwindow\n object in Node context pointing to the main window as set in \nmain\n field of Manifest file.\n\n\nRelative Paths Resolving of \nrequire()\n in Node Context\n\n\nRelative paths in node modules are resolved according to path of that module (like Node.js always do).\n\n\nMixed Context Mode\n\n\nMixed context is introduced in NW.js 0.13. When running NW.js with \n--mixed-context\n CLI option\n, a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. the Mixed context.\n\n\nLoad Script in Mixed Context Mode\n\n\nTo enable Mixed context, add \n--mixed-context\n when starting NW.js or add it to \nchromium-args\n in Manifest file\n.\n\n\nAny scripts loaded using web ways or \nrequire()\n in Node.js are running in a same context.\n\n\nGlobal Objects in Mixed Context\n\n\nIn Mixed context, you can use all browser and NW.js API in Node modules, and vice versa.\n\n\npackage.json\n\n\n{\n    \"name\": \"test-context\",\n    \"main\": \"index.html\",\n    \"chromium-args\": \"--mixed-context\"\n}\n\n\n\n\nmyscript.js\n\n\nexports.createDate = function() {\n    return new Date();\n};\n\nexports.showAlert = function() {\n    alert(\"I'm running in Node module!\");\n};\n\n\n\n\nThen following comparison will success in Mixed context:\n\nindex.html\n\n\n<script>\nvar myscript = require('./myscript');\n\nconsole.log(myscript.createDate() instanceof Date); // true\nmyscript.showAlert(); // I'm running in Node module!\n</script>\n\n\n\n\nComparing with Separate Context\n\n\nThe advantage of MultiContext mode is that you will not encounter many \ntype checking issue\n as below.\n\n\nThe cons is that in Mixed context mode, you can't share variable easily as before. To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. Or you can use \nwindow.postMessage()\n API\n to send and receive messages between contexts.\n\n\nWorking with Multiple Contexts\n\n\nWhile differences of contexts are generally benefitial, sometimes they\u00a0may constitute a\u00a0problem in\u00a0your (or\u00a0some other person's)\u00a0code, and\u00a0a\u00a0need for\u00a0a\u00a0workaround arises.\n\n\nFor example, in different browser contexts, the global objects are not identical and some type checking tricks will fail with multiple contexts.\n\n\n<iframe id=\"myframe\" src=\"myframe.html\"></iframe>\n<script>\n// `window` is the global object of current browser context\n// `myframe.contentWindow` is the global object of the `<iframe>`'s browser context\nvar currentContext = window;\nvar iframeContext = document.getElementbyId('myframe').contentWindow;\n\n// `myfunc` is defined in current context\nfunction myfunc() {\n\n}\n\nconsole.log(currentContext.Date === iframeContext.Date); // false\nconsole.log(currentContext.Function === iframeContext.Function); // false\nconsole.log(myfunc instanceof currentContext.Function); // true\nconsole.log(myfunc instanceof iframeContext.Function); // false\nconsole.log(myfunc.constructor === currentContext.Function); // true\nconsole.log(myfunc.constructor === iframeContext.Function); // true\n</script>\n\n\n\n\nProblem with \ninstanceOf\n\n\nThe most common cause for\u00a0such problems is the\u00a0behaviour of the \ninstanceof\n operator in\u00a0JavaScript. As\u00a0you\u00a0may \nsee\u00a0in\u00a0MDN\n, the\u00a0operation \nsomeValue instanceof someConstructor\n tests whether an\u00a0object has in\u00a0its prototype chain the \nprototype\n property of the\u00a0given constructor. However, if \nsomeValue\n is\u00a0passed from a\u00a0different JavaScript context, then it\u00a0has its\u00a0own line of ancestor objects, and the \nsomeValue instanceof someConstructor\n check fails inevitably.\n\n\nFor example, a\u00a0simple check \nsomeValue instanceof Array\n cannot determine if a\u00a0variable's value is\u00a0an\u00a0array's if it's passed from\u00a0another context (see \nDetermining with absolute accuracy whether or\u00a0not a\u00a0JavaScript object is an\u00a0array\n for\u00a0details).\n\n\nProblem with \nobj.constructor\n\n\nThe same problem arises when the \nobj.constructor\n property is checked directly (for\u00a0example, when \nsomeValue.constructor === Array\n is used instead\u00a0of \nsomeValue instanceof Array\n).\n\n\nProblem of \nobj.__proto__\n\n\nThe legacy \nobj.__proto__\n gives you access to the prototype of that object directly. Comparing it's constructor with global object or use \ninstanceof\n as above will still lead to the wrong result.\n\n\nProblems in 3rd-Party Library\n\n\n3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.\n\n\nReliable Way of Type Checking Across Contexts\n\n\nA\u00a0way to\u00a0prevent context-related problems is to\u00a0\navoid using \ninstanceof\n when a\u00a0value may\u00a0come from\u00a0another JavaScript context.\n\n\nYou\u00a0may use \nArray.isArray\n method to\u00a0check whether a\u00a0value is\u00a0an\u00a0array, and\u00a0that\u00a0method works reliably across contexts.\n\n\nFor testing if \nsomeValue\n is an object of other context dependent globals, like \nFunction\n or \nDate\n etc., you may use following tricks to test the actual types:\n\n\n// test a function\nObject.prototype.toString.apply(someValue) === \"[object Function]\"\n// test a Date\nObject.prototype.toString.apply(someValue) === \"[object Date]\"\n\n\n\n\nHowever, if such a\u00a0convenient alternate method is\u00a0not readily available, or\u00a0when you\u00a0face a\u00a0problem in\u00a0someone other's (not\u00a0your\u00a0own) code and\u00a0patching\u00a0that would\u00a0need a\u00a0hassle, then\u00a0another workaround is\u00a0necessary.\n\n\nAlso you can use \nnwglobal\n, which returns the global objects in Node context, to workaround the type checking in some cases.",
            "title": "JavaScript Contexts in NW.js"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/#javascript-contexts-in-nwjs-doctitle",
            "text": "JavaScript Contexts in NW.js {: .doctitle}  Concept of JavaScript Context  Separate Context Mode  Browser Context  Load Script in Browser Context  Global Objects in Browser Context  Create New Browser Context  Access Node.js and NW.js API in Browser Context  Relative Path Resovling of require() in Browser Context    Node Context  Load Script in Node Context  Global Objects in Node Context  Create New Node Context  Access Browser and NW.js API in Node Context  Relative Paths Resolving of require() in Node Context      Mixed Context Mode  Load Script in Mixed Context Mode  Global Objects in Mixed Context  Comparing with Separate Context    Working with Multiple Contexts  Problem with instanceOf  Problem with obj.constructor  Problem of obj.__proto__  Problems in 3rd-Party Library  Reliable Way of Type Checking Across Contexts",
            "title": "JavaScript Contexts in NW.js {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/#concept-of-javascript-context",
            "text": "Scripts running in different windows live in different JavaScript contexts, i.e. each\u00a0window has its\u00a0own global object and its\u00a0own set of global constructors (such as  Array  or  Object ).  That's common practice among web\u00a0browsers and it's a\u00a0good\u00a0thing because, for\u00a0example:   when an object's prototype is replaced or augmented by some library (such\u00a0as  Prototype ) or\u00a0a\u00a0simpler script, the\u00a0analogous objects in\u00a0other\u00a0windows are unaffected nevertheless;  when a\u00a0programmer makes a\u00a0mistake (such\u00a0as  missing  new  before a\u00a0poorly\u00a0written constructor ) and\u00a0the\u00a0bug affects (pollutes) the\u00a0global scope, it\u00a0still cannot affect larger areas (several windows);  malicious applications cannot access confidential data structures in\u00a0other\u00a0windows.   When a script accessing to an object / function defined in another context, JS engine will temporarily enter the target context and leave it once finished.",
            "title": "Concept of JavaScript Context"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/#separate-context-mode",
            "text": "Besides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. So NW.js has two types of JavaScript contexts:  Browser Context  and  Node Context .  !!! note \"Web Worker\"\n    Actually Web Workers are running in a separate JavaScript context which is neither browser context nor node context. But you can't access Web or Node.js or NW.js APIs in Web Worker's context.  Browser Context  Load Script in Browser Context  Scripts loaded or embedded by traditional web ways, such as using  <script>  element or jQuery's  $.getScript()  or  RequireJS , are running in browser context.  Global Objects in Browser Context  In browser context, there are some global objects including  JS builtin objects  (such as  Date  or  Error  or  TypedArray ) and  Web API  (such as DOM API).  Create New Browser Context  Different windows and frames have different contexts. So when you create a new frame or window, you will get a new browser context.  Access Node.js and NW.js API in Browser Context  Some objects of Node context are copied to Browser context so that scripts running in Browser context can access Node.js objects:   nw  -- the object of all  NW.js APIs  global  -- the global object of Node Context; same as  nw.global  require  -- the  require()  function for loading Node.js modules; similar to  nw.require() , but it also supports  require('nw.gui')  to load NW.js API module.  process  -- the  process module  of Node.js; same as  nw.process  Buffer  -- the  Buffer class  of Node.js   Relative Path Resovling of  require()  in Browser Context  Relative paths in Browser context are resolved according to path of main HTML file (like all browsers do).  Node Context  Load Script in Node Context  Scripts loaded with following ways are running in Node context:   Scripts loaded by  require()  of Node.js API  Scripts loaded by  node-main  in Manifest file   Global Objects in Node Context  Scripts running in\u00a0the\u00a0Node context can use  JS builtin objects  like browser context. In addition, you can also use  global objects defined by Node.js , such as  __dirname ,  process ,  Buffer  etc.  !!! note\n    Web APIs are not available in Node context. See  Access Browser and NW.js API in Node Context  below to find out how to use them.  Create New Node Context  All node modules shares a same Node context in separate context mode . But you have several ways to create new Node contexts:   Set  new-instance  option to  true  when creating window with  Window.open()  Start NW.js with  --mixed-context  CLI option to turn NW.js into  Mixed Context mode   Access Browser and NW.js API in Node Context  In Node context, there are no browser side or NW.js APIs, such as  alert()  or  document.*  or  nw.Clipboard  etc. To access browser APIs, you have to pass the corresponding objects, such as  window  object, to functions in Node context.  See following example for how to achive this.  Following script are running in Node context (myscript.js):  // `el` should be passed from browser context\nexports.setText = function(el) {\n    el.innerHTML = 'hello';\n};  In the browser side (index.html):  <div id=\"el\"></div>\n<script>\nvar myscript = require('./myscript');\n// pass the `el` element to the Node function\nmyscript.setText(document.getElementbyId('el'));\n// you will see \"hello\" in the element\n</script>  !!! note \" window  in Node Context\"\n    There is a  window  object in Node context pointing to the main window as set in  main  field of Manifest file.  Relative Paths Resolving of  require()  in Node Context  Relative paths in node modules are resolved according to path of that module (like Node.js always do).",
            "title": "Separate Context Mode"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/#mixed-context-mode",
            "text": "Mixed context is introduced in NW.js 0.13. When running NW.js with  --mixed-context  CLI option , a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. the Mixed context.  Load Script in Mixed Context Mode  To enable Mixed context, add  --mixed-context  when starting NW.js or add it to  chromium-args  in Manifest file .  Any scripts loaded using web ways or  require()  in Node.js are running in a same context.  Global Objects in Mixed Context  In Mixed context, you can use all browser and NW.js API in Node modules, and vice versa.  package.json  {\n    \"name\": \"test-context\",\n    \"main\": \"index.html\",\n    \"chromium-args\": \"--mixed-context\"\n}  myscript.js  exports.createDate = function() {\n    return new Date();\n};\n\nexports.showAlert = function() {\n    alert(\"I'm running in Node module!\");\n};  Then following comparison will success in Mixed context: index.html  <script>\nvar myscript = require('./myscript');\n\nconsole.log(myscript.createDate() instanceof Date); // true\nmyscript.showAlert(); // I'm running in Node module!\n</script>  Comparing with Separate Context  The advantage of MultiContext mode is that you will not encounter many  type checking issue  as below.  The cons is that in Mixed context mode, you can't share variable easily as before. To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. Or you can use  window.postMessage()  API  to send and receive messages between contexts.",
            "title": "Mixed Context Mode"
        },
        {
            "location": "/For Users/Advanced/JavaScript Contexts in NW.js/#working-with-multiple-contexts",
            "text": "While differences of contexts are generally benefitial, sometimes they\u00a0may constitute a\u00a0problem in\u00a0your (or\u00a0some other person's)\u00a0code, and\u00a0a\u00a0need for\u00a0a\u00a0workaround arises.  For example, in different browser contexts, the global objects are not identical and some type checking tricks will fail with multiple contexts.  <iframe id=\"myframe\" src=\"myframe.html\"></iframe>\n<script>\n// `window` is the global object of current browser context\n// `myframe.contentWindow` is the global object of the `<iframe>`'s browser context\nvar currentContext = window;\nvar iframeContext = document.getElementbyId('myframe').contentWindow;\n\n// `myfunc` is defined in current context\nfunction myfunc() {\n\n}\n\nconsole.log(currentContext.Date === iframeContext.Date); // false\nconsole.log(currentContext.Function === iframeContext.Function); // false\nconsole.log(myfunc instanceof currentContext.Function); // true\nconsole.log(myfunc instanceof iframeContext.Function); // false\nconsole.log(myfunc.constructor === currentContext.Function); // true\nconsole.log(myfunc.constructor === iframeContext.Function); // true\n</script>  Problem with  instanceOf  The most common cause for\u00a0such problems is the\u00a0behaviour of the  instanceof  operator in\u00a0JavaScript. As\u00a0you\u00a0may  see\u00a0in\u00a0MDN , the\u00a0operation  someValue instanceof someConstructor  tests whether an\u00a0object has in\u00a0its prototype chain the  prototype  property of the\u00a0given constructor. However, if  someValue  is\u00a0passed from a\u00a0different JavaScript context, then it\u00a0has its\u00a0own line of ancestor objects, and the  someValue instanceof someConstructor  check fails inevitably.  For example, a\u00a0simple check  someValue instanceof Array  cannot determine if a\u00a0variable's value is\u00a0an\u00a0array's if it's passed from\u00a0another context (see  Determining with absolute accuracy whether or\u00a0not a\u00a0JavaScript object is an\u00a0array  for\u00a0details).  Problem with  obj.constructor  The same problem arises when the  obj.constructor  property is checked directly (for\u00a0example, when  someValue.constructor === Array  is used instead\u00a0of  someValue instanceof Array ).  Problem of  obj.__proto__  The legacy  obj.__proto__  gives you access to the prototype of that object directly. Comparing it's constructor with global object or use  instanceof  as above will still lead to the wrong result.  Problems in 3rd-Party Library  3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.  Reliable Way of Type Checking Across Contexts  A\u00a0way to\u00a0prevent context-related problems is to\u00a0 avoid using  instanceof  when a\u00a0value may\u00a0come from\u00a0another JavaScript context.  You\u00a0may use  Array.isArray  method to\u00a0check whether a\u00a0value is\u00a0an\u00a0array, and\u00a0that\u00a0method works reliably across contexts.  For testing if  someValue  is an object of other context dependent globals, like  Function  or  Date  etc., you may use following tricks to test the actual types:  // test a function\nObject.prototype.toString.apply(someValue) === \"[object Function]\"\n// test a Date\nObject.prototype.toString.apply(someValue) === \"[object Date]\"  However, if such a\u00a0convenient alternate method is\u00a0not readily available, or\u00a0when you\u00a0face a\u00a0problem in\u00a0someone other's (not\u00a0your\u00a0own) code and\u00a0patching\u00a0that would\u00a0need a\u00a0hassle, then\u00a0another workaround is\u00a0necessary.  Also you can use  nwglobal , which returns the global objects in Node context, to workaround the type checking in some cases.",
            "title": "Working with Multiple Contexts"
        },
        {
            "location": "/For Users/Advanced/Protect JavaScript Source Code/",
            "text": "Protect JavaScript Source Code {: doctitle}\n\n\n\n\n\n\n\n\nProtect JavaScript Source Code {: doctitle}\n\n\nCompilation\n\n\nLoad the Compiled JavaScript\n\n\nKnown Issues\n\n\n\n\n\n\n\n\n\n\nThe JavaScript source code of your application can be protected by compiling to native code and loaded by NW.js. You only have to distribute the compiled code with your app for production.\n\n\nCompilation\n\n\nJS source code is compiled to native code with the tool \nnwjc\n , which is provided in the binary download.\n\n\nTo use it:\n\n\nnwjc source.js binary.bin\n\n\n\n\nThe \n*.bin\n file is needed to be distributed with your application. You can name it whatever you want.\n\n\nLoad the Compiled JavaScript\n\n\nnw.Window.get().evalNWBin(frame, 'binary.bin');\n\n\n\n\nThe arguments of the \nwin.evalNWBin()\n method are similar with the \nWindow.eval()\n method, where the first parameter is the target iframe (\nnull\n for main frame), and the 2nd parameter is the binary code file.\n\n\n!!! note\n    The compiled code is executed in \nBrowser Context\n. You can use any Web APIs (such as DOM) and \naccess NW.js API and Node API\n like other scripts running in browser context.\n\n\nKnown Issues\n\n\nThe compiled code runs \nslower than normal JS\n: ~30% performance according to v8bench. Other non-compiled JS source code will not be affected.\n\n\nThe compiled code is \nnot cross-platform nor compatible between versions\n of NW.js. So you'll need to run \nnwjc\n for each of the platforms when you package your application.",
            "title": "Protect JavaScript Source Code"
        },
        {
            "location": "/For Users/Advanced/Protect JavaScript Source Code/#protect-javascript-source-code-doctitle",
            "text": "Protect JavaScript Source Code {: doctitle}  Compilation  Load the Compiled JavaScript  Known Issues      The JavaScript source code of your application can be protected by compiling to native code and loaded by NW.js. You only have to distribute the compiled code with your app for production.  Compilation  JS source code is compiled to native code with the tool  nwjc  , which is provided in the binary download.  To use it:  nwjc source.js binary.bin  The  *.bin  file is needed to be distributed with your application. You can name it whatever you want.  Load the Compiled JavaScript  nw.Window.get().evalNWBin(frame, 'binary.bin');  The arguments of the  win.evalNWBin()  method are similar with the  Window.eval()  method, where the first parameter is the target iframe ( null  for main frame), and the 2nd parameter is the binary code file.  !!! note\n    The compiled code is executed in  Browser Context . You can use any Web APIs (such as DOM) and  access NW.js API and Node API  like other scripts running in browser context.  Known Issues  The compiled code runs  slower than normal JS : ~30% performance according to v8bench. Other non-compiled JS source code will not be affected.  The compiled code is  not cross-platform nor compatible between versions  of NW.js. So you'll need to run  nwjc  for each of the platforms when you package your application.",
            "title": "Protect JavaScript Source Code {: doctitle}"
        },
        {
            "location": "/For Users/Advanced/Security in NW.js/",
            "text": "Security in NW.js\n\n\n\n\n\n\n\n\nSecurity in NW.js\n\n\nNode and Normal Frames\n\n\n\n\n\n\n\n\n\n\nNode and Normal Frames\n\n\nThere are two kinds of frames in NW.js: node frame and normal frame.\n\n\nNode frames\n have following extra capabilities than \nnormal frames\n:\n\n\n\n\nAccess Node.js / NW.js APIs\n\n\nAccess extended DOM features, such as \nsave as dialog\n, \nnwUserAgent attribute\n etc.\n\n\nBypass all security restrictions, such as sandboxing, same origin policy etc. For example, you can make cross origin XHR to any remote sites, or access to \n<iframe>\n element whose \nsrc\n points to remote sites in node frames.\n\n\n\n\nIn NW.js, frames matching \nALL\n of the following criterias will be a \nnode frame\n:\n\n\n\n\nnodejs\n set to \ntrue\n in \nmanifest file\n\n\nURL of windows and frames matching \nnode-remote\n patterns in \nmanifest file\n or \nchrome-extension://\n protocol.\n\n\nFrames or parent frames \nNOT\n having \nnwdisable\n attribute\n.\n\n\nFrames or parent frames \nNOT\n in \n<webview>\n tag",
            "title": "Security in NW.js"
        },
        {
            "location": "/For Users/Advanced/Security in NW.js/#security-in-nwjs",
            "text": "Security in NW.js  Node and Normal Frames",
            "title": "Security in NW.js"
        },
        {
            "location": "/For Users/Advanced/Security in NW.js/#node-and-normal-frames",
            "text": "There are two kinds of frames in NW.js: node frame and normal frame.  Node frames  have following extra capabilities than  normal frames :   Access Node.js / NW.js APIs  Access extended DOM features, such as  save as dialog ,  nwUserAgent attribute  etc.  Bypass all security restrictions, such as sandboxing, same origin policy etc. For example, you can make cross origin XHR to any remote sites, or access to  <iframe>  element whose  src  points to remote sites in node frames.   In NW.js, frames matching  ALL  of the following criterias will be a  node frame :   nodejs  set to  true  in  manifest file  URL of windows and frames matching  node-remote  patterns in  manifest file  or  chrome-extension://  protocol.  Frames or parent frames  NOT  having  nwdisable  attribute .  Frames or parent frames  NOT  in  <webview>  tag",
            "title": "Node and Normal Frames"
        },
        {
            "location": "/For Users/Advanced/Test with ChromeDriver/",
            "text": "Test with ChromeDriver {: .doctitle}\n\n\n\n\n\n\n\n\nTest with ChromeDriver {: .doctitle}\n\n\nGetting started\n\n\nInstalling\n\n\nRunning\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom \nChromeDriver project home page\n:\n\n\n\n\nWebDriver is an open source tool for automated testing of webapps across many browsers. It provides capabilities for navigating to web pages, user input, JavaScript execution, and more.  ChromeDriver is a standalone server which implements WebDriver's wire protocol for Chromium. ChromeDriver is available for Chrome on Android and Chrome on Desktop (Mac, Linux, Windows and ChromeOS).\n\n\n\n\nNW.js provide a customized ChromeDriver for automated testing NW.js based apps. You can use it with tools like \nselenium\n.\n\n\nGetting started\n\n\nThe following workflow uses \nselenium-python\n to drive the tests. You can use any language port for Selenium to work with \nchromedriver\n.\n\n\nInstalling\n\n\n\n\nDownload ChromeDriver from NW.js website\n\n\nExtract the package and place \nchromedriver\n under the same dir that contains the NW.js binaries: \nnw\n for Linux, \nnw.exe\n for Windows, or \nnode-webkit.app\n for Mac.\n\n\nInstall \nselenium-python\n in your project:\n\n\n\n\npip install selenium\n\n\n\n\nRunning\n\n\nSuppose your app shows a form for searching from remote. The page basically something like this:\n\n\n<form action=\"http://mysearch.com/search\" method=\"GET\">\n    <input type=\"text\" name=\"q\"><input type=\"submit\" value=\"Submit\">\n</form>\n\n\n\n\nWrite a Python script to automatically fill in the search box and submit the form:\n\n\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nchrome_options = Options()\nchrome_options.add_argument(\"nwapp=/path/to/your/app\")\n\ndriver = webdriver.Chrome(executable_path='/path/to/nwjs/chromedriver', chrome_options=chrome_options)\n\ntime.sleep(5) # Wait 5s to see the web page\nsearch_box = driver.find_element_by_name('q')\nsearch_box.send_keys('ChromeDriver')\nsearch_box.submit()\ntime.sleep(5) # Wait 5s to see the search result\ndriver.quit()\n\n\n\n\nSee http://selenium-python.readthedocs.org/ for detailed documents of \nselenium-python\n.",
            "title": "Test with ChromeDriver"
        },
        {
            "location": "/For Users/Advanced/Test with ChromeDriver/#test-with-chromedriver-doctitle",
            "text": "Test with ChromeDriver {: .doctitle}  Getting started  Installing  Running        From  ChromeDriver project home page :   WebDriver is an open source tool for automated testing of webapps across many browsers. It provides capabilities for navigating to web pages, user input, JavaScript execution, and more.  ChromeDriver is a standalone server which implements WebDriver's wire protocol for Chromium. ChromeDriver is available for Chrome on Android and Chrome on Desktop (Mac, Linux, Windows and ChromeOS).   NW.js provide a customized ChromeDriver for automated testing NW.js based apps. You can use it with tools like  selenium .",
            "title": "Test with ChromeDriver {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/Test with ChromeDriver/#getting-started",
            "text": "The following workflow uses  selenium-python  to drive the tests. You can use any language port for Selenium to work with  chromedriver .  Installing   Download ChromeDriver from NW.js website  Extract the package and place  chromedriver  under the same dir that contains the NW.js binaries:  nw  for Linux,  nw.exe  for Windows, or  node-webkit.app  for Mac.  Install  selenium-python  in your project:   pip install selenium  Running  Suppose your app shows a form for searching from remote. The page basically something like this:  <form action=\"http://mysearch.com/search\" method=\"GET\">\n    <input type=\"text\" name=\"q\"><input type=\"submit\" value=\"Submit\">\n</form>  Write a Python script to automatically fill in the search box and submit the form:  import time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nchrome_options = Options()\nchrome_options.add_argument(\"nwapp=/path/to/your/app\")\n\ndriver = webdriver.Chrome(executable_path='/path/to/nwjs/chromedriver', chrome_options=chrome_options)\n\ntime.sleep(5) # Wait 5s to see the web page\nsearch_box = driver.find_element_by_name('q')\nsearch_box.send_keys('ChromeDriver')\nsearch_box.submit()\ntime.sleep(5) # Wait 5s to see the search result\ndriver.quit()  See http://selenium-python.readthedocs.org/ for detailed documents of  selenium-python .",
            "title": "Getting started"
        },
        {
            "location": "/For Users/Advanced/Transparent Window/",
            "text": "Transparent Window {: .doctitle}\n\n\n\n\n\n\n\n\nTransparent Window {: .doctitle}\n\n\nBasic Requirements\n\n\nWindows\n\n\nLinux\n\n\n\n\n\n\nMake a Transparent Window\n\n\nClick Through (Windows and Mac)\n\n\n\n\n\n\n\n\n\n\nBasic Requirements\n\n\nWindows\n\n\nThe transparent feature is only supported on Vista and above with DWM (Desktop Window Manager) enabled. Transparency might not work on classic theme / basic version of the OS, or using remote desktop.\n\n\nLinux\n\n\nYou need to run NW.js with these params and your window manager needs to support \ncompositing\n:\n\n\n--enable-transparent-visuals --disable-gpu\n\n\n\n\nMake a Transparent Window\n\n\nIn the HTML body, specify the alpha of the background colour:\n\n\n<body style=\"background-color:rgba(0,0,0,0);\">\n\n\n\n\nand specify \ntransparent\n field\n to \nture\n in manifest:\n\n\n  \"window\": {\n    \"transparent\": true\n  }\n\n\n\n\nClick Through (Windows and Mac)\n\n\nYou can enable transparency clickthrough on Windows and Mac. This feature enables you to click the object under the window \nat the point whose alpha value is \n0\n.\n\n\nTo enable transparency clickthrough, you need following command line options:\n\n\n--disable-gpu --force-cpu-draw\n\n\n\n\n!!! note\n    The click through is only supported for \nframeless\n, \nnon resizable\n frame, though it might work for other configuration depending on the OS.",
            "title": "Transparent Window"
        },
        {
            "location": "/For Users/Advanced/Transparent Window/#transparent-window-doctitle",
            "text": "Transparent Window {: .doctitle}  Basic Requirements  Windows  Linux    Make a Transparent Window  Click Through (Windows and Mac)",
            "title": "Transparent Window {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/Transparent Window/#basic-requirements",
            "text": "Windows  The transparent feature is only supported on Vista and above with DWM (Desktop Window Manager) enabled. Transparency might not work on classic theme / basic version of the OS, or using remote desktop.  Linux  You need to run NW.js with these params and your window manager needs to support  compositing :  --enable-transparent-visuals --disable-gpu",
            "title": "Basic Requirements"
        },
        {
            "location": "/For Users/Advanced/Transparent Window/#make-a-transparent-window",
            "text": "In the HTML body, specify the alpha of the background colour:  <body style=\"background-color:rgba(0,0,0,0);\">  and specify  transparent  field  to  ture  in manifest:    \"window\": {\n    \"transparent\": true\n  }",
            "title": "Make a Transparent Window"
        },
        {
            "location": "/For Users/Advanced/Transparent Window/#click-through-windows-and-mac",
            "text": "You can enable transparency clickthrough on Windows and Mac. This feature enables you to click the object under the window  at the point whose alpha value is  0 .  To enable transparency clickthrough, you need following command line options:  --disable-gpu --force-cpu-draw  !!! note\n    The click through is only supported for  frameless ,  non resizable  frame, though it might work for other configuration depending on the OS.",
            "title": "Click Through (Windows and Mac)"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/",
            "text": "Use NaCl in NW.js {: .doctitle}\n\n\n\n\n\n\n\n\nUse NaCl in NW.js {: .doctitle}\n\n\nOverview\n\n\nWhat the application in this tutorial does\n\n\nCommunication between JavaScript and Native Client modules\n\n\n\n\n\n\nStep 1: Download and install the Native Client SDK\n\n\nStep 2: Start a local server\n\n\nStep 3: Set up the Chrome browser\n\n\nStep 4: Stub code for the tutorial\n\n\nStep 5: Compile the Native Client module and run the stub application\n\n\nStep 6: Modify the JavaScript code to send a message to the Native Client module\n\n\nStep 7: Implement a message handler in the Native Client module\n\n\nStep 8: Compile the Native Client module and run the application again\n\n\nTroubleshooting\n\n\nNext steps\n\n\n\n\n\n\n\n\n\n\n!!! note \"Feature for SDK and NaCl Flavor\"\n    This feature is only available in \nSDK and NaCl flavor\n. See \nBuild Flavors\n for details.\n\n\nNW.js supports NaCl (Native Client) and PNaCl (Portable Native Client) just as Chromium. You can embed NaCl and PNaCl within you app.\n\n\n!!! note\n    Following tutorial is copied from \nChrome document for NaCl\n.\n\n\nOverview\n\n\nThis tutorial shows how to build and run a web application using Portable Native Client (PNaCl). This is a client-side application that uses HTML, JavaScript and a Native Client module written in C++. The PNaCl toolchain is used to enable running the Native Client module directly from a web page.\n\n\nIt\u2019s recommended that you read the \nNative Client Technical Overview\n prior to going through this tutorial.\n\n\nWhat the application in this tutorial does\n\n\nThe application in this tutorial shows how to load a Native Client module in a web page, and how to send messages between JavaScript and the Native Client module. In this simple application, the JavaScript sends a \n'hello'\n message to the Native Client module. When the Native Client module receives a message, it checks whether the message is equal to the string \n'hello'\n. If it is, the Native Client module returns a message saying \n'hello from NaCl'\n. A JavaScript alert panel displays the message received from the Native Client module.\n\n\nCommunication between JavaScript and Native Client modules\n\n\nThe Native Client programming model supports bidirectional communication between JavaScript and the Native Client module. Both sides can initiate and respond to messages. In all cases, the communication is asynchronous: The caller (JavaScript or the Native Client module) sends a message, but the caller does not wait for, or may not even expect, a response. This behavior is analogous to client/server communication on the web, where the client posts a message to the server and returns immediately. The Native Client messaging system is part of the Pepper API, and is described in detail in \nDeveloper\u2019s Guide: Messaging System\n. It is also similar to the way \nweb workers\n interact with the main document in JavaScript.\n\n\nStep 1: Download and install the Native Client SDK\n\n\nFollow the instructions on the \nDownload\n page to download and install the Native Client SDK.\n\n\nStep 2: Start a local server\n\n\nTo simulate a production environment, the SDK provides a simple web server that can be used to serve the application on \nlocalhost\n. A convenience Makefile rule called \nserve\n is the easiest way to invoke it:\n\n\n$ cd pepper_$(VERSION)/getting_started\n$ make serve\n\n\n\n\n!!! tip\n    The SDK may consist of several \u201cbundles\u201d, one per Chrome/Pepper version (see \nversioning\n information). In the sample invocation above \npepper_$(VERSION)\n refers to the specific version you want to use. For example, \npepper_37\n. If you don\u2019t know which version you need, use the one labeled (\nstable\n) by the \nnaclsdk list\n command. See \nDownload the Native Client SDK\n for more details.\n\n\nIf no port number is specified, the server defaults to port 5103, and can be accessed at http://localhost:5103.\n\n\nAny server can be used for the purpose of development. The one provided with the SDK is just a convenience, not a requirement.\n\n\nStep 3: Set up the Chrome browser\n\n\nPNaCl is enabled by default in Chrome. We recommend that you use a version of Chrome that\u2019s the same or newer than the SDK bundle used to build Native Client modules. Older PNaCl modules will always work with newer versions of Chrome, but the converse is not true.\n\n\n!!! tip\n    To find out the version of Chrome, type \nabout:chrome\n in the address bar.\n\n\nFor a better development experience, it\u2019s also recommended to disable the Chrome cache. Chrome caches resources aggressively; disabling the cache helps make sure that the latest version of the Native Client module is loaded during development.\n\n\n\n\nOpen Chrome\u2019s developer tools by clicking the menu icon \n and choosing \nTools\n > \nDeveloper tools\n.\n\n\nClick the gear icon \n in the bottom right corner of the Chrome window.\n\n\nUnder the \u201cGeneral\u201d settings, check the box next to \u201cDisable cache (while DevTools is open)\u201d.\n\n\nKeep the Developer Tools pane open while developing Native Client applications.\n\n\n\n\nStep 4: Stub code for the tutorial\n\n\nThe stub code for the tutorial is avalable in the SDK, in \npepper_$(VERSION)/getting_started/part1\n. It contains the following files:\n\n\n\n\nindex.html\n: Contains the HTML layout of the page as well as the JavaScript code that interacts with the Native Client module.\nThe Native Client module is included in the page with an \n<embed>\n tag that points to a manifest file.\n\n\nhello_tutorial.nmf\n: A manifest file that\u2019s used to point the HTML to the Native Client module and optionally provide additional commands to the PNaCl translator that is part of the Chrome browser.\n\n\nhello_tutorial.cc\n: C++ code for a simple Native Client module.\n\n\nMakefile\n: Compilation commands to build the \npexe\n (portable executable) from the C++ code in \nhello_tutorial.cc\n.\n\n\n\n\nIt\u2019s a good idea to take a look at these files now\u2014they contain a large amount of comments that help explain their structure and contents. For more details on the structure of a typical Native Client application, see \nApplication Structure\n.\n\n\nThe stub code is intentionally very minimal. The C++ code does not do anything except correctly initialize itself. The JavaScript code waits for the Native Client module to load and changes the status text on the web page accordingly.\n\n\nStep 5: Compile the Native Client module and run the stub application\n\n\nTo compile the Native Client module, run \nmake\n:\n\n\n$ cd pepper_$(VERSION)/getting_started/part1\n$ make\n\n\n\n\nSince the sample is located within the SDK tree, the Makefile knows how to find the PNaCl toolchain automatically and use it to build the module. If you\u2019re building applications outside the NaCl SDK tree, you should set the \n$NACL_SDK_ROOT\n environment variable. See \nBuilding Native Client Modules\n for more details.\n\n\nAssuming the local server was started according to the instructions in \nStep 2\n, you can now load the sample by pointing Chrome to http://localhost:5103/part1. Chrome should load the Native Client module successfully and the Status text should change from \u201cLOADING...\u201d to \u201cSUCCESS\u201d. If you run into problems, check out the \nTroubleshooting section\n below.\n\n\nStep 6: Modify the JavaScript code to send a message to the Native Client module\n\n\nIn this step, you\u2019ll modify the web page (\nindex.html\n) to send a message to the Native Client module after the page loads the module.\n\n\nLook for the JavaScript function \nmoduleDidLoad()\n, and add new code to send a \u2018hello\u2019 message to the module. The new function should look as follows:\n\n\nfunction moduleDidLoad() {\n  HelloTutorialModule = document.getElementById('hello_tutorial');\n  updateStatus('SUCCESS');\n  // Send a message to the Native Client module\n  HelloTutorialModule.postMessage('hello');\n}\n\n\n\n\nStep 7: Implement a message handler in the Native Client module\n\n\nIn this step, you\u2019ll modify the Native Client module (\nhello_tutorial.cc\n) to respond to the message received from the JavaScript code in the application. Specifically, you\u2019ll:\n\n\n\n\nImplement the \nHandleMessage()\n member function of the module instance.\n\n\nUse the \nPostMessage()\n member function to send a message from the module to the JavaScript code.\n\n\n\n\nFirst, add code to define the variables used by the Native Client module (the \u2018hello\u2019 string you\u2019re expecting to receive from JavaScript and the reply string you want to return to JavaScript as a response). In the file \nhello_tutorial.cc\n, add this code after the #include statements:\n\n\nnamespace {\n// The expected string sent by the browser.\nconst char* const kHelloString = \"hello\";\n// The string sent back to the browser upon receipt of a message\n// containing \"hello\".\nconst char* const kReplyString = \"hello from NaCl\";\n} // namespace\n\n\n\n\nNow, implement the \nHandleMessage()\n member function to check for \nkHelloString\n and return \nkReplyString\n. Look for the following line:\n\n\n// TODO(sdk_user): 1. Make this function handle the incoming message.\nPopulate the member function with code, as follows:\n\nvirtual void HandleMessage(const pp::Var& var_message) {\n  if (!var_message.is_string())\n    return;\n  std::string message = var_message.AsString();\n  pp::Var var_reply;\n  if (message == kHelloString) {\n    var_reply = pp::Var(kReplyString);\n    PostMessage(var_reply);\n  }\n}\n\n\n\n\nSee the Pepper API documentation for additional information about the \npp::Instance.HandleMessage\n and \npp::Instance.PostMessage\n member functions.\n\n\nStep 8: Compile the Native Client module and run the application again\n\n\n\n\nCompile the Native Client module by running the \nmake\n command again.\n\n\nStart the SDK web server by running \nmake serve\n.\n\n\nRe-run the application by reloading http://localhost:5103/part1 in Chrome.\n\n\n\n\nAfter Chrome loads the Native Client module, you should see the message sent from the module.\n\n\nTroubleshooting\n\n\nIf your application doesn\u2019t run, see \nStep 3\n above to verify that you\u2019ve set up your environment correctly, including both the Chrome browser and the local server. Make sure that you\u2019re running a correct version of Chrome, which is also greater or equal than the SDK bundle version you are using.\n\n\nAnother useful debugging aid is the Chrome JavaScript console (available via the Tools menu in Chrome). Examine it for clues about what went wrong. For example, if there\u2019s a message saying \u201cNaCl module crashed\u201d, there is a possibility that the Native Client module has a bug; \ndebugging\n may be required.\n\n\nThere\u2019s more information about troubleshooting in the documentation:\n\n\n\n\nFAQ Troubleshooting\n.\n\n\nThe \nProgress Events\n document contains some useful information about handling error events.\n\n\n\n\nNext steps\n\n\n\n\nSee the \nApplication Structure\n section in the Developer\u2019s Guide for information about how to structure a Native Client module.\n\n\nCheck the \nC++ Reference\n for details about how to use the Pepper APIs.\n\n\nBrowse through the source code of the SDK examples (in the examples directory) to learn additional techniques for writing Native Client applications and using the Pepper APIs.\n\n\nSee the \nBuilding\n, \nRunning\n, and \nDebugging pages\n for information about how to build, run, and debug Native Client applications.\n\n\nCheck the \nnaclports\n project to see what libraries have been ported for use with Native Client. If you port an open-source library for your own use, we recommend adding it to naclports (see \nHow to check code into naclports\n).\n\n\n\n\nContent available under the \nCC-By 3.0 license",
            "title": "Use NaCl in NW.js"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#use-nacl-in-nwjs-doctitle",
            "text": "Use NaCl in NW.js {: .doctitle}  Overview  What the application in this tutorial does  Communication between JavaScript and Native Client modules    Step 1: Download and install the Native Client SDK  Step 2: Start a local server  Step 3: Set up the Chrome browser  Step 4: Stub code for the tutorial  Step 5: Compile the Native Client module and run the stub application  Step 6: Modify the JavaScript code to send a message to the Native Client module  Step 7: Implement a message handler in the Native Client module  Step 8: Compile the Native Client module and run the application again  Troubleshooting  Next steps      !!! note \"Feature for SDK and NaCl Flavor\"\n    This feature is only available in  SDK and NaCl flavor . See  Build Flavors  for details.  NW.js supports NaCl (Native Client) and PNaCl (Portable Native Client) just as Chromium. You can embed NaCl and PNaCl within you app.  !!! note\n    Following tutorial is copied from  Chrome document for NaCl .",
            "title": "Use NaCl in NW.js {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#overview",
            "text": "This tutorial shows how to build and run a web application using Portable Native Client (PNaCl). This is a client-side application that uses HTML, JavaScript and a Native Client module written in C++. The PNaCl toolchain is used to enable running the Native Client module directly from a web page.  It\u2019s recommended that you read the  Native Client Technical Overview  prior to going through this tutorial.  What the application in this tutorial does  The application in this tutorial shows how to load a Native Client module in a web page, and how to send messages between JavaScript and the Native Client module. In this simple application, the JavaScript sends a  'hello'  message to the Native Client module. When the Native Client module receives a message, it checks whether the message is equal to the string  'hello' . If it is, the Native Client module returns a message saying  'hello from NaCl' . A JavaScript alert panel displays the message received from the Native Client module.  Communication between JavaScript and Native Client modules  The Native Client programming model supports bidirectional communication between JavaScript and the Native Client module. Both sides can initiate and respond to messages. In all cases, the communication is asynchronous: The caller (JavaScript or the Native Client module) sends a message, but the caller does not wait for, or may not even expect, a response. This behavior is analogous to client/server communication on the web, where the client posts a message to the server and returns immediately. The Native Client messaging system is part of the Pepper API, and is described in detail in  Developer\u2019s Guide: Messaging System . It is also similar to the way  web workers  interact with the main document in JavaScript.",
            "title": "Overview"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-1-download-and-install-the-native-client-sdk",
            "text": "Follow the instructions on the  Download  page to download and install the Native Client SDK.",
            "title": "Step 1: Download and install the Native Client SDK"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-2-start-a-local-server",
            "text": "To simulate a production environment, the SDK provides a simple web server that can be used to serve the application on  localhost . A convenience Makefile rule called  serve  is the easiest way to invoke it:  $ cd pepper_$(VERSION)/getting_started\n$ make serve  !!! tip\n    The SDK may consist of several \u201cbundles\u201d, one per Chrome/Pepper version (see  versioning  information). In the sample invocation above  pepper_$(VERSION)  refers to the specific version you want to use. For example,  pepper_37 . If you don\u2019t know which version you need, use the one labeled ( stable ) by the  naclsdk list  command. See  Download the Native Client SDK  for more details.  If no port number is specified, the server defaults to port 5103, and can be accessed at http://localhost:5103.  Any server can be used for the purpose of development. The one provided with the SDK is just a convenience, not a requirement.",
            "title": "Step 2: Start a local server"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-3-set-up-the-chrome-browser",
            "text": "PNaCl is enabled by default in Chrome. We recommend that you use a version of Chrome that\u2019s the same or newer than the SDK bundle used to build Native Client modules. Older PNaCl modules will always work with newer versions of Chrome, but the converse is not true.  !!! tip\n    To find out the version of Chrome, type  about:chrome  in the address bar.  For a better development experience, it\u2019s also recommended to disable the Chrome cache. Chrome caches resources aggressively; disabling the cache helps make sure that the latest version of the Native Client module is loaded during development.   Open Chrome\u2019s developer tools by clicking the menu icon   and choosing  Tools  >  Developer tools .  Click the gear icon   in the bottom right corner of the Chrome window.  Under the \u201cGeneral\u201d settings, check the box next to \u201cDisable cache (while DevTools is open)\u201d.  Keep the Developer Tools pane open while developing Native Client applications.",
            "title": "Step 3: Set up the Chrome browser"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-4-stub-code-for-the-tutorial",
            "text": "The stub code for the tutorial is avalable in the SDK, in  pepper_$(VERSION)/getting_started/part1 . It contains the following files:   index.html : Contains the HTML layout of the page as well as the JavaScript code that interacts with the Native Client module.\nThe Native Client module is included in the page with an  <embed>  tag that points to a manifest file.  hello_tutorial.nmf : A manifest file that\u2019s used to point the HTML to the Native Client module and optionally provide additional commands to the PNaCl translator that is part of the Chrome browser.  hello_tutorial.cc : C++ code for a simple Native Client module.  Makefile : Compilation commands to build the  pexe  (portable executable) from the C++ code in  hello_tutorial.cc .   It\u2019s a good idea to take a look at these files now\u2014they contain a large amount of comments that help explain their structure and contents. For more details on the structure of a typical Native Client application, see  Application Structure .  The stub code is intentionally very minimal. The C++ code does not do anything except correctly initialize itself. The JavaScript code waits for the Native Client module to load and changes the status text on the web page accordingly.",
            "title": "Step 4: Stub code for the tutorial"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-5-compile-the-native-client-module-and-run-the-stub-application",
            "text": "To compile the Native Client module, run  make :  $ cd pepper_$(VERSION)/getting_started/part1\n$ make  Since the sample is located within the SDK tree, the Makefile knows how to find the PNaCl toolchain automatically and use it to build the module. If you\u2019re building applications outside the NaCl SDK tree, you should set the  $NACL_SDK_ROOT  environment variable. See  Building Native Client Modules  for more details.  Assuming the local server was started according to the instructions in  Step 2 , you can now load the sample by pointing Chrome to http://localhost:5103/part1. Chrome should load the Native Client module successfully and the Status text should change from \u201cLOADING...\u201d to \u201cSUCCESS\u201d. If you run into problems, check out the  Troubleshooting section  below.",
            "title": "Step 5: Compile the Native Client module and run the stub application"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-6-modify-the-javascript-code-to-send-a-message-to-the-native-client-module",
            "text": "In this step, you\u2019ll modify the web page ( index.html ) to send a message to the Native Client module after the page loads the module.  Look for the JavaScript function  moduleDidLoad() , and add new code to send a \u2018hello\u2019 message to the module. The new function should look as follows:  function moduleDidLoad() {\n  HelloTutorialModule = document.getElementById('hello_tutorial');\n  updateStatus('SUCCESS');\n  // Send a message to the Native Client module\n  HelloTutorialModule.postMessage('hello');\n}",
            "title": "Step 6: Modify the JavaScript code to send a message to the Native Client module"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-7-implement-a-message-handler-in-the-native-client-module",
            "text": "In this step, you\u2019ll modify the Native Client module ( hello_tutorial.cc ) to respond to the message received from the JavaScript code in the application. Specifically, you\u2019ll:   Implement the  HandleMessage()  member function of the module instance.  Use the  PostMessage()  member function to send a message from the module to the JavaScript code.   First, add code to define the variables used by the Native Client module (the \u2018hello\u2019 string you\u2019re expecting to receive from JavaScript and the reply string you want to return to JavaScript as a response). In the file  hello_tutorial.cc , add this code after the #include statements:  namespace {\n// The expected string sent by the browser.\nconst char* const kHelloString = \"hello\";\n// The string sent back to the browser upon receipt of a message\n// containing \"hello\".\nconst char* const kReplyString = \"hello from NaCl\";\n} // namespace  Now, implement the  HandleMessage()  member function to check for  kHelloString  and return  kReplyString . Look for the following line:  // TODO(sdk_user): 1. Make this function handle the incoming message.\nPopulate the member function with code, as follows:\n\nvirtual void HandleMessage(const pp::Var& var_message) {\n  if (!var_message.is_string())\n    return;\n  std::string message = var_message.AsString();\n  pp::Var var_reply;\n  if (message == kHelloString) {\n    var_reply = pp::Var(kReplyString);\n    PostMessage(var_reply);\n  }\n}  See the Pepper API documentation for additional information about the  pp::Instance.HandleMessage  and  pp::Instance.PostMessage  member functions.",
            "title": "Step 7: Implement a message handler in the Native Client module"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#step-8-compile-the-native-client-module-and-run-the-application-again",
            "text": "Compile the Native Client module by running the  make  command again.  Start the SDK web server by running  make serve .  Re-run the application by reloading http://localhost:5103/part1 in Chrome.   After Chrome loads the Native Client module, you should see the message sent from the module.",
            "title": "Step 8: Compile the Native Client module and run the application again"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#troubleshooting",
            "text": "If your application doesn\u2019t run, see  Step 3  above to verify that you\u2019ve set up your environment correctly, including both the Chrome browser and the local server. Make sure that you\u2019re running a correct version of Chrome, which is also greater or equal than the SDK bundle version you are using.  Another useful debugging aid is the Chrome JavaScript console (available via the Tools menu in Chrome). Examine it for clues about what went wrong. For example, if there\u2019s a message saying \u201cNaCl module crashed\u201d, there is a possibility that the Native Client module has a bug;  debugging  may be required.  There\u2019s more information about troubleshooting in the documentation:   FAQ Troubleshooting .  The  Progress Events  document contains some useful information about handling error events.",
            "title": "Troubleshooting"
        },
        {
            "location": "/For Users/Advanced/Use NaCl in NW.js/#next-steps",
            "text": "See the  Application Structure  section in the Developer\u2019s Guide for information about how to structure a Native Client module.  Check the  C++ Reference  for details about how to use the Pepper APIs.  Browse through the source code of the SDK examples (in the examples directory) to learn additional techniques for writing Native Client applications and using the Pepper APIs.  See the  Building ,  Running , and  Debugging pages  for information about how to build, run, and debug Native Client applications.  Check the  naclports  project to see what libraries have been ported for use with Native Client. If you port an open-source library for your own use, we recommend adding it to naclports (see  How to check code into naclports ).   Content available under the  CC-By 3.0 license",
            "title": "Next steps"
        },
        {
            "location": "/For Users/Advanced/Use Native Node Modules/",
            "text": "Use Native Node Modules {: .doctitle}\n\n\n\n\n\n\n\n\nUse Native Node Modules {: .doctitle}\n\n\nnw-gyp\n\n\nnode-pre-gyp\n\n\nKnown Issues\n\n\n\n\n\n\n\n\n\n\nnpm\n tool provided by Node.js builds the native modules, i.e. \nC/C++ Addons\n, at the time of installation. However the V8 version and Node ABI in NW.js is different from official Node.js. To use native Node.js modules with NW.js, you have to rebuild the modules with one of following tools.\n\n\nnw-gyp\n\n\nnw-gyp\n is a hack on \nnode-gyp\n to support NW.js specific headers and libraries. \n\n\nThe usage is the same with \nnode-gyp\n, except that you need to specify the version and arch (\nx64\n or \nia32\n) of NW.js manually. \n\n\nnpm install -g nw-gyp\ncd myaddon\nnw-gyp rebuild --target=0.13.0 --arch=x64\n\n\n\n\nSee https://github.com/nwjs/nw-gyp for more details.\n\n\nnode-pre-gyp\n\n\nSome packages uses \nnode-pre-gyp\n, which supports building for both Node.js and NW.js by using either \nnode-gyp\n or \nnw-gyp\n.\n\n\nThe usage of \nnode-pre-gyp\n is as following:\n\n\nnpm install -g node-pre-gyp\ncd myaddon\nnode-pre-gyp build --runtime=node-webkit --target=0.13.0 --target_arch=x64\n\n\n\n\nSee https://github.com/mapbox/node-pre-gyp for more details.\n\n\nKnown Issues\n\n\nSo far, you have to rebuild \neach native module\n with tools above including thoses are indirectly depended modules. Since \nbinding.gyp\n is required for building native modules, you can easily locate all native modules by finding \nbinding.gyp\n file.",
            "title": "Use Native Node Modules"
        },
        {
            "location": "/For Users/Advanced/Use Native Node Modules/#use-native-node-modules-doctitle",
            "text": "Use Native Node Modules {: .doctitle}  nw-gyp  node-pre-gyp  Known Issues      npm  tool provided by Node.js builds the native modules, i.e.  C/C++ Addons , at the time of installation. However the V8 version and Node ABI in NW.js is different from official Node.js. To use native Node.js modules with NW.js, you have to rebuild the modules with one of following tools.",
            "title": "Use Native Node Modules {: .doctitle}"
        },
        {
            "location": "/For Users/Advanced/Use Native Node Modules/#nw-gyp",
            "text": "nw-gyp  is a hack on  node-gyp  to support NW.js specific headers and libraries.   The usage is the same with  node-gyp , except that you need to specify the version and arch ( x64  or  ia32 ) of NW.js manually.   npm install -g nw-gyp\ncd myaddon\nnw-gyp rebuild --target=0.13.0 --arch=x64  See https://github.com/nwjs/nw-gyp for more details.",
            "title": "nw-gyp"
        },
        {
            "location": "/For Users/Advanced/Use Native Node Modules/#node-pre-gyp",
            "text": "Some packages uses  node-pre-gyp , which supports building for both Node.js and NW.js by using either  node-gyp  or  nw-gyp .  The usage of  node-pre-gyp  is as following:  npm install -g node-pre-gyp\ncd myaddon\nnode-pre-gyp build --runtime=node-webkit --target=0.13.0 --target_arch=x64  See https://github.com/mapbox/node-pre-gyp for more details.",
            "title": "node-pre-gyp"
        },
        {
            "location": "/For Users/Advanced/Use Native Node Modules/#known-issues",
            "text": "So far, you have to rebuild  each native module  with tools above including thoses are indirectly depended modules. Since  binding.gyp  is required for building native modules, you can easily locate all native modules by finding  binding.gyp  file.",
            "title": "Known Issues"
        },
        {
            "location": "/For Users/Migration/From 0.12 to 0.13/",
            "text": "Migrate from 0.12 to 0.13 {: doctitle}\n\n\n\n\n\n\n\n\nMigrate from 0.12 to 0.13 {: doctitle}\n\n\nArchitecture Changes\n\n\nNode.js Changes\n\n\nAPI Changes\n\n\nBuild Flavors\n\n\nShorcut\n\n\nManifest Format\n\n\nWindow\n\n\nKnown issues\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArchitecture Changes\n\n\n\n\nNW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from \nfile://\n to \nchrome-extension://\n, where the host part of the URL is the generated id. The \napp://\n protocol in 0.12 is replaced by \nchrome-extension://\n protocol.\n\n\nAll NW specific APIs, including \nrequire()\n is moved into a \nnw\n object from the \nnw.gui\n library. However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. You can use \nnw.gui\n library for some time before we deprecate it in 0.14 or later.\n\n\nThe Node.js context is put in the DOM context of the background page, which is shared between opening windows as in 0.12 and before. The difference is you have access to all DOM features and chrome.* platform APIs in the Node context in 0.13.\n\n\nThe entry of the application is either JS or HTML as in 0.12, but as the application is internally a Chrome App, the first window is supposed to be launched by JS from the background page. If you specify a HTML file as the entry with \"main\" field in package.json, NW will use a default JS to open the first window and load it.\n\n\nIf NW.js is running under \nMixed Context Mode\n (boot NW.js with \n--mixed-context\n argument), \nnw.*\n is kind of mirror of \nwindow.*\n. In this mode, you \nCANNOT\n share variables among frames or windows by assigning it to Node context. So do \nNOT\n turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.\n\n\n\n\nNode.js Changes\n\n\n\n\nNode.js is bumped to 5.x in latest build. Check your NPM modules to make sure they support Node.js 5.x \nespecially for native modules\n. There is \na list of native modules\n which should be migrated to latest NaN 2.\n\n\nAdd NW version information to process.versions[\nnw\n]. process.versions[\nnode-webkit\n] will be deprecated later.\n\n\n\n\nAPI Changes\n\n\nBuild Flavors\n\n\n\n\nDifferent build flavors support different set of APIs and capabilities. See \nBuild Flavors\n to choose the right NW.js flavor or \nbuild your own\n.\n\n\n\n\nShorcut\n\n\n\n\nShortcut\n API does \nNOT\n map \nCtrl\n modifier to \n\u2318\n on Mac OS X. However 0.13.0 supports \nCommand\n modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See \nShortcut.key\n for details.\n\n\n\n\nManifest Format\n\n\n\n\nsingle-instance\n is \ndeprecated\n and it's always \ntrue\n. You \nCANNOT\n have multiple instances for your app.\n\n\ntoolbar\n is \ndeprecated\n and it's always \nfalse\n. The traditional toolbar will \nNOT\n be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with \nF12\n (Windows & Linux) or \n\u2318\n+\n\u2325\n+\ni\n (Mac). And use \nwin.reload()\n and \nwin.reloadDev()\n to simulate the reload buttons.\n\n\nno-edit-menu\n is \ndeprecated\n.\n\n\nsnapshot\n is \ndeprecated\n. Use \nwin.evalNWBin()\n instead.\n\n\nThe format of \nnode-remote\n is changed to array of \nmatch patterns\n used by Chrome extension.\n\n\nWindow options \nalways-on-top\n and \nvisible-on-all-workspaces\n is renamed to \nalways_on_top\n and \nvisible_on_all_workspaces\n respectively in \npackage.json\n or as argument of \nWindow.open()\n.\n\n\n\n\nWindow\n\n\n\n\nThere is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is \n.main\n. It could be specified in \nWindow.open\n\n\nEvent \ncapturepagedone\n of \nWindow\n API\n is \ndeprecated\n.Use the callback with the \nwin.capturePage(callback [, config ])\n instead.\n\n\nWindow.open\n is changed to passing the created window as the argument of the callback.\n\n\nWindow.showDevtools\n is changed to passing the created window as the argument of the callback.\n\n\nwin.setTransparent\n is \ndeprecated\n. You can't change the transparency after window is created.\n\n\nunmaximize\n and \nleave-fullscreen\n events of \nWindow\n object is \ndeprecated\n and replaced by \nrestore\n. When window is restored from minimized, maximized or fullscreen, \nrestore\n event is triggered instead.\n\n\nWindow options \nalways-on-top\n and \nvisible-on-all-workspaces\n is renamed to \nalways_on_top\n and \nvisible_on_all_workspaces\n respectively in \npackage.json\n or as argument of \nWindow.open()\n.\n\n\nWindow is not inherited from \nEventEmitter\n anymore, but the methods \non()\n, \nonce()\n, \nremoveListener()\n and \nremoveAllListeners()\n are still supported.\n\n\n\n\nKnown issues\n\n\n\n\nAppending zip to the executable is currently not supported. Please use plain files or a separate zip file.\n\n\nThe following window options passed to nw.Window.open() is not effective on Linux: \nmin_width\n, \nmin_height\n, \nmax_width\n, \nmax_height\n, \nresizable\n for now; try to set them in the callback.\n\n\nnw.Window.get(window_object)\n is not working as expected when passing the argument; use \nwindow_object.nw.Window.get()\n as a workaround.\n\n\nnw.Window.reloadDev()\n is not supported for now\n\n\nclose\n event of \nnw.Window\n: \n\u2318\n+\nQ\n does not pass \ntrue\n as the first argument to the event.\n\n\nclosed\n event of \nnw.Window\n: \nApp.quit()\n doesn't trigger this event.\n\n\ndevtools-closed\n event of nw.Window is not supported for now.\n\n\nas_desktop\n option is not supported for now\n\n\nopening new window for an external URL starts a new renderer process (thus objects there are not accessible directly)\n\n\nwebkit.{plugin|java|page-cache}\n option in \npackage.json\n is not supported for now: plugins are enabled by default.\n\n\nnwUserAgent\n attribute of \n<iframe>\n is not supported for now.\n\n\n--data-path\n command line argument is not supported for now.\n\n\ntooltip\n of \nMenuItem\n is not supported for now.\n\n\nnw.App.fullArgv\n is not supported for now.\n\n\nnw.App.setCrashDumpDir()\n is not supported; crash dump is stored in \napp-data-path/Crash Reports",
            "title": "From 0.12 to 0.13"
        },
        {
            "location": "/For Users/Migration/From 0.12 to 0.13/#migrate-from-012-to-013-doctitle",
            "text": "Migrate from 0.12 to 0.13 {: doctitle}  Architecture Changes  Node.js Changes  API Changes  Build Flavors  Shorcut  Manifest Format  Window  Known issues",
            "title": "Migrate from 0.12 to 0.13 {: doctitle}"
        },
        {
            "location": "/For Users/Migration/From 0.12 to 0.13/#architecture-changes",
            "text": "NW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from  file://  to  chrome-extension:// , where the host part of the URL is the generated id. The  app://  protocol in 0.12 is replaced by  chrome-extension://  protocol.  All NW specific APIs, including  require()  is moved into a  nw  object from the  nw.gui  library. However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. You can use  nw.gui  library for some time before we deprecate it in 0.14 or later.  The Node.js context is put in the DOM context of the background page, which is shared between opening windows as in 0.12 and before. The difference is you have access to all DOM features and chrome.* platform APIs in the Node context in 0.13.  The entry of the application is either JS or HTML as in 0.12, but as the application is internally a Chrome App, the first window is supposed to be launched by JS from the background page. If you specify a HTML file as the entry with \"main\" field in package.json, NW will use a default JS to open the first window and load it.  If NW.js is running under  Mixed Context Mode  (boot NW.js with  --mixed-context  argument),  nw.*  is kind of mirror of  window.* . In this mode, you  CANNOT  share variables among frames or windows by assigning it to Node context. So do  NOT  turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.",
            "title": "Architecture Changes"
        },
        {
            "location": "/For Users/Migration/From 0.12 to 0.13/#nodejs-changes",
            "text": "Node.js is bumped to 5.x in latest build. Check your NPM modules to make sure they support Node.js 5.x  especially for native modules . There is  a list of native modules  which should be migrated to latest NaN 2.  Add NW version information to process.versions[ nw ]. process.versions[ node-webkit ] will be deprecated later.",
            "title": "Node.js Changes"
        },
        {
            "location": "/For Users/Migration/From 0.12 to 0.13/#api-changes",
            "text": "Build Flavors   Different build flavors support different set of APIs and capabilities. See  Build Flavors  to choose the right NW.js flavor or  build your own .   Shorcut   Shortcut  API does  NOT  map  Ctrl  modifier to  \u2318  on Mac OS X. However 0.13.0 supports  Command  modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See  Shortcut.key  for details.   Manifest Format   single-instance  is  deprecated  and it's always  true . You  CANNOT  have multiple instances for your app.  toolbar  is  deprecated  and it's always  false . The traditional toolbar will  NOT  be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with  F12  (Windows & Linux) or  \u2318 + \u2325 + i  (Mac). And use  win.reload()  and  win.reloadDev()  to simulate the reload buttons.  no-edit-menu  is  deprecated .  snapshot  is  deprecated . Use  win.evalNWBin()  instead.  The format of  node-remote  is changed to array of  match patterns  used by Chrome extension.  Window options  always-on-top  and  visible-on-all-workspaces  is renamed to  always_on_top  and  visible_on_all_workspaces  respectively in  package.json  or as argument of  Window.open() .   Window   There is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is  .main . It could be specified in  Window.open  Event  capturepagedone  of  Window  API  is  deprecated .Use the callback with the  win.capturePage(callback [, config ])  instead.  Window.open  is changed to passing the created window as the argument of the callback.  Window.showDevtools  is changed to passing the created window as the argument of the callback.  win.setTransparent  is  deprecated . You can't change the transparency after window is created.  unmaximize  and  leave-fullscreen  events of  Window  object is  deprecated  and replaced by  restore . When window is restored from minimized, maximized or fullscreen,  restore  event is triggered instead.  Window options  always-on-top  and  visible-on-all-workspaces  is renamed to  always_on_top  and  visible_on_all_workspaces  respectively in  package.json  or as argument of  Window.open() .  Window is not inherited from  EventEmitter  anymore, but the methods  on() ,  once() ,  removeListener()  and  removeAllListeners()  are still supported.   Known issues   Appending zip to the executable is currently not supported. Please use plain files or a separate zip file.  The following window options passed to nw.Window.open() is not effective on Linux:  min_width ,  min_height ,  max_width ,  max_height ,  resizable  for now; try to set them in the callback.  nw.Window.get(window_object)  is not working as expected when passing the argument; use  window_object.nw.Window.get()  as a workaround.  nw.Window.reloadDev()  is not supported for now  close  event of  nw.Window :  \u2318 + Q  does not pass  true  as the first argument to the event.  closed  event of  nw.Window :  App.quit()  doesn't trigger this event.  devtools-closed  event of nw.Window is not supported for now.  as_desktop  option is not supported for now  opening new window for an external URL starts a new renderer process (thus objects there are not accessible directly)  webkit.{plugin|java|page-cache}  option in  package.json  is not supported for now: plugins are enabled by default.  nwUserAgent  attribute of  <iframe>  is not supported for now.  --data-path  command line argument is not supported for now.  tooltip  of  MenuItem  is not supported for now.  nw.App.fullArgv  is not supported for now.  nw.App.setCrashDumpDir()  is not supported; crash dump is stored in  app-data-path/Crash Reports",
            "title": "API Changes"
        },
        {
            "location": "/References/App/",
            "text": "App {: .doctitle}\n\n\n\n\n\n\n\n\nApp {: .doctitle}\n\n\nApp.argv\n\n\nApp.fullArgv\n\n\nApp.dataPath\n\n\nApp.manifest\n\n\nApp.clearCache()\n\n\nApp.closeAllWindows()\n\n\nApp.crashBrowser()\n\n\nApp.crashRenderer()\n\n\nApp.getProxyForURL(url)\n\n\nApp.setProxyConfig(config)\n\n\nApp.quit()\n\n\nApp.setCrashDumpDir(dir)\n\n\nApp.addOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)\n\n\nApp.removeOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)\n\n\nApp.registerGlobalHotKey(shortcut)\n\n\nApp.unregisterGlobalHotKey(shortcut)\n\n\nEvent: open(args)\n\n\nEvent: reopen\n\n\n\n\n\n\n\n\n\n\nApp.argv\n\n\nGet the command line arguments when starting the app.\n\n\nApp.fullArgv\n\n\nGet all the command line arguments when starting the app. Because NW.js itself used switches like \n--no-sandbox\n and \n--process-per-tab\n, it would confuse the app when the switches were meant to be given to NW.js, so \nApp.argv\n just filtered such switches (arguments' precedence were kept). You can get the switches to be filtered with \nApp.filteredArgv\n.\n\n\nApp.dataPath\n\n\nGet the application's data path in user's directory.\n\n\n\n\nWindows: \n%LOCALAPPDATA%/<name>\n\n\nLinux: \n~/.config/<name>\n\n\nOSX: \n~/Library/Application Support/<name>\n\n\n\n\n<name>\n is the field in the manifest.\n\n\nApp.manifest\n\n\nGet the JSON object of the manifest file.\n\n\nApp.clearCache()\n\n\nClear the HTTP cache in memory and the one on disk. This method call is synchronized.\n\n\nApp.closeAllWindows()\n\n\nSend the \nclose\n event to all windows of current app, if no window is blocking the \nclose\n event, then the app will quit after all windows have done shutdown. Use this method to quit an app will give windows a chance to save data.\n\n\nApp.crashBrowser()\n\n\nApp.crashRenderer()\n\n\nThese 2 functions crashes the browser process and the renderer process respectively, to test the \nCrash dump\n feature.\n\n\nApp.getProxyForURL(url)\n\n\n\n\nurl\n \n{String}\n the URL to query for proxy\n\n\n\n\nQuery the proxy to be used for loading \nurl\n in DOM. The return value is in the same format used in \nPAC\n (e.g. \"DIRECT\", \"PROXY localhost:8080\").\n\n\nApp.setProxyConfig(config)\n\n\n\n\nconfig\n \n{String}\n Proxy rules\n\n\n\n\nSet the proxy config which the web engine will be used to request network resources.\n\n\nRule (copied from \nnet/proxy/proxy_config.h\n)\n\n\n    // Parses the rules from a string, indicating which proxies to use.\n    //\n    //   proxy-uri = [<proxy-scheme>\"://\"]<proxy-host>[\":\"<proxy-port>]\n    //\n    //   proxy-uri-list = <proxy-uri>[\",\"<proxy-uri-list>]\n    //\n    //   url-scheme = \"http\" | \"https\" | \"ftp\" | \"socks\"\n    //\n    //   scheme-proxies = [<url-scheme>\"=\"]<proxy-uri-list>\n    //\n    //   proxy-rules = scheme-proxies[\";\"<scheme-proxies>]\n    //\n    // Thus, the proxy-rules string should be a semicolon-separated list of\n    // ordered proxies that apply to a particular URL scheme. Unless specified,\n    // the proxy scheme for proxy-uris is assumed to be http.\n    //\n    // Some special cases:\n    //  * If the scheme is omitted from the first proxy list, that list applies\n    //    to all URL schemes and subsequent lists are ignored.\n    //  * If a scheme is omitted from any proxy list after a list where a scheme\n    //    has been provided, the list without a scheme is ignored.\n    //  * If the url-scheme is set to 'socks', that sets a fallback list that\n    //    to all otherwise unspecified url-schemes, however the default proxy-\n    //    scheme for proxy urls in the 'socks' list is understood to be\n    //    socks4:// if unspecified.\n    //\n    // For example:\n    //   \"http=foopy:80;ftp=foopy2\"  -- use HTTP proxy \"foopy:80\" for http://\n    //                                  URLs, and HTTP proxy \"foopy2:80\" for\n    //                                  ftp:// URLs.\n    //   \"foopy:80\"                  -- use HTTP proxy \"foopy:80\" for all URLs.\n    //   \"foopy:80,bar,direct://\"    -- use HTTP proxy \"foopy:80\" for all URLs,\n    //                                  failing over to \"bar\" if \"foopy:80\" is\n    //                                  unavailable, and after that using no\n    //                                  proxy.\n    //   \"socks4://foopy\"            -- use SOCKS v4 proxy \"foopy:1080\" for all\n    //                                  URLs.\n    //   \"http=foop,socks5://bar.com -- use HTTP proxy \"foopy\" for http URLs,\n    //                                  and fail over to the SOCKS5 proxy\n    //                                  \"bar.com\" if \"foop\" is unavailable.\n    //   \"http=foopy,direct://       -- use HTTP proxy \"foopy\" for http URLs,\n    //                                  and use no proxy if \"foopy\" is\n    //                                  unavailable.\n    //   \"http=foopy;socks=foopy2   --  use HTTP proxy \"foopy\" for http URLs,\n    //                                  and use socks4://foopy2 for all other\n    //                                  URLs.\n\n\n\n\nApp.quit()\n\n\nQuit current app. This method will \nnot\n send \nclose\n event to windows and app will just quit quietly.\n\n\nApp.setCrashDumpDir(dir)\n\n\n!!! warning \"Deprecated\"\n    This API was deprecated since 0.11.0.\n\n\n\n\ndir\n \n{String}\n path to generate the crash dump\n\n\n\n\nSet the directory where the minidump file will be saved on crash. For more information, see \nCrash dump\n.\n\n\nApp.addOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)\n\n\n\n\nsourceOrigin\n \n{String}\n The source origin. e.g. \nhttp://github.com/\n\n\ndestinationProtocol\n \n{String}\n The destination protocol where the \nsourceOrigin\n can access to. e.g. \napp\n\n\ndestinationHost\n \n{String}\n The destination host where the \nsourceOrigin\n can access to. e.g. \nmyapp\n\n\nallowDestinationSubdomains\n \n{Boolean}\n If set to true, the \nsourceOrigin\n is allowed to access subdomains of destinations.\n\n\n\n\nAdd an entry to the whitelist used for controlling cross-origin access. Suppose you want to allow HTTP redirecting from \ngithub.com\n to the page of your app, use something like this:\n\n\nApp.addOriginAccessWhitelistEntry('http://github.com/', 'chrome-extension', location.host, true);\n\n\n\n\nUse \nApp.removeOriginAccessWhitelistEntry\n with exactly the same arguments to do the contrary.\n\n\nApp.removeOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)\n\n\n\n\nsourceOrigin\n \n{String}\n The source origin. e.g. \nhttp://github.com/\n\n\ndestinationProtocol\n \n{String}\n The destination protocol where the \nsourceOrigin\n can access to. e.g. \napp\n\n\ndestinationHost\n \n{String}\n The destination host where the \nsourceOrigin\n can access to. e.g. \nmyapp\n\n\nallowDestinationSubdomains\n \n{Boolean}\n If set to true, the \nsourceOrigin\n is allowed to access subdomains of destinations.\n\n\n\n\nRemove an entry from the whitelist used for controlling cross-origin access. See \naddOriginAccessWhitelistEntry\n above.\n\n\nApp.registerGlobalHotKey(shortcut)\n\n\n\n\nshortcut\n \n{Shortcut}\n the \nShortcut\n object to register.\n\n\n\n\nRegister a global keyboard shortcut (also known as system-wide hot key) to the system.\n\n\nSee \nShortcut\n for more information.\n\n\nApp.unregisterGlobalHotKey(shortcut)\n\n\n\n\nshortcut\n \n{Shortcut}\n the \nShortcut\n object to unregister.\n\n\n\n\nUnregisters a global keyboard shortcut.\n\n\nSee \nShortcut\n for more information.\n\n\nEvent: open(args)\n\n\n\n\nargs\n \n{String}\n the full command line of the program.\n\n\n\n\nEmitted when users opened a file with your app.\n\n\nEvent: reopen\n\n\nThis is a Mac specific feature. This event is sent when the user clicks the dock icon for an already running application.",
            "title": "App"
        },
        {
            "location": "/References/App/#app-doctitle",
            "text": "App {: .doctitle}  App.argv  App.fullArgv  App.dataPath  App.manifest  App.clearCache()  App.closeAllWindows()  App.crashBrowser()  App.crashRenderer()  App.getProxyForURL(url)  App.setProxyConfig(config)  App.quit()  App.setCrashDumpDir(dir)  App.addOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)  App.removeOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)  App.registerGlobalHotKey(shortcut)  App.unregisterGlobalHotKey(shortcut)  Event: open(args)  Event: reopen",
            "title": "App {: .doctitle}"
        },
        {
            "location": "/References/App/#appargv",
            "text": "Get the command line arguments when starting the app.",
            "title": "App.argv"
        },
        {
            "location": "/References/App/#appfullargv",
            "text": "Get all the command line arguments when starting the app. Because NW.js itself used switches like  --no-sandbox  and  --process-per-tab , it would confuse the app when the switches were meant to be given to NW.js, so  App.argv  just filtered such switches (arguments' precedence were kept). You can get the switches to be filtered with  App.filteredArgv .",
            "title": "App.fullArgv"
        },
        {
            "location": "/References/App/#appdatapath",
            "text": "Get the application's data path in user's directory.   Windows:  %LOCALAPPDATA%/<name>  Linux:  ~/.config/<name>  OSX:  ~/Library/Application Support/<name>   <name>  is the field in the manifest.",
            "title": "App.dataPath"
        },
        {
            "location": "/References/App/#appmanifest",
            "text": "Get the JSON object of the manifest file.",
            "title": "App.manifest"
        },
        {
            "location": "/References/App/#appclearcache",
            "text": "Clear the HTTP cache in memory and the one on disk. This method call is synchronized.",
            "title": "App.clearCache()"
        },
        {
            "location": "/References/App/#appcloseallwindows",
            "text": "Send the  close  event to all windows of current app, if no window is blocking the  close  event, then the app will quit after all windows have done shutdown. Use this method to quit an app will give windows a chance to save data.",
            "title": "App.closeAllWindows()"
        },
        {
            "location": "/References/App/#appcrashbrowser",
            "text": "",
            "title": "App.crashBrowser()"
        },
        {
            "location": "/References/App/#appcrashrenderer",
            "text": "These 2 functions crashes the browser process and the renderer process respectively, to test the  Crash dump  feature.",
            "title": "App.crashRenderer()"
        },
        {
            "location": "/References/App/#appgetproxyforurlurl",
            "text": "url   {String}  the URL to query for proxy   Query the proxy to be used for loading  url  in DOM. The return value is in the same format used in  PAC  (e.g. \"DIRECT\", \"PROXY localhost:8080\").",
            "title": "App.getProxyForURL(url)"
        },
        {
            "location": "/References/App/#appsetproxyconfigconfig",
            "text": "config   {String}  Proxy rules   Set the proxy config which the web engine will be used to request network resources.  Rule (copied from  net/proxy/proxy_config.h )      // Parses the rules from a string, indicating which proxies to use.\n    //\n    //   proxy-uri = [<proxy-scheme>\"://\"]<proxy-host>[\":\"<proxy-port>]\n    //\n    //   proxy-uri-list = <proxy-uri>[\",\"<proxy-uri-list>]\n    //\n    //   url-scheme = \"http\" | \"https\" | \"ftp\" | \"socks\"\n    //\n    //   scheme-proxies = [<url-scheme>\"=\"]<proxy-uri-list>\n    //\n    //   proxy-rules = scheme-proxies[\";\"<scheme-proxies>]\n    //\n    // Thus, the proxy-rules string should be a semicolon-separated list of\n    // ordered proxies that apply to a particular URL scheme. Unless specified,\n    // the proxy scheme for proxy-uris is assumed to be http.\n    //\n    // Some special cases:\n    //  * If the scheme is omitted from the first proxy list, that list applies\n    //    to all URL schemes and subsequent lists are ignored.\n    //  * If a scheme is omitted from any proxy list after a list where a scheme\n    //    has been provided, the list without a scheme is ignored.\n    //  * If the url-scheme is set to 'socks', that sets a fallback list that\n    //    to all otherwise unspecified url-schemes, however the default proxy-\n    //    scheme for proxy urls in the 'socks' list is understood to be\n    //    socks4:// if unspecified.\n    //\n    // For example:\n    //   \"http=foopy:80;ftp=foopy2\"  -- use HTTP proxy \"foopy:80\" for http://\n    //                                  URLs, and HTTP proxy \"foopy2:80\" for\n    //                                  ftp:// URLs.\n    //   \"foopy:80\"                  -- use HTTP proxy \"foopy:80\" for all URLs.\n    //   \"foopy:80,bar,direct://\"    -- use HTTP proxy \"foopy:80\" for all URLs,\n    //                                  failing over to \"bar\" if \"foopy:80\" is\n    //                                  unavailable, and after that using no\n    //                                  proxy.\n    //   \"socks4://foopy\"            -- use SOCKS v4 proxy \"foopy:1080\" for all\n    //                                  URLs.\n    //   \"http=foop,socks5://bar.com -- use HTTP proxy \"foopy\" for http URLs,\n    //                                  and fail over to the SOCKS5 proxy\n    //                                  \"bar.com\" if \"foop\" is unavailable.\n    //   \"http=foopy,direct://       -- use HTTP proxy \"foopy\" for http URLs,\n    //                                  and use no proxy if \"foopy\" is\n    //                                  unavailable.\n    //   \"http=foopy;socks=foopy2   --  use HTTP proxy \"foopy\" for http URLs,\n    //                                  and use socks4://foopy2 for all other\n    //                                  URLs.",
            "title": "App.setProxyConfig(config)"
        },
        {
            "location": "/References/App/#appquit",
            "text": "Quit current app. This method will  not  send  close  event to windows and app will just quit quietly.",
            "title": "App.quit()"
        },
        {
            "location": "/References/App/#appsetcrashdumpdirdir",
            "text": "!!! warning \"Deprecated\"\n    This API was deprecated since 0.11.0.   dir   {String}  path to generate the crash dump   Set the directory where the minidump file will be saved on crash. For more information, see  Crash dump .",
            "title": "App.setCrashDumpDir(dir)"
        },
        {
            "location": "/References/App/#appaddoriginaccesswhitelistentrysourceorigin-destinationprotocol-destinationhost-allowdestinationsubdomains",
            "text": "sourceOrigin   {String}  The source origin. e.g.  http://github.com/  destinationProtocol   {String}  The destination protocol where the  sourceOrigin  can access to. e.g.  app  destinationHost   {String}  The destination host where the  sourceOrigin  can access to. e.g.  myapp  allowDestinationSubdomains   {Boolean}  If set to true, the  sourceOrigin  is allowed to access subdomains of destinations.   Add an entry to the whitelist used for controlling cross-origin access. Suppose you want to allow HTTP redirecting from  github.com  to the page of your app, use something like this:  App.addOriginAccessWhitelistEntry('http://github.com/', 'chrome-extension', location.host, true);  Use  App.removeOriginAccessWhitelistEntry  with exactly the same arguments to do the contrary.",
            "title": "App.addOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)"
        },
        {
            "location": "/References/App/#appremoveoriginaccesswhitelistentrysourceorigin-destinationprotocol-destinationhost-allowdestinationsubdomains",
            "text": "sourceOrigin   {String}  The source origin. e.g.  http://github.com/  destinationProtocol   {String}  The destination protocol where the  sourceOrigin  can access to. e.g.  app  destinationHost   {String}  The destination host where the  sourceOrigin  can access to. e.g.  myapp  allowDestinationSubdomains   {Boolean}  If set to true, the  sourceOrigin  is allowed to access subdomains of destinations.   Remove an entry from the whitelist used for controlling cross-origin access. See  addOriginAccessWhitelistEntry  above.",
            "title": "App.removeOriginAccessWhitelistEntry(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains)"
        },
        {
            "location": "/References/App/#appregisterglobalhotkeyshortcut",
            "text": "shortcut   {Shortcut}  the  Shortcut  object to register.   Register a global keyboard shortcut (also known as system-wide hot key) to the system.  See  Shortcut  for more information.",
            "title": "App.registerGlobalHotKey(shortcut)"
        },
        {
            "location": "/References/App/#appunregisterglobalhotkeyshortcut",
            "text": "shortcut   {Shortcut}  the  Shortcut  object to unregister.   Unregisters a global keyboard shortcut.  See  Shortcut  for more information.",
            "title": "App.unregisterGlobalHotKey(shortcut)"
        },
        {
            "location": "/References/App/#event-openargs",
            "text": "args   {String}  the full command line of the program.   Emitted when users opened a file with your app.",
            "title": "Event: open(args)"
        },
        {
            "location": "/References/App/#event-reopen",
            "text": "This is a Mac specific feature. This event is sent when the user clicks the dock icon for an already running application.",
            "title": "Event: reopen"
        },
        {
            "location": "/References/Changes to DOM/",
            "text": "Changes to DOM {: .doctitle}\n\n\n\n\n\n\n\n\nChanges to DOM {: .doctitle}\n\n\n<input type=\"file\">\n\n\nfileinput.value\n\n\nfileitem.path\n\n\nAttribute: nwdirectory\n\n\nAttribute: nwsaveas\n\n\nAttribute: nwworkingdir\n\n\n\n\n\n\n<iframe>\n\n\nAttribute: nwdisable\n\n\nAttribute: nwfaketop\n\n\nAttribute: nwUserAgent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<input type=\"file\">\n\n\nHTML5 does provided limited support for file dialogs with \n<input type=\"file\" />\n element, such as \nmultiple\n, \naccept\n and \nwebkitdirectory\n. NW.js extended the file input to better support native apps.\n\n\n!!! note\n    NW.js extended features are only enabled in Node frames for security reasons. See \nSecurity in NW.js\n for the differences of Node and normal frame.\n\n\nfileinput.value\n\n\nThe property contains native path of the local file.\n\n\nFor example, you can read the file selected by user with Node.js API:\n\n\n// Get the native path of the file selected by user\nvar fileinput = document.querySelector('input[type=file]');\nvar path = fileinput.value;\n\n// Read file with Node.js API\nvar fs = nw.require('fs');\nfs.readFile(path, 'utf8', function(err, txt) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  console.log(txt);\n});\n\n\n\n\nfileitem.path\n\n\nHTML5 provides a \nfiles\n attribute to return all files selected in a \n<input>\n tag. NW.js provided an extra property \nfileitem.path\n to each file item in \nfiles\n, which is the native path of the selected file.\n\n\nvar fileinput = document.querySelector('input[type=file]');\nvar files = fileinput.files;\n\nfor (var i = 0; i < files.length; ++i) {\n  console.log(files[i].path);\n}\n\n\n\n\nAttribute: \nnwdirectory\n\n\nnwdirectory\n is a bit similar to \nwebkitdirectory\n, but it returns the path of directory instead of returning files in it.\n\n\nFor example:\n\n\n<input type=\"file\" nwdirectory>\n\n\n\n\nAttribute: \nnwsaveas\n\n\nnwsaveas\n will open a 'Save as' dialog, which lets user enter the path of a file. It's possible to select a non-existing file, which is different from the default file input tag.\n\n\nFor example:\n\n\n<input type=\"file\" nwsaveas>\n\n\n\n\nAnd you can specify a value for the default file name to save:\n\n\n<input type=\"file\" nwsaveas=\"filename.txt\">\n\n\n\n\nAttribute: \nnwworkingdir\n\n\nWith \nnwworkingdir\n, the file dialog starts in\u00a0the\u00a0given directory when the element is\u00a0activated.\n\n\nFor example, following code enables the file dialog opening in \n/home/path/\n by default:\n\n\n<input type=\"file\" nwworkingdir=\"/home/path/\">\n\n\n\n\n<iframe>\n\n\nNW.js extended \n<iframe>\n tag for easier developing native apps. Thoses features enables apps to bypass the restrictions of Sandbox and Same Origin Policy etc.\n\n\nSee also \nwebview Tag\n for the new \n<webview>\n tag.\n\n\nAttribute: nwdisable\n\n\nMake the frame and subframes normal frames.\n\n\n!!! note\n    This attribute doesn't prevent the page in normal frames accessing its parent and top frames. Then they can still get access to Node.js APIs. So usually you may want to use this attribute with \nnwfaketop\n togather.\n\n\nAttribute: nwfaketop\n\n\nPrevent web page in the frame accessing the real \nwindow.parent\n or \nwindow.top\n. They will get the faked parent and top, which is its own \nwindow\n object of the frame. Subframes will also be affected.\n\n\nThis attribute is usually used with \nnwdisable\n.\n\n\nAttribute: nwUserAgent\n\n\nOverride the default user-agent when loading the web page in the frame and sub frames. See \nuser-agent\n in manifest\n for details.",
            "title": "Changes to DOM"
        },
        {
            "location": "/References/Changes to DOM/#changes-to-dom-doctitle",
            "text": "Changes to DOM {: .doctitle}  <input type=\"file\">  fileinput.value  fileitem.path  Attribute: nwdirectory  Attribute: nwsaveas  Attribute: nwworkingdir    <iframe>  Attribute: nwdisable  Attribute: nwfaketop  Attribute: nwUserAgent",
            "title": "Changes to DOM {: .doctitle}"
        },
        {
            "location": "/References/Changes to DOM/#input-typefile",
            "text": "HTML5 does provided limited support for file dialogs with  <input type=\"file\" />  element, such as  multiple ,  accept  and  webkitdirectory . NW.js extended the file input to better support native apps.  !!! note\n    NW.js extended features are only enabled in Node frames for security reasons. See  Security in NW.js  for the differences of Node and normal frame.  fileinput.value  The property contains native path of the local file.  For example, you can read the file selected by user with Node.js API:  // Get the native path of the file selected by user\nvar fileinput = document.querySelector('input[type=file]');\nvar path = fileinput.value;\n\n// Read file with Node.js API\nvar fs = nw.require('fs');\nfs.readFile(path, 'utf8', function(err, txt) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  console.log(txt);\n});  fileitem.path  HTML5 provides a  files  attribute to return all files selected in a  <input>  tag. NW.js provided an extra property  fileitem.path  to each file item in  files , which is the native path of the selected file.  var fileinput = document.querySelector('input[type=file]');\nvar files = fileinput.files;\n\nfor (var i = 0; i < files.length; ++i) {\n  console.log(files[i].path);\n}  Attribute:  nwdirectory  nwdirectory  is a bit similar to  webkitdirectory , but it returns the path of directory instead of returning files in it.  For example:  <input type=\"file\" nwdirectory>  Attribute:  nwsaveas  nwsaveas  will open a 'Save as' dialog, which lets user enter the path of a file. It's possible to select a non-existing file, which is different from the default file input tag.  For example:  <input type=\"file\" nwsaveas>  And you can specify a value for the default file name to save:  <input type=\"file\" nwsaveas=\"filename.txt\">  Attribute:  nwworkingdir  With  nwworkingdir , the file dialog starts in\u00a0the\u00a0given directory when the element is\u00a0activated.  For example, following code enables the file dialog opening in  /home/path/  by default:  <input type=\"file\" nwworkingdir=\"/home/path/\">",
            "title": "<input type=\"file\">"
        },
        {
            "location": "/References/Changes to DOM/#iframe",
            "text": "NW.js extended  <iframe>  tag for easier developing native apps. Thoses features enables apps to bypass the restrictions of Sandbox and Same Origin Policy etc.  See also  webview Tag  for the new  <webview>  tag.  Attribute: nwdisable  Make the frame and subframes normal frames.  !!! note\n    This attribute doesn't prevent the page in normal frames accessing its parent and top frames. Then they can still get access to Node.js APIs. So usually you may want to use this attribute with  nwfaketop  togather.  Attribute: nwfaketop  Prevent web page in the frame accessing the real  window.parent  or  window.top . They will get the faked parent and top, which is its own  window  object of the frame. Subframes will also be affected.  This attribute is usually used with  nwdisable .  Attribute: nwUserAgent  Override the default user-agent when loading the web page in the frame and sub frames. See  user-agent  in manifest  for details.",
            "title": "<iframe>"
        },
        {
            "location": "/References/Changes to Node/",
            "text": "Changes to Node {: .doctitle}\n\n\n\n\n\n\n\n\nChanges to Node {: .doctitle}\n\n\nconsole\n\n\nprocess\n\n\nrequire\n\n\n\n\n\n\n\n\n\n\nconsole\n\n\nSince NW.js supports GUI applications instead\u00a0of console applications, the\u00a0output of \nconsole.log()\n (and\u00a0other similar methods such\u00a0as \nconsole.warn()\n and \nconsole.error()\n) is redirected to the console of Chromium. You\u00a0may see\u00a0it in\u00a0your \"\nDeveloper Tools\n\" window (on\u00a0its \"Console\" tab).\n\n\nprocess\n\n\nA couple of new fields is\u00a0added to\u00a0the\u00a0global \nprocess\n object:\n\n\n\n\nprocess.versions['nwjs']\n is set with NW.js's version.\n\n\nprocess.versions['chromium']\n is set with the chromium version which NW.js is based on.\n\n\nprocess.mainModule\n is set for the start page (such\u00a0as \nindex.html\n) as\u00a0specified in\u00a0the\u00a0manifest's \nmain\n field. However, when the \nnode-main\n field is\u00a0also specified in\u00a0the\u00a0manifest, \nprocess.mainModule\n points to\u00a0the\u00a0file specified in\u00a0the \nnode-main\n field.\n\n\n\n\nrequire\n\n\nBehaviour of relative paths in Node's \nrequire()\n method depends on the \nJavaScript context\n in which the parent file is running in. (where \"the\u00a0parent file\" is the\u00a0file in\u00a0which the \nrequire()\n method is\u00a0called):\n\n\n\n\nIf the parent file is running in Node context, the\u00a0child's relative\u00a0path is\u00a0treated as\u00a0relative to\u00a0its\u00a0parent.\n\n\nIf the parent file is\u00a0running in browser context, the\u00a0child's relative\u00a0path is\u00a0treated as\u00a0relative to\u00a0the\u00a0application's root\u00a0directory, i.e. the directory of manifest file.",
            "title": "Changes to Node"
        },
        {
            "location": "/References/Changes to Node/#changes-to-node-doctitle",
            "text": "Changes to Node {: .doctitle}  console  process  require",
            "title": "Changes to Node {: .doctitle}"
        },
        {
            "location": "/References/Changes to Node/#console",
            "text": "Since NW.js supports GUI applications instead\u00a0of console applications, the\u00a0output of  console.log()  (and\u00a0other similar methods such\u00a0as  console.warn()  and  console.error() ) is redirected to the console of Chromium. You\u00a0may see\u00a0it in\u00a0your \" Developer Tools \" window (on\u00a0its \"Console\" tab).",
            "title": "console"
        },
        {
            "location": "/References/Changes to Node/#process",
            "text": "A couple of new fields is\u00a0added to\u00a0the\u00a0global  process  object:   process.versions['nwjs']  is set with NW.js's version.  process.versions['chromium']  is set with the chromium version which NW.js is based on.  process.mainModule  is set for the start page (such\u00a0as  index.html ) as\u00a0specified in\u00a0the\u00a0manifest's  main  field. However, when the  node-main  field is\u00a0also specified in\u00a0the\u00a0manifest,  process.mainModule  points to\u00a0the\u00a0file specified in\u00a0the  node-main  field.",
            "title": "process"
        },
        {
            "location": "/References/Changes to Node/#require",
            "text": "Behaviour of relative paths in Node's  require()  method depends on the  JavaScript context  in which the parent file is running in. (where \"the\u00a0parent file\" is the\u00a0file in\u00a0which the  require()  method is\u00a0called):   If the parent file is running in Node context, the\u00a0child's relative\u00a0path is\u00a0treated as\u00a0relative to\u00a0its\u00a0parent.  If the parent file is\u00a0running in browser context, the\u00a0child's relative\u00a0path is\u00a0treated as\u00a0relative to\u00a0the\u00a0application's root\u00a0directory, i.e. the directory of manifest file.",
            "title": "require"
        },
        {
            "location": "/References/Clipboard/",
            "text": "Clipboard {: .doctitle}\n\n\n\n\n\n\n\n\nClipboard {: .doctitle}\n\n\nSynopsis\n\n\nClipboard.get()\n\n\nclip.set(data, [type])\n\n\nclip.get([type])\n\n\nclip.clear()\n\n\n\n\n\n\n\n\n\n\nClipboard\n is an abstraction of clipboard for Windows, Linux and Mac.\n\n\nSynopsis\n\n\n// get the system clipboard\nvar clipboard = nw.Clipboard.get();\n\n// Read from clipboard\nvar text = clipboard.get('text');\nconsole.log(text);\n\n// Or write something\nclipboard.set('I love NW.js :)', 'text');\n\n// And clear it!\nclipboard.clear();\n\n\n\n\nClipboard.get()\n\n\n\n\nReturns \n{Clipboard}\n the clipboard object\n\n\n\n\n!!! note\n    The Selection Clipboard in X11 is not supported.\n\n\nclip.set(data, [type])\n\n\n\n\ndata\n \n{String}\n the data to write to the clipboard\n\n\ntype\n \n{String}\n \nOptional\n the type of the data. Currently only \n\"text\"\n (plain text) is support. By default, \ntype\n is set to \n\"text\"\n.\n\n\n\n\nWrite \ndata\n of \ntype\n to the clipboard.\n\n\nclip.get([type])\n\n\n\n\ntype\n \n{String}\n \nOptional\n the type of the data. Currently only \n\"text\"\n (plain text) is support. By default, \ntype\n is set to \n\"text\"\n.\n\n\nReturns \n{String}\n the data retrieved from the clipboard\n\n\n\n\nGet the data of \ntype\n from clipboard.\n\n\nclip.clear()\n\n\nClear the clipboard.",
            "title": "Clipboard"
        },
        {
            "location": "/References/Clipboard/#clipboard-doctitle",
            "text": "Clipboard {: .doctitle}  Synopsis  Clipboard.get()  clip.set(data, [type])  clip.get([type])  clip.clear()      Clipboard  is an abstraction of clipboard for Windows, Linux and Mac.",
            "title": "Clipboard {: .doctitle}"
        },
        {
            "location": "/References/Clipboard/#synopsis",
            "text": "// get the system clipboard\nvar clipboard = nw.Clipboard.get();\n\n// Read from clipboard\nvar text = clipboard.get('text');\nconsole.log(text);\n\n// Or write something\nclipboard.set('I love NW.js :)', 'text');\n\n// And clear it!\nclipboard.clear();",
            "title": "Synopsis"
        },
        {
            "location": "/References/Clipboard/#clipboardget",
            "text": "Returns  {Clipboard}  the clipboard object   !!! note\n    The Selection Clipboard in X11 is not supported.",
            "title": "Clipboard.get()"
        },
        {
            "location": "/References/Clipboard/#clipsetdata-type",
            "text": "data   {String}  the data to write to the clipboard  type   {String}   Optional  the type of the data. Currently only  \"text\"  (plain text) is support. By default,  type  is set to  \"text\" .   Write  data  of  type  to the clipboard.",
            "title": "clip.set(data, [type])"
        },
        {
            "location": "/References/Clipboard/#clipgettype",
            "text": "type   {String}   Optional  the type of the data. Currently only  \"text\"  (plain text) is support. By default,  type  is set to  \"text\" .  Returns  {String}  the data retrieved from the clipboard   Get the data of  type  from clipboard.",
            "title": "clip.get([type])"
        },
        {
            "location": "/References/Clipboard/#clipclear",
            "text": "Clear the clipboard.",
            "title": "clip.clear()"
        },
        {
            "location": "/References/Command Line Options/",
            "text": "Command Line Options {: .doctitle}\n\n\n\n\n\n\n\n\nCommand Line Options {: .doctitle}\n\n\n--mixed-context\n\n\n--nwapp\n\n\n--data-path\n\n\n--enable-transparent-visuals\n\n\n--disable-transparency\n\n\n--disable-gpu\n\n\n--force-cpu-draw\n\n\nOther Chromium Options\n\n\n\n\n\n\n\n\n\n\nYou use following command line options when starting NW.js to change some default behaviors.\n\n\n--mixed-context\n\n\nRun NW.js in \nMixed Context Mode\n instead of Separate Context Mode.\n\n\n--nwapp\n\n\nAn alternative way to specify the path of the app. This parameter is especially useful when \ntesting with ChromeDriver\n.\n\n\n--data-path\n\n\nSpecify the data directory for your app, which contains the stored data, caches and crash dumps etc. By default the data directory is in following directories according to your platform:\n\n\n\n\nWindows: \n%LOCALAPPDATA%/<name-in-manifest>/\n\n\nMac: \n~/Library/Application Support/<name-in-manifest>/\n\n\nLinux: \n~/.config/<name-in-manifest>\n\n\n\n\nWhere \n<name-in-manifest>\n is the \nname\n field in manifest\n.\n\n\n--enable-transparent-visuals\n\n\n--disable-transparency\n\n\n--disable-gpu\n\n\n--force-cpu-draw\n\n\nThese options are related to the transparent window feature. See \nTransparent Window\n for details.\n\n\nOther Chromium Options\n\n\nYou can also use Chromium options listed in https://github.com/nwjs/chromium.src/blob/nw13/chrome/common/chrome_switches.cc.\n\n\nThese options can be put into \nchromium-args\n in manifest\n to get NW.js running with them each time.",
            "title": "Command Line Options"
        },
        {
            "location": "/References/Command Line Options/#command-line-options-doctitle",
            "text": "Command Line Options {: .doctitle}  --mixed-context  --nwapp  --data-path  --enable-transparent-visuals  --disable-transparency  --disable-gpu  --force-cpu-draw  Other Chromium Options      You use following command line options when starting NW.js to change some default behaviors.",
            "title": "Command Line Options {: .doctitle}"
        },
        {
            "location": "/References/Command Line Options/#-mixed-context",
            "text": "Run NW.js in  Mixed Context Mode  instead of Separate Context Mode.",
            "title": "--mixed-context"
        },
        {
            "location": "/References/Command Line Options/#-nwapp",
            "text": "An alternative way to specify the path of the app. This parameter is especially useful when  testing with ChromeDriver .",
            "title": "--nwapp"
        },
        {
            "location": "/References/Command Line Options/#-data-path",
            "text": "Specify the data directory for your app, which contains the stored data, caches and crash dumps etc. By default the data directory is in following directories according to your platform:   Windows:  %LOCALAPPDATA%/<name-in-manifest>/  Mac:  ~/Library/Application Support/<name-in-manifest>/  Linux:  ~/.config/<name-in-manifest>   Where  <name-in-manifest>  is the  name  field in manifest .",
            "title": "--data-path"
        },
        {
            "location": "/References/Command Line Options/#-enable-transparent-visuals",
            "text": "",
            "title": "--enable-transparent-visuals"
        },
        {
            "location": "/References/Command Line Options/#-disable-transparency",
            "text": "",
            "title": "--disable-transparency"
        },
        {
            "location": "/References/Command Line Options/#-disable-gpu",
            "text": "",
            "title": "--disable-gpu"
        },
        {
            "location": "/References/Command Line Options/#-force-cpu-draw",
            "text": "These options are related to the transparent window feature. See  Transparent Window  for details.",
            "title": "--force-cpu-draw"
        },
        {
            "location": "/References/Command Line Options/#other-chromium-options",
            "text": "You can also use Chromium options listed in https://github.com/nwjs/chromium.src/blob/nw13/chrome/common/chrome_switches.cc.  These options can be put into  chromium-args  in manifest  to get NW.js running with them each time.",
            "title": "Other Chromium Options"
        },
        {
            "location": "/References/Manifest Format/",
            "text": "Manifest Format {: .doctitle}\n\n\n\n\n\n\n\n\nManifest Format {: .doctitle}\n\n\nQuick Start\n\n\nRequired Fields\n\n\nmain\n\n\nname\n\n\n\n\n\n\nFeatures Control Fields\n\n\nnodejs\n\n\nnode-main\n\n\nsingle-instance\n\n\nbg-script\n\n\nwindow\n\n\nwebkit\n\n\nuser-agent\n\n\nnode-remote\n\n\nchromium-args\n\n\njs-flags\n\n\ninject-js-start\n\n\ninject-js-end\n\n\nadditional_trust_anchors\n\n\ndom_storage_quota\n\n\nno-edit-menu (Mac)\n\n\n\n\n\n\nWindow Subfields\n\n\ntitle\n\n\nwidth\n\n\nheight\n\n\ntoolbar\n\n\nicon\n\n\nposition\n\n\nmin_width\n\n\nmin_height\n\n\nmax_width\n\n\nmax_height\n\n\nas_desktop (Linux)\n\n\nresizable\n\n\nalways_on_top\n\n\nvisible_on_all_workspaces (Mac & Linux)\n\n\nfullscreen\n\n\nshow_in_taskbar\n\n\nframe\n\n\nshow\n\n\nkiosk\n\n\ntransparent\n\n\n\n\n\n\nWebKit Subfields\n\n\nplugin\n\n\njava\n\n\npage-cache\n\n\n\n\n\n\nOther Fields\n\n\n\n\n\n\n\n\n\n\nEvery app package should contain a manifest file named \npackage.json\n in the format of \nJSON\n. This document will help you understand the meaning of each field of the manifest.\n\n\nQuick Start\n\n\nFollowing is a minimal manifest:\n\n\n{\n  \"main\": \"index.html\",\n  \"name\": \"nw-demo\",\n}\n\n\n\n\nYou only need at least these two fields to start with an NW.js app. Here is the quick explanation of them:\n\n\n\n\nmain\n: tell NW.js to open \nindex.html\n in the same folder as \npackage.json\n at start\n\n\nname\n: gives the application a unique name called \nnw-demo\n\n\n\n\nRequired Fields\n\n\nEach package must provide all the following fields in its package descriptor file.\n\n\nmain\n\n\n\n\n{String}\n which page should be opened when NW.js starts.\n\n\n\n\nYou can specify a\u00a0URL here. You\u00a0can also specify just\u00a0a filename (such\u00a0as \nindex.html\n) or\u00a0a\u00a0path (relative to\u00a0the\u00a0directory where your \npackage.json\n resides).\n\n\nname\n\n\n\n\n{String}\n the name of the package. This must be a unique, lowercase alpha-numeric name without spaces. It may include \".\" or \"_\" or \"-\" characters. It is otherwise opaque. \n\n\n\n\nname\n should be globally unique since NW.js will store app's data under the directory named \nname\n.\n\n\nFeatures Control Fields\n\n\nFollowing fields control which features NW.js should provide and how NW.js should open the main window.\n\n\nnodejs\n\n\n\n\n{Boolean}\n set \nnodejs\n to false will disable Node support in NW.js.\n\n\n\n\nnode-main\n\n\n\n\n{String}\n Specify the path to a node.js script file. And it will be executed on startup in Node context before the first DOM window load.\n\n\n\n\nsingle-instance\n\n\n!!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Boolean}\n Specify whether to start up single instance of your app. It's set to \ntrue\n by default.\n\n\n\n\nBy default NW.js only allows one instance of your app. If you want to allow multiple instances of your app running at the same time, set this to \nfalse\n.\n\n\nbg-script\n\n\n\n\n{String}\n background script\n\n\n\n\nwindow\n\n\n\n\n{Object}\n controls how the main window looks, see \nWindow Subfields\n below.\n\n\n\n\nwebkit\n\n\n\n\n{Object}\n controls what features of WebKit should be on/off, see \nWebKit Subfields\n below.\n\n\n\n\nuser-agent\n\n\n\n\n{String}\n Override the \nUser-Agent\n header in HTTP requests made from the application.\n\n\n\n\nThe following placeholders are available to composite the user agent dynamically:\n\n\n\n\n%name\n: replaced by the \nname\n field in the manifest.\n\n\n%ver\n: replaced by the \nversion\n field in the manifest, if available.\n\n\n%nwver\n: replaced by the version of NW.js.\n\n\n%webkit_ver\n: replaced by the version of WebKit engine.\n\n\n%osinfo\n: replaced by the OS and CPU information you would see in browser's user agent string.\n\n\n\n\nnode-remote\n\n\n!!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Array}\n or \n{String}\n Enable calling Node in remote pages. The value controls for which sites this feature should be turned on. Each item in the array follows the \nmatch patterns\n used in Chrome extension.\n\n\n\n\nA match pattern is essentially a URL that begins with a permitted scheme (\nhttp\n, \nhttps\n, \nfile\n, or \nftp\n, and that can contain \n'*'\n characters. The special pattern \n<all_urls>\n matches any URL that starts with a permitted scheme. Each match pattern has 3 parts:\n\n\n\n\nscheme\n \u2014 for example, \nhttp\n or \nfile\n or \n*\n\n\nhost\n \u2014 for example, \nwww.google.com\n or \n*.google.com\n or \n*\n; if the scheme is file, there is no host part\n\n\npath\n \u2014 for example, \n/*\n, \n/foo*\n, or \n/foo/bar\n. The path must be present in a host permission, but is always treated as \n/*\n.\n\n\n\n\nHere's the basic syntax:\n\n\n<url-pattern> := <scheme>://<host><path>\n<scheme> := '*' | 'http' | 'https' | 'file' | 'ftp'\n<host> := '*' | '*.' <any char except '/' and '*'>+\n<path> := '/' <any chars>\n\n\n\n\nchromium-args\n\n\n\n\n{String}\n Specify chromium (content shell) command line arguments.\n\n\n\n\nIt will be useful if you want to distribute the app with some custom chromium args. For example, if you want to disable the GPU accelerated video display, just add \n\"chromium-args\" : \"--disable-accelerated-video\"\n. If you want to add multiple arguments, separate each two arguments by space. This field can take a number of flags in one argument as well, via enclosing them in single quotation marks.\n\n\nSee \nCommand Line Options\n for more information.\n\n\njs-flags\n\n\n\n\n{String}\n Specify the flags passed to JS engine (v8). e.g. turn on Harmony Proxies and Collections feature:\n\n\n\n\n{\n  \"name\": \"nw-demo\",\n  \"main\": \"index.html\",\n  \"js-flags\": \"--harmony_proxies --harmony_collections\"\n}\n\n\n\n\ninject-js-start\n\n\ninject-js-end\n\n\n\n\n{String}\n a local filename, relative to the application path, used to specify a JavaScript file to inject to the window.\n\n\n\n\ninject-js-start\n: The injecting JavaScript code is to be executed after any files from css, but before any other DOM is constructed or any other script is run.\n\n\ninject-js-end\n: The injecting JavaScript code is to be executed after the document object is loaded, before \nonload\n event is fired. This is mainly to be used as an option of \nWindow.open()\n to inject JS in a new window. \n\n\nadditional_trust_anchors\n\n\n\n\n{String}\n Containing a list of PEM-encoded certificates (i.e. \n\"-----BEGIN CERTIFICATE-----\\n...certificate data...\\n-----END CERTIFICATE-----\\n\"\n).\n\n\n\n\nThese certificates are used as additional root certificates for validation, to allow connecting to services using a self-signed certificate or certificates issued by custom CAs.\n\n\ndom_storage_quota\n\n\n\n\n{Integer}\n Number of mega bytes (MB) for the quota of the DOM storage. The suggestion is to put double the value you want.\n\n\n\n\nno-edit-menu (Mac)\n\n\n!!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Boolean}\n whether the default \nEdit\n menu should be disabled on Mac OS X. The default value is \nfalse\n. Only effective on Mac OS X.\n\n\n\n\nWindow Subfields\n\n\ntitle\n\n\n\n\n{String}\n the default title of window created by NW.js, it's very useful if you want to show your own title when the app is starting.\n\n\n\n\nwidth\n\n\nheight\n\n\n\n\n{Integer}\n the initial width/height of the main window.\n\n\n\n\ntoolbar\n\n\n!!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Boolean}\n should the navigation toolbar be showed.\n\n\n\n\nicon\n\n\n\n\n{String}\n path to window's icon\n\n\n\n\nposition\n\n\n\n\n{String}\n be \nnull\n or \ncenter\n or \nmouse\n, controls where window will be put\n\n\n\n\nmin_width\n\n\nmin_height\n\n\n\n\n{Integer}\n minimum width/height of window\n\n\n\n\nmax_width\n\n\nmax_height\n\n\n\n\n{Integer}\n maximum width/height of window\n\n\n\n\nas_desktop (Linux)\n\n\n\n\n{Boolean}\n show as desktop background window under X11 environment\n\n\n\n\nresizable\n\n\n\n\n{Boolean}\n whether window is resizable\n\n\n\n\nBeware, if resizable is set to false on OS X and frame is set to true, the user will still be able to make the window fullscreen. Set fullscreen to false to disable the fullscreen control.\n\n\nalways_on_top\n\n\n!!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Boolean}\n whether the window should always stay on top of other windows.\n\n\n\n\nvisible_on_all_workspaces (Mac & Linux)\n\n\n!!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\n{Boolean}\n whether the window should be visible on all workspaces simultaneously (on platforms that support multiple workspaces, currently Mac OS X and Linux).\n\n\n\n\nfullscreen\n\n\n\n\n{Boolean}\n whether window is fullscreen\n\n\n\n\nBeware, if frame is also set to false in fullscreen it will prevent the mouse from being captured on the very edges of the screen. You should avoid activate it if fullscreen is also set to true.\n\n\nshow_in_taskbar\n\n\n\n\n{Boolean}\n whether the window is shown in taskbar or dock. The default is \ntrue\n. \n\n\n\n\nframe\n\n\n\n\n{Boolean}\n specify it to \nfalse\n to make the window frameless \n\n\n\n\nBeware, if frame is set to false in fullscreen it will prevent the mouse from being captured on the very edges of the screen. You should avoid activate it if fullscreen is also set to true.\n\n\nshow\n\n\n\n\n{Boolean}\n specify it to \nfalse\n if you want your app to be hidden on startup \n\n\n\n\nkiosk\n\n\n\n\n{Boolean}\n whether to use \nKiosk\n mode. In \nKiosk\n mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave \nKiosk\n mode. This mode is mainly used for presentation on public displays\n\n\n\n\ntransparent\n\n\n\n\n{Boolean}\n whether to turn on transparent window mode. The default is \nfalse\n.   \n\n\n\n\nControl the transparency with rgba background value in CSS. Use command line option \n--disable-transparency\n to disable this feature completely.\n\n\nThere is experimental support for \"click-through\" on the transparent region: add \n--disable-gpu\n option to the command line.\n\n\nWebKit Subfields\n\n\nplugin\n\n\n\n\n{Boolean}\n whether to load external browser plugins like Flash, default to false.\n\n\n\n\njava\n\n\n\n\n{Boolean}\n whether to load Java applets, default to false.\n\n\n\n\npage-cache\n\n\n\n\n{Boolean}\n whether to enable page cache, default to false.\n\n\n\n\nOther Fields\n\n\nThe \nPackages/1.0\n standard specifies many other fields \npackage.json\n should provide. Currently we don't make use of them, but you provide them still.",
            "title": "Manifest Format"
        },
        {
            "location": "/References/Manifest Format/#manifest-format-doctitle",
            "text": "Manifest Format {: .doctitle}  Quick Start  Required Fields  main  name    Features Control Fields  nodejs  node-main  single-instance  bg-script  window  webkit  user-agent  node-remote  chromium-args  js-flags  inject-js-start  inject-js-end  additional_trust_anchors  dom_storage_quota  no-edit-menu (Mac)    Window Subfields  title  width  height  toolbar  icon  position  min_width  min_height  max_width  max_height  as_desktop (Linux)  resizable  always_on_top  visible_on_all_workspaces (Mac & Linux)  fullscreen  show_in_taskbar  frame  show  kiosk  transparent    WebKit Subfields  plugin  java  page-cache    Other Fields      Every app package should contain a manifest file named  package.json  in the format of  JSON . This document will help you understand the meaning of each field of the manifest.",
            "title": "Manifest Format {: .doctitle}"
        },
        {
            "location": "/References/Manifest Format/#quick-start",
            "text": "Following is a minimal manifest:  {\n  \"main\": \"index.html\",\n  \"name\": \"nw-demo\",\n}  You only need at least these two fields to start with an NW.js app. Here is the quick explanation of them:   main : tell NW.js to open  index.html  in the same folder as  package.json  at start  name : gives the application a unique name called  nw-demo",
            "title": "Quick Start"
        },
        {
            "location": "/References/Manifest Format/#required-fields",
            "text": "Each package must provide all the following fields in its package descriptor file.  main   {String}  which page should be opened when NW.js starts.   You can specify a\u00a0URL here. You\u00a0can also specify just\u00a0a filename (such\u00a0as  index.html ) or\u00a0a\u00a0path (relative to\u00a0the\u00a0directory where your  package.json  resides).  name   {String}  the name of the package. This must be a unique, lowercase alpha-numeric name without spaces. It may include \".\" or \"_\" or \"-\" characters. It is otherwise opaque.    name  should be globally unique since NW.js will store app's data under the directory named  name .",
            "title": "Required Fields"
        },
        {
            "location": "/References/Manifest Format/#features-control-fields",
            "text": "Following fields control which features NW.js should provide and how NW.js should open the main window.  nodejs   {Boolean}  set  nodejs  to false will disable Node support in NW.js.   node-main   {String}  Specify the path to a node.js script file. And it will be executed on startup in Node context before the first DOM window load.   single-instance  !!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Boolean}  Specify whether to start up single instance of your app. It's set to  true  by default.   By default NW.js only allows one instance of your app. If you want to allow multiple instances of your app running at the same time, set this to  false .  bg-script   {String}  background script   window   {Object}  controls how the main window looks, see  Window Subfields  below.   webkit   {Object}  controls what features of WebKit should be on/off, see  WebKit Subfields  below.   user-agent   {String}  Override the  User-Agent  header in HTTP requests made from the application.   The following placeholders are available to composite the user agent dynamically:   %name : replaced by the  name  field in the manifest.  %ver : replaced by the  version  field in the manifest, if available.  %nwver : replaced by the version of NW.js.  %webkit_ver : replaced by the version of WebKit engine.  %osinfo : replaced by the OS and CPU information you would see in browser's user agent string.   node-remote  !!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Array}  or  {String}  Enable calling Node in remote pages. The value controls for which sites this feature should be turned on. Each item in the array follows the  match patterns  used in Chrome extension.   A match pattern is essentially a URL that begins with a permitted scheme ( http ,  https ,  file , or  ftp , and that can contain  '*'  characters. The special pattern  <all_urls>  matches any URL that starts with a permitted scheme. Each match pattern has 3 parts:   scheme  \u2014 for example,  http  or  file  or  *  host  \u2014 for example,  www.google.com  or  *.google.com  or  * ; if the scheme is file, there is no host part  path  \u2014 for example,  /* ,  /foo* , or  /foo/bar . The path must be present in a host permission, but is always treated as  /* .   Here's the basic syntax:  <url-pattern> := <scheme>://<host><path>\n<scheme> := '*' | 'http' | 'https' | 'file' | 'ftp'\n<host> := '*' | '*.' <any char except '/' and '*'>+\n<path> := '/' <any chars>  chromium-args   {String}  Specify chromium (content shell) command line arguments.   It will be useful if you want to distribute the app with some custom chromium args. For example, if you want to disable the GPU accelerated video display, just add  \"chromium-args\" : \"--disable-accelerated-video\" . If you want to add multiple arguments, separate each two arguments by space. This field can take a number of flags in one argument as well, via enclosing them in single quotation marks.  See  Command Line Options  for more information.  js-flags   {String}  Specify the flags passed to JS engine (v8). e.g. turn on Harmony Proxies and Collections feature:   {\n  \"name\": \"nw-demo\",\n  \"main\": \"index.html\",\n  \"js-flags\": \"--harmony_proxies --harmony_collections\"\n}  inject-js-start  inject-js-end   {String}  a local filename, relative to the application path, used to specify a JavaScript file to inject to the window.   inject-js-start : The injecting JavaScript code is to be executed after any files from css, but before any other DOM is constructed or any other script is run.  inject-js-end : The injecting JavaScript code is to be executed after the document object is loaded, before  onload  event is fired. This is mainly to be used as an option of  Window.open()  to inject JS in a new window.   additional_trust_anchors   {String}  Containing a list of PEM-encoded certificates (i.e.  \"-----BEGIN CERTIFICATE-----\\n...certificate data...\\n-----END CERTIFICATE-----\\n\" ).   These certificates are used as additional root certificates for validation, to allow connecting to services using a self-signed certificate or certificates issued by custom CAs.  dom_storage_quota   {Integer}  Number of mega bytes (MB) for the quota of the DOM storage. The suggestion is to put double the value you want.   no-edit-menu (Mac)  !!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Boolean}  whether the default  Edit  menu should be disabled on Mac OS X. The default value is  false . Only effective on Mac OS X.",
            "title": "Features Control Fields"
        },
        {
            "location": "/References/Manifest Format/#window-subfields",
            "text": "title   {String}  the default title of window created by NW.js, it's very useful if you want to show your own title when the app is starting.   width  height   {Integer}  the initial width/height of the main window.   toolbar  !!! warning \"Deprecated\"\n    This property is deprecated since 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Boolean}  should the navigation toolbar be showed.   icon   {String}  path to window's icon   position   {String}  be  null  or  center  or  mouse , controls where window will be put   min_width  min_height   {Integer}  minimum width/height of window   max_width  max_height   {Integer}  maximum width/height of window   as_desktop (Linux)   {Boolean}  show as desktop background window under X11 environment   resizable   {Boolean}  whether window is resizable   Beware, if resizable is set to false on OS X and frame is set to true, the user will still be able to make the window fullscreen. Set fullscreen to false to disable the fullscreen control.  always_on_top  !!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Boolean}  whether the window should always stay on top of other windows.   visible_on_all_workspaces (Mac & Linux)  !!! warning \"Behavior Changed\"\n    This feature is changed in 0.13.0. See  Migration Notes from 0.12 to 0.13 .   {Boolean}  whether the window should be visible on all workspaces simultaneously (on platforms that support multiple workspaces, currently Mac OS X and Linux).   fullscreen   {Boolean}  whether window is fullscreen   Beware, if frame is also set to false in fullscreen it will prevent the mouse from being captured on the very edges of the screen. You should avoid activate it if fullscreen is also set to true.  show_in_taskbar   {Boolean}  whether the window is shown in taskbar or dock. The default is  true .    frame   {Boolean}  specify it to  false  to make the window frameless    Beware, if frame is set to false in fullscreen it will prevent the mouse from being captured on the very edges of the screen. You should avoid activate it if fullscreen is also set to true.  show   {Boolean}  specify it to  false  if you want your app to be hidden on startup    kiosk   {Boolean}  whether to use  Kiosk  mode. In  Kiosk  mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave  Kiosk  mode. This mode is mainly used for presentation on public displays   transparent   {Boolean}  whether to turn on transparent window mode. The default is  false .      Control the transparency with rgba background value in CSS. Use command line option  --disable-transparency  to disable this feature completely.  There is experimental support for \"click-through\" on the transparent region: add  --disable-gpu  option to the command line.",
            "title": "Window Subfields"
        },
        {
            "location": "/References/Manifest Format/#webkit-subfields",
            "text": "plugin   {Boolean}  whether to load external browser plugins like Flash, default to false.   java   {Boolean}  whether to load Java applets, default to false.   page-cache   {Boolean}  whether to enable page cache, default to false.",
            "title": "WebKit Subfields"
        },
        {
            "location": "/References/Manifest Format/#other-fields",
            "text": "The  Packages/1.0  standard specifies many other fields  package.json  should provide. Currently we don't make use of them, but you provide them still.",
            "title": "Other Fields"
        },
        {
            "location": "/References/Menu/",
            "text": "Menu {: .doctitle}\n\n\n\n\n\n\n\n\nMenu {: .doctitle}\n\n\nSynopsis\n\n\nnew Menu([option])\n\n\nmenu.items\n\n\nmenu.append(item)\n\n\nmenu.insert(item, i)\n\n\nmenu.remove(item)\n\n\nmenu.removeAt(i)\n\n\nmenu.popup(x, y)\n\n\nmenu.createMacBuiltin(appname, [options]) (Mac)\n\n\n\n\n\n\n\n\n\n\nMenu\n represents a menubar or a context menu. And \nMenuItem\n is item inside a menu. Please read the document of \nMenuItem\n for more details.\n\n\nSynopsis\n\n\nAn example to create a context menu:\n\n\n// Create an empty context menu\nvar menu = new nw.Menu();\n\n// Add some items\nmenu.append(new nw.MenuItem({ label: 'Item A' }));\nmenu.append(new nw.MenuItem({ label: 'Item B' }));\nmenu.append(new nw.MenuItem({ type: 'separator' }));\nmenu.append(new nw.MenuItem({ label: 'Item C' }));\n\n// Remove one item\nmenu.removeAt(1);\n\n// Popup as context menu\nmenu.popup(10, 10);\n\n// Iterate menu's items\nfor (var i = 0; i < menu.items.length; ++i) {\n  console.log(menu.items[i]);\n}\n\n\n\n\nTo create a menubar, usually you have to create a 2-level menu and assign it to \nwindow.menu\n. Here is the example of creating a menubar:\n\n\n// Create an empty menubar\nvar menu = new nw.Menu({type: 'menubar'});\n\n// Create a submenu as the 2nd level menu\nvar submenu = new nw.Menu();\nsubmenu.append(new nw.MenuItem({ label: 'Item A' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item B' }));\n\n// Create and append the 1st level menu to the menubar\nmenu.append(new nw.MenuItem({\n  label: 'First Menu',\n  submenu: submenu\n}));\n\n// Assign it to `window.menu` to get the menu displayed\nnw.Window.get().menu = menu;\n\n\n\n\nnew Menu([option])\n\n\n\n\noption\n \n{Object}\n \nOptional\n\n\ntype\n \n{String}\n \nOptional\n two types are accepted by this method: \"menubar\" or \"contextmenu\". The value is set to \"contextmenu\" by default.\n\n\n\n\n\n\n\n\nCreate a \nMenu\n object.\n\n\nmenu.items\n\n\nGet an array that contains all items of a menu. Each item is an instance of \nMenuItem\n. See \nMenuItem\n for detailed information.\n\n\nmenu.append(item)\n\n\n\n\nitem\n \n{MenuItem}\n the item to be appended to the tail of the menu\n\n\n\n\nAppend \nitem\n to the tail of the menu.\n\n\nmenu.insert(item, i)\n\n\n\n\nitem\n \n{MenuItem}\n the item to be inserted into the menu\n\n\ni\n \n{Integer}\n the index in the menu list to insert the the item\n\n\n\n\nInsert the \nitem\n at \ni\nth position of the menu. The index is started from 0.\n\n\nmenu.remove(item)\n\n\n\n\nitem\n \n{MenuItem}\n the item to be removed\n\n\n\n\nRemove \nitem\n from the menu. This method requires you to keep the \nMenuItem\n outside the \nMenu\n.\n\n\nmenu.removeAt(i)\n\n\n\n\ni\n \n{Integer}\n the index of the item to be removed from the menu\n\n\n\n\nRemove the \ni\nth item form the menu.\n\n\nmenu.popup(x, y)\n\n\n\n\nx\n \n{Integer}\n the x position of the anchor\n\n\ny\n \n{Integer}\n the y position of the anchor\n\n\n\n\nPopup the context menu at the anchor in (\nx\n, \ny\n) in current window. This method is only valid for \ncontextmenu\n type.\n\n\nUsually you would listen to \ncontextmenu\n event of DOM elements and manually popup the menu:\n\n\ndocument.body.addEventListener('contextmenu', function(ev) { \n  ev.preventDefault();\n  menu.popup(ev.x, ev.y);\n  return false;\n});\n\n\n\n\nIn this way, you can precisely choose which menu to show for different elements, and you can update menu elements just before popuping it.\n\n\nmenu.createMacBuiltin(appname, [options]) (Mac)\n\n\n\n\nappname\n \n{String}\n The application name\n\n\noptions\n \n{Object}\n \nOptional\n\n\nhideEdit\n \n{Boolean}\n \nOptional\n do not populate the Edit menu\n\n\nhideWindow\n \n{Boolean}\n \nOptional\n do not populate the Window menu\n\n\n\n\n\n\n\n\nCreates the builtin menus (App, Edit and Window) within the menubar on Mac. The items can be manipulated with the \nitems\n property. The argument \nappname\n is used for the title of App menu.\n\n\nYou can still use builtin menus with other menu items. i.e. append or insert items to the menu is still valid.",
            "title": "Menu"
        },
        {
            "location": "/References/Menu/#menu-doctitle",
            "text": "Menu {: .doctitle}  Synopsis  new Menu([option])  menu.items  menu.append(item)  menu.insert(item, i)  menu.remove(item)  menu.removeAt(i)  menu.popup(x, y)  menu.createMacBuiltin(appname, [options]) (Mac)      Menu  represents a menubar or a context menu. And  MenuItem  is item inside a menu. Please read the document of  MenuItem  for more details.",
            "title": "Menu {: .doctitle}"
        },
        {
            "location": "/References/Menu/#synopsis",
            "text": "An example to create a context menu:  // Create an empty context menu\nvar menu = new nw.Menu();\n\n// Add some items\nmenu.append(new nw.MenuItem({ label: 'Item A' }));\nmenu.append(new nw.MenuItem({ label: 'Item B' }));\nmenu.append(new nw.MenuItem({ type: 'separator' }));\nmenu.append(new nw.MenuItem({ label: 'Item C' }));\n\n// Remove one item\nmenu.removeAt(1);\n\n// Popup as context menu\nmenu.popup(10, 10);\n\n// Iterate menu's items\nfor (var i = 0; i < menu.items.length; ++i) {\n  console.log(menu.items[i]);\n}  To create a menubar, usually you have to create a 2-level menu and assign it to  window.menu . Here is the example of creating a menubar:  // Create an empty menubar\nvar menu = new nw.Menu({type: 'menubar'});\n\n// Create a submenu as the 2nd level menu\nvar submenu = new nw.Menu();\nsubmenu.append(new nw.MenuItem({ label: 'Item A' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item B' }));\n\n// Create and append the 1st level menu to the menubar\nmenu.append(new nw.MenuItem({\n  label: 'First Menu',\n  submenu: submenu\n}));\n\n// Assign it to `window.menu` to get the menu displayed\nnw.Window.get().menu = menu;",
            "title": "Synopsis"
        },
        {
            "location": "/References/Menu/#new-menuoption",
            "text": "option   {Object}   Optional  type   {String}   Optional  two types are accepted by this method: \"menubar\" or \"contextmenu\". The value is set to \"contextmenu\" by default.     Create a  Menu  object.",
            "title": "new Menu([option])"
        },
        {
            "location": "/References/Menu/#menuitems",
            "text": "Get an array that contains all items of a menu. Each item is an instance of  MenuItem . See  MenuItem  for detailed information.",
            "title": "menu.items"
        },
        {
            "location": "/References/Menu/#menuappenditem",
            "text": "item   {MenuItem}  the item to be appended to the tail of the menu   Append  item  to the tail of the menu.",
            "title": "menu.append(item)"
        },
        {
            "location": "/References/Menu/#menuinsertitem-i",
            "text": "item   {MenuItem}  the item to be inserted into the menu  i   {Integer}  the index in the menu list to insert the the item   Insert the  item  at  i th position of the menu. The index is started from 0.",
            "title": "menu.insert(item, i)"
        },
        {
            "location": "/References/Menu/#menuremoveitem",
            "text": "item   {MenuItem}  the item to be removed   Remove  item  from the menu. This method requires you to keep the  MenuItem  outside the  Menu .",
            "title": "menu.remove(item)"
        },
        {
            "location": "/References/Menu/#menuremoveati",
            "text": "i   {Integer}  the index of the item to be removed from the menu   Remove the  i th item form the menu.",
            "title": "menu.removeAt(i)"
        },
        {
            "location": "/References/Menu/#menupopupx-y",
            "text": "x   {Integer}  the x position of the anchor  y   {Integer}  the y position of the anchor   Popup the context menu at the anchor in ( x ,  y ) in current window. This method is only valid for  contextmenu  type.  Usually you would listen to  contextmenu  event of DOM elements and manually popup the menu:  document.body.addEventListener('contextmenu', function(ev) { \n  ev.preventDefault();\n  menu.popup(ev.x, ev.y);\n  return false;\n});  In this way, you can precisely choose which menu to show for different elements, and you can update menu elements just before popuping it.",
            "title": "menu.popup(x, y)"
        },
        {
            "location": "/References/Menu/#menucreatemacbuiltinappname-options-mac",
            "text": "appname   {String}  The application name  options   {Object}   Optional  hideEdit   {Boolean}   Optional  do not populate the Edit menu  hideWindow   {Boolean}   Optional  do not populate the Window menu     Creates the builtin menus (App, Edit and Window) within the menubar on Mac. The items can be manipulated with the  items  property. The argument  appname  is used for the title of App menu.  You can still use builtin menus with other menu items. i.e. append or insert items to the menu is still valid.",
            "title": "menu.createMacBuiltin(appname, [options]) (Mac)"
        },
        {
            "location": "/References/MenuItem/",
            "text": "MenuItem {: .doctitle}\n\n\n\n\n\n\n\n\nMenuItem {: .doctitle}\n\n\nSynopsis\n\n\nnew MenuItem(option)\n\n\nitem.type\n\n\nitem.label\n\n\nitem.icon\n\n\nitem.iconIsTemplate (Mac)\n\n\nitem.tooltip (Mac)\n\n\nitem.checked\n\n\nitem.enabled\n\n\nitem.submenu\n\n\nitem.click\n\n\nitem.key\n\n\nValid Keys for All Platfroms\n\n\nSpecial Keys for Mac Only\n\n\n\n\n\n\nitem.modifiers\n\n\nEvent: click\n\n\n\n\n\n\n\n\n\n\nMenuItem\n represents an item in a menu. A \nMenuItem\n can be a separator or a normal item which has label and icon or a checkbox. It can response to mouse click or keyboard shortcut.\n\n\nSynopsis\n\n\nvar item;\n\n// Create a separator\nitem = new nw.MenuItem({ type: 'separator' });\n\n// Create a normal item with label and icon\nitem = new nw.MenuItem({\n  type: \"normal\", \n  label: \"I'm a menu item\",\n  icon: \"img/icon.png\"\n});\n\n// Or you can omit the 'type' field for normal items\nitem = new nw.MenuItem({ label: 'Simple item' });\n\n// Bind a callback to item\nitem = new nw.MenuItem({\n  label: \"Click me\",\n  click: function() {\n    console.log(\"I'm clicked\");\n  },\n  key: \"s\",\n  modifiers: \"ctrl+alt\",\n});\n\n// You can have submenu!\nvar submenu = new nw.Menu();\nsubmenu.append(new nw.MenuItem({ label: 'Item 1' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item 2' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item 3' }));\nitem.submenu = submenu;\n\n// And everything can be changed at runtime\nitem.label = 'New label';\nitem.click = function() { console.log('New click callback'); };\n\n\n\n\nnew MenuItem(option)\n\n\n\n\noption\n \n{Object}\n an object contains initial settings for the \nMenuItem\n\n\nlabel\n \n{String}\n \nOptional\n label for normal item or checkbox\n\n\nicon\n \n{String}\n \nOptional\n icon for normal item or checkbox\n\n\ntooltip\n \n{String}\n \nOptional\n tooltip for normal item or checkbox\n\n\ntype\n \n{String}\n \nOptional\n the type of the item. Three types are accepted: \nnormal\n, \ncheckbox\n, \nseparator\n\n\nclick\n \n{Function}\n \nOptional\n the callback function when item is triggered by mouse click or keyboard shortcut\n\n\nenabled\n \n{Boolean}\n \nOptional\n whether the item is enabled or disabled. It's set to \ntrue\n by default.\n\n\nchecked\n \n{Boolean}\n \nOptional\n whether the checkbox is checked or not. It's set to \nfalse\n by default.\n\n\nsubmenu\n \n{Menu}\n \nOptional\n a submenu\n\n\nkey\n \n{String}\n \nOptional\n the key of the shortcut\n\n\nmodifiers\n \n{String}\n \nOptional\n the modifiers of the shortcut\n\n\n\n\n\n\n\n\nEvery field has its own property in the \nMenuItem\n, see documentation of each property for details.\n\n\nMenuItem\n is inherited from \nEventEmitter\n. You can use \non\n to listen to the events.\n\n\nitem.type\n\n\nGet the \ntype\n of a \nMenuItem\n, it can be \nseparator\n, \ncheckbox\n and \nnormal\n.\n\n\n!!! note\n    The type can be set only when you create it. It cannot be changed at runtime.\n\n\nitem.label\n\n\nGet or set the \nlabel\n of a \nMenuItem\n, it can only be plain text for now.\n\n\nitem.icon\n\n\nGet or set the \nicon\n of a \nMenuItem\n, it must a path to your icon file. It can be a relative path which points to an icon in your app, or an absolute path pointing to a file in user's system.\n\n\nIt has no effect on setting \nicon\n of a \nseparator\n item.\n\n\nitem.iconIsTemplate (Mac)\n\n\nGet or set whether \nicon\n image is treated as \"template\" (\ntrue\n by default). When the property is set to \ntrue\n the image is treated as \"template\" and the system automatically ensures proper styling according to the various states of the status item (e.g. dark menu, light menu, etc.). Template images should consist only of black and clear colours and can use the alpha channel in the image to adjust the opacity of black content. It has no effects on Linux and Windows.\n\n\nitem.tooltip (Mac)\n\n\nGet or set the \ntooltip\n of a \nMenuItem\n, it can only be plain text. A \ntooltip\n is short string that describes the menu item, it will show when you hover your mouse on the item.\n\n\nitem.checked\n\n\nGet or set whether the \nMenuItem\n is \nchecked\n. Usually if a \nMenuItem\n is checked. There will be a mark on the left side of it. It's used mostly to indicate whether an option is on.\n\n\nitem.enabled\n\n\nGet or set whether the \nMenuItem\n is \nenabled\n. An disabled \nMenuItem\n will be greyed out and you will not be able to click on it.\n\n\nitem.submenu\n\n\nGet or set the \nsubmenu\n of a \nMenuItem\n, the \nsubmenu\n must be a \nMenu\n object. You should set \nsubmenu\n in the \noption\n when creating the \nMenuItem\n. Changing it at runtime is slow on some platforms.\n\n\nitem.click\n\n\nGet or set the \nclick\n callback of a \nMenuItem\n, the \nclick\n must be a valid function. It will be called when users activate the item.\n\n\nitem.key\n\n\nA single character string to specify the shortcut key for the menu item.\n\n\nValid Keys for All Platfroms\n\n\n\n\nAlphabet: \na\n-\nz\n\n\nDigits: \n0\n-\n9\n\n\nOther keys on main area: \n[\n , \n]\n , \n'\n , \n,\n , \n.\n , \n/\n , \n`\n , \n-\n , \n=\n , \n\\\n , \n'\n , \n;\n , \nTab\n\n\nEsc\n\n\nDown\n , \nUp\n , \nLeft\n , \nRight\n\n\nW3C DOM Level 3 KeyboardEvent Key Values\n: \nKeyA\n (same as \nA\n), \nEscape\n (same as \nEsc\n), \nF1\n, \nArrowDown\n (same as \nDown\n) etc.\n\n\n\n\nSpecial Keys for Mac Only\n\n\nOn Mac, you can also use special keys as shortcut key with \nString.fromCharCode(specialKey)\n. Here are some useful keys:\n\n\n\n\n28\n: Left (\n\u2190\n)\n\n\n29\n: Right (\n\u2192\n)\n\n\n30\n: Up (\n\u2191\n)\n\n\n31\n: Down (\n\u2193\n)\n\n\n27\n: Escape (\n\u238b\n)\n\n\n11\n: PageUp (\n\u21de\n)\n\n\n12\n: PageDown (\n\u21df\n)\n\n\n\n\nFor full list of special keys supported on Mac, see \nNSMenuItem.keyEquivalent\n and \nNSEvent: Function-Key Unicodes\n.\n\n\nitem.modifiers\n\n\nA string to specify the modifier keys for the shortcut of the menu item. It should be the concatenation of the following strings: \ncmd\n / \ncommand\n / \nsuper\n, \nshift\n, \nctrl\n, \nalt\n. e.g. \n\"cmd+shift+alt\"\n.\n\n\ncmd\n represents different keys on all platforms: Windows key (\nWindows\n) on Windows and Linux, Apple key (\n\u2318\n) on Mac. \nsuper\n and \ncommand\n are aliases of \ncmd\n.\n\n\nEvent: click\n\n\nEmitted when user activates the menu item.",
            "title": "MenuItem"
        },
        {
            "location": "/References/MenuItem/#menuitem-doctitle",
            "text": "MenuItem {: .doctitle}  Synopsis  new MenuItem(option)  item.type  item.label  item.icon  item.iconIsTemplate (Mac)  item.tooltip (Mac)  item.checked  item.enabled  item.submenu  item.click  item.key  Valid Keys for All Platfroms  Special Keys for Mac Only    item.modifiers  Event: click      MenuItem  represents an item in a menu. A  MenuItem  can be a separator or a normal item which has label and icon or a checkbox. It can response to mouse click or keyboard shortcut.",
            "title": "MenuItem {: .doctitle}"
        },
        {
            "location": "/References/MenuItem/#synopsis",
            "text": "var item;\n\n// Create a separator\nitem = new nw.MenuItem({ type: 'separator' });\n\n// Create a normal item with label and icon\nitem = new nw.MenuItem({\n  type: \"normal\", \n  label: \"I'm a menu item\",\n  icon: \"img/icon.png\"\n});\n\n// Or you can omit the 'type' field for normal items\nitem = new nw.MenuItem({ label: 'Simple item' });\n\n// Bind a callback to item\nitem = new nw.MenuItem({\n  label: \"Click me\",\n  click: function() {\n    console.log(\"I'm clicked\");\n  },\n  key: \"s\",\n  modifiers: \"ctrl+alt\",\n});\n\n// You can have submenu!\nvar submenu = new nw.Menu();\nsubmenu.append(new nw.MenuItem({ label: 'Item 1' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item 2' }));\nsubmenu.append(new nw.MenuItem({ label: 'Item 3' }));\nitem.submenu = submenu;\n\n// And everything can be changed at runtime\nitem.label = 'New label';\nitem.click = function() { console.log('New click callback'); };",
            "title": "Synopsis"
        },
        {
            "location": "/References/MenuItem/#new-menuitemoption",
            "text": "option   {Object}  an object contains initial settings for the  MenuItem  label   {String}   Optional  label for normal item or checkbox  icon   {String}   Optional  icon for normal item or checkbox  tooltip   {String}   Optional  tooltip for normal item or checkbox  type   {String}   Optional  the type of the item. Three types are accepted:  normal ,  checkbox ,  separator  click   {Function}   Optional  the callback function when item is triggered by mouse click or keyboard shortcut  enabled   {Boolean}   Optional  whether the item is enabled or disabled. It's set to  true  by default.  checked   {Boolean}   Optional  whether the checkbox is checked or not. It's set to  false  by default.  submenu   {Menu}   Optional  a submenu  key   {String}   Optional  the key of the shortcut  modifiers   {String}   Optional  the modifiers of the shortcut     Every field has its own property in the  MenuItem , see documentation of each property for details.  MenuItem  is inherited from  EventEmitter . You can use  on  to listen to the events.",
            "title": "new MenuItem(option)"
        },
        {
            "location": "/References/MenuItem/#itemtype",
            "text": "Get the  type  of a  MenuItem , it can be  separator ,  checkbox  and  normal .  !!! note\n    The type can be set only when you create it. It cannot be changed at runtime.",
            "title": "item.type"
        },
        {
            "location": "/References/MenuItem/#itemlabel",
            "text": "Get or set the  label  of a  MenuItem , it can only be plain text for now.",
            "title": "item.label"
        },
        {
            "location": "/References/MenuItem/#itemicon",
            "text": "Get or set the  icon  of a  MenuItem , it must a path to your icon file. It can be a relative path which points to an icon in your app, or an absolute path pointing to a file in user's system.  It has no effect on setting  icon  of a  separator  item.",
            "title": "item.icon"
        },
        {
            "location": "/References/MenuItem/#itemiconistemplate-mac",
            "text": "Get or set whether  icon  image is treated as \"template\" ( true  by default). When the property is set to  true  the image is treated as \"template\" and the system automatically ensures proper styling according to the various states of the status item (e.g. dark menu, light menu, etc.). Template images should consist only of black and clear colours and can use the alpha channel in the image to adjust the opacity of black content. It has no effects on Linux and Windows.",
            "title": "item.iconIsTemplate (Mac)"
        },
        {
            "location": "/References/MenuItem/#itemtooltip-mac",
            "text": "Get or set the  tooltip  of a  MenuItem , it can only be plain text. A  tooltip  is short string that describes the menu item, it will show when you hover your mouse on the item.",
            "title": "item.tooltip (Mac)"
        },
        {
            "location": "/References/MenuItem/#itemchecked",
            "text": "Get or set whether the  MenuItem  is  checked . Usually if a  MenuItem  is checked. There will be a mark on the left side of it. It's used mostly to indicate whether an option is on.",
            "title": "item.checked"
        },
        {
            "location": "/References/MenuItem/#itemenabled",
            "text": "Get or set whether the  MenuItem  is  enabled . An disabled  MenuItem  will be greyed out and you will not be able to click on it.",
            "title": "item.enabled"
        },
        {
            "location": "/References/MenuItem/#itemsubmenu",
            "text": "Get or set the  submenu  of a  MenuItem , the  submenu  must be a  Menu  object. You should set  submenu  in the  option  when creating the  MenuItem . Changing it at runtime is slow on some platforms.",
            "title": "item.submenu"
        },
        {
            "location": "/References/MenuItem/#itemclick",
            "text": "Get or set the  click  callback of a  MenuItem , the  click  must be a valid function. It will be called when users activate the item.",
            "title": "item.click"
        },
        {
            "location": "/References/MenuItem/#itemkey",
            "text": "A single character string to specify the shortcut key for the menu item.  Valid Keys for All Platfroms   Alphabet:  a - z  Digits:  0 - 9  Other keys on main area:  [  ,  ]  ,  '  ,  ,  ,  .  ,  /  ,  `  ,  -  ,  =  ,  \\  ,  '  ,  ;  ,  Tab  Esc  Down  ,  Up  ,  Left  ,  Right  W3C DOM Level 3 KeyboardEvent Key Values :  KeyA  (same as  A ),  Escape  (same as  Esc ),  F1 ,  ArrowDown  (same as  Down ) etc.   Special Keys for Mac Only  On Mac, you can also use special keys as shortcut key with  String.fromCharCode(specialKey) . Here are some useful keys:   28 : Left ( \u2190 )  29 : Right ( \u2192 )  30 : Up ( \u2191 )  31 : Down ( \u2193 )  27 : Escape ( \u238b )  11 : PageUp ( \u21de )  12 : PageDown ( \u21df )   For full list of special keys supported on Mac, see  NSMenuItem.keyEquivalent  and  NSEvent: Function-Key Unicodes .",
            "title": "item.key"
        },
        {
            "location": "/References/MenuItem/#itemmodifiers",
            "text": "A string to specify the modifier keys for the shortcut of the menu item. It should be the concatenation of the following strings:  cmd  /  command  /  super ,  shift ,  ctrl ,  alt . e.g.  \"cmd+shift+alt\" .  cmd  represents different keys on all platforms: Windows key ( Windows ) on Windows and Linux, Apple key ( \u2318 ) on Mac.  super  and  command  are aliases of  cmd .",
            "title": "item.modifiers"
        },
        {
            "location": "/References/MenuItem/#event-click",
            "text": "Emitted when user activates the menu item.",
            "title": "Event: click"
        },
        {
            "location": "/References/Screen/",
            "text": "Screen {: .doctitle}\n\n\n\n\n\n\n\n\nScreen {: .doctitle}\n\n\nSynopsis\n\n\nScreen.Init()\n\n\nScreen.screens\n\n\nScreen.chooseDesktopMedia (sources, callback)\n\n\nEvent: displayBoundsChanged(screen)\n\n\nEvent: displayAdded (screen)\n\n\nEvent: displayRemoved (screen)\n\n\nScreen.DesktopCaptureMonitor\n\n\nSynopsis\n\n\nScreen.DesktopCaptureMonitor.started\n\n\nScreen.DesktopCaptureMonitor.start(should_include_screens, should_include_windows)\n\n\nScreen.DesktopCaptureMonitor.stop()\n\n\nEvent: added (id, name, order, type, primary)\n\n\nEvent: removed (id)\n\n\nEvent: orderchanged (id, new_order, old_order)\n\n\nEvent: namechanged (id, name)\n\n\nEvent: thumbnailchanged (id, thumbnail)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScreen\n is an instance of EventEmitter object, and you're able to use \nScreen.on(...)\n to respond to native screen's events.\n\n\nScreen\n is a singleton object, need to be initiated once by calling \nnw.Screen.Init()\n\n\nSynopsis\n\n\n//init must be called once during startup, before any function to nw.Screen can be called\nnw.Screen.Init();\n\nvar screenCB = {\n  onDisplayBoundsChanged: function(screen) {\n    console.log('displayBoundsChanged', screen);\n  },\n\n  onDisplayAdded: function(screen) {\n    console.log('displayAdded', screen);\n  },\n\n  onDisplayRemoved: function(screen) {\n    console.log('displayRemoved', screen)\n  }\n};\n\n// listen to screen events\nnw.Screen.on('displayBoundsChanged', screenCB.onDisplayBoundsChanged);\nnw.Screen.on('displayAdded', screenCB.onDisplayAdded);\nnw.Screen.on('displayRemoved', screenCB.onDisplayRemoved);\n\n\n\n\nScreen.Init()\n\n\nInit the Screen singleton object, you only need to call this once\n\n\nScreen.screens\n\n\nGet the array of screen (number of screen connected to the computer)\n\n\nscreen has following structure:\n\n\nscreen {\n// unique id for a screen\n  id: int,\n\n// physical screen resolution, can be negative, not necessarily start from 0,depending on screen arrangement\n  bounds: {\n    x: int,\n    y: int,\n    width: int,\n    height: int\n  },\n\n// useable area within the screen bound\n  work_area: {\n    x: int,\n    y: int,\n    width: int,\n    height: int\n  },\n\n  scaleFactor: float,\n  isBuiltIn: bool,\n  rotation: int,\n  touchSupport: int\n}\n\n\n\n\nScreen.chooseDesktopMedia (sources, callback)\n\n\n\n\nsources\n \n{String[]}\n array of source types. Two types are supported by this API: \n\"screen\"\n and \n\"window\"\n.\n\n\ncallback\n \n{Function}\n callback function with chosed streamId. streamId will be \nfalse\n if failed to execute or existing session is alive.\n\n\n\n\n!!! note\n    Screen sharing by selection; Currently only working in Windows and OSX and some linux distribution.\n\n\nExample:\n\n\nnw.Screen.Init(); // you only need to call this once\nnw.Screen.chooseDesktopMedia([\"window\",\"screen\"], \n  function(streamId) {\n    var vid_constraint = {\n      mandatory: {\n        chromeMediaSource: 'desktop', \n        chromeMediaSourceId: streamId, \n        maxWidth: 1920, \n        maxHeight: 1080\n      }, \n      optional: []\n    };\n    navigator.webkitGetUserMedia({audio: false, video: constraint}, success_func, fallback_func);\n  }\n);\n\n\n\n\nEvent: displayBoundsChanged(screen)\n\n\nEmitted when the screen resolution, arrangement is changed, the callback is called with 1 argument \nscreen\n. See \nScreen.screens\n for the format.\n\n\nEvent: displayAdded (screen)\n\n\nEmitted when a new screen added, the callback is called with 1 argument \nscreen\n. See \nScreen.screens\n for the format.\n\n\nEvent: displayRemoved (screen)\n\n\nEmitted when existing screen removed, the callback is called with 1 argument \nscreen\n. See \nScreen.screens\n for the format.\n\n\nScreen.DesktopCaptureMonitor\n\n\nThis API behaves similar functions as \nScreen.chooseDesktopMedia\n. But it doesn't have GUI. You can use this API to monitor the changes of screens and windows on desktop and implement your own UI.\n\n\nScreen.DesktopCaptureMonitor\n is an instance of \nEventEmitter\n. You can use \nScreen.DesktopCaptureMonitor.on()\n to listen to the events.\n\n\nSynopsis\n\n\nnw.Screen.Init();\nnw.Screen.DesktopCaptureMonitor.on(\"added\", function (id, name, order, type) {\n   //select first stream and shutdown\n   var constraints = {\n      audio: {\n         mandatory: {\n             chromeMediaSource: \"system\",\n             chromeMediaSourceId: id\n          }\n      },\n      video: {\n         mandatory: {\n             chromeMediaSource: 'desktop',\n             chromeMediaSourceId: id,\n         }\n      }\n  };\n\n  // TODO: call getUserMedia with contraints\n\n  nw.Screen.DesktopCaptureMonitor.stop();\n});\n\nnw.Screen.DesktopCaptureMonitor.on(\"removed\", function (id) { });\nnw.Screen.DesktopCaptureMonitor.on(\"orderchanged\", function (id, new_order, old_order) { });\nnw.Screen.DesktopCaptureMonitor.on(\"namechanged\", function (id, name) { });\nnw.Screen.DesktopCaptureMonitor.on(\"thumbnailchanged\", function (id, thumbnail) { });\nnw.Screen.DesktopCaptureMonitor.start(true, true);\n\n\n\n\nScreen.DesktopCaptureMonitor.started\n\n\nBoolean of whether the DesktopCaptureMonitor is started.\n\n\nScreen.DesktopCaptureMonitor.start(should_include_screens, should_include_windows)\n\n\n\n\nshould_include_screens\n \n{Boolean}\n whether should include screens\n\n\nshould_include_windows\n \n{Boolean}\n whether should include windows\n\n\n\n\nThe \nDesktopCaptureMonitor\n will start monitoring the system and trigger the the events. The screen may flicker if while \nDesktopCaptureMonitor\n is running.\n\n\nScreen.DesktopCaptureMonitor.stop()\n\n\nThe \nDesktopCaptureMonitor\n will stop monitoring the system. The \nid\n provided can be passed into \nchromeMediaSourceId\n in \ngetUserMedia\n constraints. \nDesktopCaptureMonitor\n should be stopped after a stream is selected.\n\n\nEvent: added (id, name, order, type, primary)\n\n\n\n\nid\n \n{String}\n is unique id that can be passed as chromeMediaSourceId\n\n\nname\n \n{String}\n is the title of the window or screen\n\n\norder\n \n{Integer}\n is the z-order of the windows, if screens are selected they will appear first\n\n\ntype\n \n{String}\n type of the stream: \"screen\", \"window\", \"other\" or \"unknown\"\n\n\nprimary\n \n{Boolean}\n \nWindows OS only\n this will be \ntrue\n if the source is the primary monitor\n\n\n\n\nEmit when a new source was added.\n\n\nEvent: removed (id)\n\n\n\n\nid\n \n{String}\n is the chromeMediaSourceId of the screen or monitor that is no longer capturable\n\n\n\n\nEmit when a source was removed.\n\n\nEvent: orderchanged (id, new_order, old_order)\n\n\n\n\nid\n \n{String}\n is the chromeMediaSourceId of the screen or window that has changed z-order\n\n\nnew_order\n \n{Integer}\n is the new z-order\n\n\nold_order\n \n{Integer}\n is the old z-order\n\n\n\n\nEmit when the Z-order of a source changed (this may change for windows as others are focused).\n\n\nEvent: namechanged (id, name)\n\n\n\n\nid\n \n{String}\n is the chromeMediaSourceId of the screen or window that has a name changed\n\n\nname\n \n{String}\n is the new new name of the screen or window\n\n\n\n\nEmit when the name of the source has changed. This can happen when a window changes title.\n\n\nEvent: thumbnailchanged (id, thumbnail)\n\n\n\n\nid\n \n{String}\n is the chromeMediaSourceId of the screen or window that has an updated thumbnail\n\n\nthumbnail\n \n{String}\n is the base64 encoded png of the thumbnail\n\n\n\n\nEmit when the thumbnail of a source changed.",
            "title": "Screen"
        },
        {
            "location": "/References/Screen/#screen-doctitle",
            "text": "Screen {: .doctitle}  Synopsis  Screen.Init()  Screen.screens  Screen.chooseDesktopMedia (sources, callback)  Event: displayBoundsChanged(screen)  Event: displayAdded (screen)  Event: displayRemoved (screen)  Screen.DesktopCaptureMonitor  Synopsis  Screen.DesktopCaptureMonitor.started  Screen.DesktopCaptureMonitor.start(should_include_screens, should_include_windows)  Screen.DesktopCaptureMonitor.stop()  Event: added (id, name, order, type, primary)  Event: removed (id)  Event: orderchanged (id, new_order, old_order)  Event: namechanged (id, name)  Event: thumbnailchanged (id, thumbnail)        Screen  is an instance of EventEmitter object, and you're able to use  Screen.on(...)  to respond to native screen's events.  Screen  is a singleton object, need to be initiated once by calling  nw.Screen.Init()",
            "title": "Screen {: .doctitle}"
        },
        {
            "location": "/References/Screen/#synopsis",
            "text": "//init must be called once during startup, before any function to nw.Screen can be called\nnw.Screen.Init();\n\nvar screenCB = {\n  onDisplayBoundsChanged: function(screen) {\n    console.log('displayBoundsChanged', screen);\n  },\n\n  onDisplayAdded: function(screen) {\n    console.log('displayAdded', screen);\n  },\n\n  onDisplayRemoved: function(screen) {\n    console.log('displayRemoved', screen)\n  }\n};\n\n// listen to screen events\nnw.Screen.on('displayBoundsChanged', screenCB.onDisplayBoundsChanged);\nnw.Screen.on('displayAdded', screenCB.onDisplayAdded);\nnw.Screen.on('displayRemoved', screenCB.onDisplayRemoved);",
            "title": "Synopsis"
        },
        {
            "location": "/References/Screen/#screeninit",
            "text": "Init the Screen singleton object, you only need to call this once",
            "title": "Screen.Init()"
        },
        {
            "location": "/References/Screen/#screenscreens",
            "text": "Get the array of screen (number of screen connected to the computer)  screen has following structure:  screen {\n// unique id for a screen\n  id: int,\n\n// physical screen resolution, can be negative, not necessarily start from 0,depending on screen arrangement\n  bounds: {\n    x: int,\n    y: int,\n    width: int,\n    height: int\n  },\n\n// useable area within the screen bound\n  work_area: {\n    x: int,\n    y: int,\n    width: int,\n    height: int\n  },\n\n  scaleFactor: float,\n  isBuiltIn: bool,\n  rotation: int,\n  touchSupport: int\n}",
            "title": "Screen.screens"
        },
        {
            "location": "/References/Screen/#screenchoosedesktopmedia-sources-callback",
            "text": "sources   {String[]}  array of source types. Two types are supported by this API:  \"screen\"  and  \"window\" .  callback   {Function}  callback function with chosed streamId. streamId will be  false  if failed to execute or existing session is alive.   !!! note\n    Screen sharing by selection; Currently only working in Windows and OSX and some linux distribution.  Example:  nw.Screen.Init(); // you only need to call this once\nnw.Screen.chooseDesktopMedia([\"window\",\"screen\"], \n  function(streamId) {\n    var vid_constraint = {\n      mandatory: {\n        chromeMediaSource: 'desktop', \n        chromeMediaSourceId: streamId, \n        maxWidth: 1920, \n        maxHeight: 1080\n      }, \n      optional: []\n    };\n    navigator.webkitGetUserMedia({audio: false, video: constraint}, success_func, fallback_func);\n  }\n);",
            "title": "Screen.chooseDesktopMedia (sources, callback)"
        },
        {
            "location": "/References/Screen/#event-displayboundschangedscreen",
            "text": "Emitted when the screen resolution, arrangement is changed, the callback is called with 1 argument  screen . See  Screen.screens  for the format.",
            "title": "Event: displayBoundsChanged(screen)"
        },
        {
            "location": "/References/Screen/#event-displayadded-screen",
            "text": "Emitted when a new screen added, the callback is called with 1 argument  screen . See  Screen.screens  for the format.",
            "title": "Event: displayAdded (screen)"
        },
        {
            "location": "/References/Screen/#event-displayremoved-screen",
            "text": "Emitted when existing screen removed, the callback is called with 1 argument  screen . See  Screen.screens  for the format.",
            "title": "Event: displayRemoved (screen)"
        },
        {
            "location": "/References/Screen/#screendesktopcapturemonitor",
            "text": "This API behaves similar functions as  Screen.chooseDesktopMedia . But it doesn't have GUI. You can use this API to monitor the changes of screens and windows on desktop and implement your own UI.  Screen.DesktopCaptureMonitor  is an instance of  EventEmitter . You can use  Screen.DesktopCaptureMonitor.on()  to listen to the events.  Synopsis  nw.Screen.Init();\nnw.Screen.DesktopCaptureMonitor.on(\"added\", function (id, name, order, type) {\n   //select first stream and shutdown\n   var constraints = {\n      audio: {\n         mandatory: {\n             chromeMediaSource: \"system\",\n             chromeMediaSourceId: id\n          }\n      },\n      video: {\n         mandatory: {\n             chromeMediaSource: 'desktop',\n             chromeMediaSourceId: id,\n         }\n      }\n  };\n\n  // TODO: call getUserMedia with contraints\n\n  nw.Screen.DesktopCaptureMonitor.stop();\n});\n\nnw.Screen.DesktopCaptureMonitor.on(\"removed\", function (id) { });\nnw.Screen.DesktopCaptureMonitor.on(\"orderchanged\", function (id, new_order, old_order) { });\nnw.Screen.DesktopCaptureMonitor.on(\"namechanged\", function (id, name) { });\nnw.Screen.DesktopCaptureMonitor.on(\"thumbnailchanged\", function (id, thumbnail) { });\nnw.Screen.DesktopCaptureMonitor.start(true, true);  Screen.DesktopCaptureMonitor.started  Boolean of whether the DesktopCaptureMonitor is started.  Screen.DesktopCaptureMonitor.start(should_include_screens, should_include_windows)   should_include_screens   {Boolean}  whether should include screens  should_include_windows   {Boolean}  whether should include windows   The  DesktopCaptureMonitor  will start monitoring the system and trigger the the events. The screen may flicker if while  DesktopCaptureMonitor  is running.  Screen.DesktopCaptureMonitor.stop()  The  DesktopCaptureMonitor  will stop monitoring the system. The  id  provided can be passed into  chromeMediaSourceId  in  getUserMedia  constraints.  DesktopCaptureMonitor  should be stopped after a stream is selected.  Event: added (id, name, order, type, primary)   id   {String}  is unique id that can be passed as chromeMediaSourceId  name   {String}  is the title of the window or screen  order   {Integer}  is the z-order of the windows, if screens are selected they will appear first  type   {String}  type of the stream: \"screen\", \"window\", \"other\" or \"unknown\"  primary   {Boolean}   Windows OS only  this will be  true  if the source is the primary monitor   Emit when a new source was added.  Event: removed (id)   id   {String}  is the chromeMediaSourceId of the screen or monitor that is no longer capturable   Emit when a source was removed.  Event: orderchanged (id, new_order, old_order)   id   {String}  is the chromeMediaSourceId of the screen or window that has changed z-order  new_order   {Integer}  is the new z-order  old_order   {Integer}  is the old z-order   Emit when the Z-order of a source changed (this may change for windows as others are focused).  Event: namechanged (id, name)   id   {String}  is the chromeMediaSourceId of the screen or window that has a name changed  name   {String}  is the new new name of the screen or window   Emit when the name of the source has changed. This can happen when a window changes title.  Event: thumbnailchanged (id, thumbnail)   id   {String}  is the chromeMediaSourceId of the screen or window that has an updated thumbnail  thumbnail   {String}  is the base64 encoded png of the thumbnail   Emit when the thumbnail of a source changed.",
            "title": "Screen.DesktopCaptureMonitor"
        },
        {
            "location": "/References/Shell/",
            "text": "Shell {: .doctitle}\n\n\n\n\n\n\n\n\nShell {: .doctitle}\n\n\nSynopsis\n\n\nShell.openExternal(uri)\n\n\nShell.openItem(file_path)\n\n\nShell.showItemInFolder(file_path)\n\n\n\n\n\n\n\n\n\n\nShell\n is a collection of APIs that do desktop related jobs.\n\n\nSynopsis\n\n\n// Open URL with default browser.\nnw.Shell.openExternal('https://github.com/nwjs/nw.js');\n\n// Open a text file with default text editor.\nnw.Shell.openItem('test.txt');\n\n// Show a file in parent folder with file manager.\nnw.Shell.showItemInFolder('test.txt');\n\n\n\n\nShell.openExternal(uri)\n\n\n\n\nuri\n \n{String}\n A URL to open in system default manner.\n\n\n\n\nOpen the given external URI in the desktop's default manner. For example, mailto: URLs in the default mail user agent.\n\n\nShell.openItem(file_path)\n\n\n\n\nfile_path\n \n{String}\n path to a local file\n\n\n\n\nOpen the given \nfile_path\n in the desktop's default manner.\n\n\nShell.showItemInFolder(file_path)\n\n\n\n\nfile_path\n \n{String}\n path to a local file\n\n\n\n\nShow the given \nfile_path\n in the parent folder with file manager. If possible, select the file.",
            "title": "Shell"
        },
        {
            "location": "/References/Shell/#shell-doctitle",
            "text": "Shell {: .doctitle}  Synopsis  Shell.openExternal(uri)  Shell.openItem(file_path)  Shell.showItemInFolder(file_path)      Shell  is a collection of APIs that do desktop related jobs.",
            "title": "Shell {: .doctitle}"
        },
        {
            "location": "/References/Shell/#synopsis",
            "text": "// Open URL with default browser.\nnw.Shell.openExternal('https://github.com/nwjs/nw.js');\n\n// Open a text file with default text editor.\nnw.Shell.openItem('test.txt');\n\n// Show a file in parent folder with file manager.\nnw.Shell.showItemInFolder('test.txt');",
            "title": "Synopsis"
        },
        {
            "location": "/References/Shell/#shellopenexternaluri",
            "text": "uri   {String}  A URL to open in system default manner.   Open the given external URI in the desktop's default manner. For example, mailto: URLs in the default mail user agent.",
            "title": "Shell.openExternal(uri)"
        },
        {
            "location": "/References/Shell/#shellopenitemfile_path",
            "text": "file_path   {String}  path to a local file   Open the given  file_path  in the desktop's default manner.",
            "title": "Shell.openItem(file_path)"
        },
        {
            "location": "/References/Shell/#shellshowiteminfolderfile_path",
            "text": "file_path   {String}  path to a local file   Show the given  file_path  in the parent folder with file manager. If possible, select the file.",
            "title": "Shell.showItemInFolder(file_path)"
        },
        {
            "location": "/References/Shortcut/",
            "text": "Shortcut {: .doctitle}\n\n\n\n\n\n\n\n\nShortcut {: .doctitle}\n\n\nSynopsis\n\n\nnew Shortcut(option)\n\n\nshortcut.key\n\n\nshortcut.active\n\n\nshortcut.failed\n\n\nEvent:active\n\n\nEvent:failed\n\n\n\n\n\n\n\n\n\n\nShortcut\n represents a global keyboard shortcut, also known as system-wide hotkey. If registered successfully, it works even if your app does \nnot\n have focus.\n\n\nShortcut\n inherited from \nEventEmitter\n. Every time the user presses the registered shortcut, your app will receive an \nactive\n event of the shortcut object.\n\n\nSynopsis\n\n\nvar option = {\n  key : \"Ctrl+Shift+A\",\n  active : function() {\n    console.log(\"Global desktop keyboard shortcut: \" + this.key + \" active.\"); \n  },\n  failed : function(msg) {\n    // :(, fail to register the |key| or couldn't parse the |key|.\n    console.log(msg);\n  }\n};\n\n// Create a shortcut with |option|.\nvar shortcut = new nw.Shortcut(option);\n\n// Register global desktop shortcut, which can work without focus.\nnw.App.registerGlobalHotKey(shortcut);\n\n// If register |shortcut| successfully and user struck \"Ctrl+Shift+A\", |shortcut|\n// will get an \"active\" event.\n\n// You can also add listener to shortcut's active and failed event.\nshortcut.on('active', function() {\n  console.log(\"Global desktop keyboard shortcut: \" + this.key + \" active.\"); \n});\n\nshortcut.on('failed', function(msg) {\n  console.log(msg);\n});\n\n// Unregister the global desktop shortcut.\nnw.App.unregisterGlobalHotKey(shortcut);\n\n\n\n\nnew Shortcut(option)\n\n\n\n\noption\n \n{Object}\n\n\nkey\n \n{String}\n key combinations of the shortcut, such as \n\"ctrl+shift+a\"\n. See \nshortcut.key\n property for details.\n\n\nactive\n \n{Function}\n \nOptional\n a callback when the hotkey is triggered. See \nshortcut.active\n property for details.\n\n\nfailed\n \n{Function}\n \nOptional\n a callback when failed to register the hotkey. See \nshortcut.failed\n property for details.\n\n\n\n\n\n\n\n\nCreate new \nShortcut\n, \noption\n is an object contains initial settings for the \nShortcut\n.\n\n\nshortcut.key\n\n\nGet the \nkey\n of a \nShortcut\n. It is a string to specify the shortcut key, like \n\"Ctrl+Alt+A\"\n. The key is consisted of zero or more \nmodifiers\n and a \nkey\n on your keyboard. Only one key code is supported.\n\n\nList of supported modifiers:\n\n\n\n\nCtrl\n\n\nAlt\n\n\nShift\n\n\nCommand\n: \nCommand\n modifier maps to Apple key (\n\u2318\n) on Mac, and maps to the Windows key on Windows and Linux.\n\n\n\n\nList of supported keys:\n\n\n\n\nAlphabet: \nA\n-\nZ\n\n\nDigits: \n0\n-\n9\n\n\nFunction Keys: \nF1\n-\nF24\n\n\nComma\n\n\nPeriod\n\n\nTab\n\n\nHome\n / \nEnd\n / \nPageUp\n / \nPageDown\n / \nInsert\n / \nDelete\n\n\nUp\n / \nDown\n / \nLeft\n / \nRight\n\n\nMediaNextTrack\n / \nMediaPlayPause\n / \nMediaPrevTrack\n / \nMediaStop\n\n\nComma\n or \n,\n\n\nPeriod\n or \n.\n\n\nTab\n or \n\\t\n\n\nBackquote\n or \n`\n\n\nEnter\n or \n\\n\n\n\nMinus\n or \n-\n\n\nEqual\n or \n=\n\n\nBackslash\n or \n\\\n\n\nSemicolon\n or \n;\n\n\nQuote\n or \n'\n\n\nBracketLeft\n or \n[\n\n\nBracketRight\n or \n[\n\n\nEscape\n\n\nDOM Level 3 W3C KeyboardEvent Code Values\n\n\n\n\n!!! warning \"Single Key without Modifiers\"\n    The API \nApp.registerGlobalHotKey()\n can support applications intercepting a single key (like \n{ key: \"A\"}\n). But users will not be able to use \"A\" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.\n    \nOnly use zero modifier when you are knowing what your are doing.\n\n\nshortcut.active\n\n\nGet or set the \nactive\n callback of a \nShortcut\n. It will be called when user presses the shortcut.\n\n\nshortcut.failed\n\n\n*Get or set the \nfailed\n callback of a \nShortcut\n. It will be called when application passes an invalid key , or failed to register the key.\n\n\nEvent:active\n\n\nSame as \nshortcut.active\n\n\nEvent:failed\n\n\nSame as \nshortcut.failed",
            "title": "Shortcut"
        },
        {
            "location": "/References/Shortcut/#shortcut-doctitle",
            "text": "Shortcut {: .doctitle}  Synopsis  new Shortcut(option)  shortcut.key  shortcut.active  shortcut.failed  Event:active  Event:failed      Shortcut  represents a global keyboard shortcut, also known as system-wide hotkey. If registered successfully, it works even if your app does  not  have focus.  Shortcut  inherited from  EventEmitter . Every time the user presses the registered shortcut, your app will receive an  active  event of the shortcut object.",
            "title": "Shortcut {: .doctitle}"
        },
        {
            "location": "/References/Shortcut/#synopsis",
            "text": "var option = {\n  key : \"Ctrl+Shift+A\",\n  active : function() {\n    console.log(\"Global desktop keyboard shortcut: \" + this.key + \" active.\"); \n  },\n  failed : function(msg) {\n    // :(, fail to register the |key| or couldn't parse the |key|.\n    console.log(msg);\n  }\n};\n\n// Create a shortcut with |option|.\nvar shortcut = new nw.Shortcut(option);\n\n// Register global desktop shortcut, which can work without focus.\nnw.App.registerGlobalHotKey(shortcut);\n\n// If register |shortcut| successfully and user struck \"Ctrl+Shift+A\", |shortcut|\n// will get an \"active\" event.\n\n// You can also add listener to shortcut's active and failed event.\nshortcut.on('active', function() {\n  console.log(\"Global desktop keyboard shortcut: \" + this.key + \" active.\"); \n});\n\nshortcut.on('failed', function(msg) {\n  console.log(msg);\n});\n\n// Unregister the global desktop shortcut.\nnw.App.unregisterGlobalHotKey(shortcut);",
            "title": "Synopsis"
        },
        {
            "location": "/References/Shortcut/#new-shortcutoption",
            "text": "option   {Object}  key   {String}  key combinations of the shortcut, such as  \"ctrl+shift+a\" . See  shortcut.key  property for details.  active   {Function}   Optional  a callback when the hotkey is triggered. See  shortcut.active  property for details.  failed   {Function}   Optional  a callback when failed to register the hotkey. See  shortcut.failed  property for details.     Create new  Shortcut ,  option  is an object contains initial settings for the  Shortcut .",
            "title": "new Shortcut(option)"
        },
        {
            "location": "/References/Shortcut/#shortcutkey",
            "text": "Get the  key  of a  Shortcut . It is a string to specify the shortcut key, like  \"Ctrl+Alt+A\" . The key is consisted of zero or more  modifiers  and a  key  on your keyboard. Only one key code is supported.  List of supported modifiers:   Ctrl  Alt  Shift  Command :  Command  modifier maps to Apple key ( \u2318 ) on Mac, and maps to the Windows key on Windows and Linux.   List of supported keys:   Alphabet:  A - Z  Digits:  0 - 9  Function Keys:  F1 - F24  Comma  Period  Tab  Home  /  End  /  PageUp  /  PageDown  /  Insert  /  Delete  Up  /  Down  /  Left  /  Right  MediaNextTrack  /  MediaPlayPause  /  MediaPrevTrack  /  MediaStop  Comma  or  ,  Period  or  .  Tab  or  \\t  Backquote  or  `  Enter  or  \\n  Minus  or  -  Equal  or  =  Backslash  or  \\  Semicolon  or  ;  Quote  or  '  BracketLeft  or  [  BracketRight  or  [  Escape  DOM Level 3 W3C KeyboardEvent Code Values   !!! warning \"Single Key without Modifiers\"\n    The API  App.registerGlobalHotKey()  can support applications intercepting a single key (like  { key: \"A\"} ). But users will not be able to use \"A\" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.\n     Only use zero modifier when you are knowing what your are doing.",
            "title": "shortcut.key"
        },
        {
            "location": "/References/Shortcut/#shortcutactive",
            "text": "Get or set the  active  callback of a  Shortcut . It will be called when user presses the shortcut.",
            "title": "shortcut.active"
        },
        {
            "location": "/References/Shortcut/#shortcutfailed",
            "text": "*Get or set the  failed  callback of a  Shortcut . It will be called when application passes an invalid key , or failed to register the key.",
            "title": "shortcut.failed"
        },
        {
            "location": "/References/Shortcut/#eventactive",
            "text": "Same as  shortcut.active",
            "title": "Event:active"
        },
        {
            "location": "/References/Shortcut/#eventfailed",
            "text": "Same as  shortcut.failed",
            "title": "Event:failed"
        },
        {
            "location": "/References/Tray/",
            "text": "Tray {: doctitle}\n\n\n\n\n\n\n\n\nTray {: doctitle}\n\n\nSynopsis\n\n\nnew Tray(option)\n\n\ntray.title\n\n\ntray.tooltip\n\n\ntray.icon\n\n\ntray.alticon (Mac)\n\n\ntray.iconsAreTemplates (Mac)\n\n\ntray.menu\n\n\ntray.remove()\n\n\nEvent: click\n\n\n\n\n\n\n\n\n\n\nTray\n is an abstraction of different controls on different platforms, usually it's a small icon shown on the OS's notification area. On Mac OS X it's called \nStatus Item\n, on GTK it's \nStatus Icon\n, and on Windows it's \nSystem Tray Icon\n.\n\n\nSynopsis\n\n\n// Create a tray icon\nvar tray = new nw.Tray({ title: 'Tray', icon: 'img/icon.png' });\n\n// Give it a menu\nvar menu = new nw.Menu();\nmenu.append(new nw.MenuItem({ type: 'checkbox', label: 'box1' }));\ntray.menu = menu;\n\n// Remove the tray\ntray.remove();\ntray = null;\n\n\n\n\nnew Tray(option)\n\n\n\n\noption\n \n{Object}\n\n\ntitle\n \n{String}\n title\n\n\ntooltip\n \n{String}\n tooltip\n\n\nicon\n \n{String}\n icon\n\n\nalticon\n \n{String}\n alternate\n\n\niconsAreTemplates\n \n{Boolean}\n whether icons are templates\n\n\nmenu\n \n{Menu}\n popup menu\n\n\n\n\n\n\n\n\nCreate a new \nTray\n, \noption\n is an object contains initial settings for the \nTray\n. Every field has its own property in the \nTray\n, see documentation of each property for details.\n\n\ntray.title\n\n\nGet or set the \ntitle\n of the tray.\n\n\nOn Mac OS X \ntitle\n will be showed on status bar along with its \nicon\n, but it doesn't have effects on GTK and Windows, since the latter two platforms only support tray to be showed as icons.\n\n\ntray.tooltip\n\n\nGet or set the \ntooltip\n of the tray. \ntooltip\n shows when you hover the \nTray\n with mouse.\n\n\n!!! note\n    \ntooltip\n is showed on all three platforms. Should be set as \nTray\n property rather from \noption\n object constructor.\n\n\ntray.icon\n\n\nGet or set the \nicon\n of the tray, \nicon\n must a path to your icon file. It can be a relative path which points to an icon in your app, or an absolute path pointing to a file in user's system.\n\n\n!!! note \"Mac\"\n    Mac OS X caveat: when used in notification context, png icon is not sized down like in windows notification area, it is rather displayed in 1:1 ratio.\n\n\ntray.alticon (Mac)\n\n\nGet or set the alternate (active) tray icon.\n\n\ntray.iconsAreTemplates (Mac)\n\n\nGet or set whether \nicon\n and \nalticon\n images are treated as \"templates\" (\ntrue\n by default). When the property is set to \ntrue\n the images are treated as \"templates\" and the system automatically ensures proper styling according to the various states of the status item (e.g. dark menu, light menu, etc.). Template images should consist only of black and clear colours and can use the alpha channel in the image to adjust the opacity of black content.\n\n\ntray.menu\n\n\nGet or set the \nmenu\n of the tray, \nmenu\n will be showed when you click on the tray icon.\n\n\nOn Mac OS X the menu will be showed when you click on the tray (which is the only action available for tray icons on Mac OS X). On Windows and Linux, the menu will be showed when you single click on the tray with right mouse button, clicking with left mouse button sends the \nclick\n event and does not show a menu.\n\n\nIn order to reduce differences from different platforms, setting \nmenu\n property is the only way to bind a menu to tray, there's no way to popup a menu with left mouse button click on Linux and Windows.\n\n\ntray.remove()\n\n\nRemove the tray.\n\n\nOnce removed, you will not be able to show it again and you should set your tray variable to \nnull\n to make it garbage collected. There is no way temporarily hide a tray icon.\n\n\nEvent: click\n\n\nEmitted when user clicks the menu item with left mouse button.\n\n\nYou cannot catch click with right mouse button, because it is used to show menu. Even if you're not binding a menu to a tray, you still can not listen to it. Double click events are also ignored.\n\n\n!!! note \"Mac\"\n    NW.js does not support menulet (\n\u2318\n+drag) since it will prohibit NW.js apps from being distributed in the App Store.",
            "title": "Tray"
        },
        {
            "location": "/References/Tray/#tray-doctitle",
            "text": "Tray {: doctitle}  Synopsis  new Tray(option)  tray.title  tray.tooltip  tray.icon  tray.alticon (Mac)  tray.iconsAreTemplates (Mac)  tray.menu  tray.remove()  Event: click      Tray  is an abstraction of different controls on different platforms, usually it's a small icon shown on the OS's notification area. On Mac OS X it's called  Status Item , on GTK it's  Status Icon , and on Windows it's  System Tray Icon .",
            "title": "Tray {: doctitle}"
        },
        {
            "location": "/References/Tray/#synopsis",
            "text": "// Create a tray icon\nvar tray = new nw.Tray({ title: 'Tray', icon: 'img/icon.png' });\n\n// Give it a menu\nvar menu = new nw.Menu();\nmenu.append(new nw.MenuItem({ type: 'checkbox', label: 'box1' }));\ntray.menu = menu;\n\n// Remove the tray\ntray.remove();\ntray = null;",
            "title": "Synopsis"
        },
        {
            "location": "/References/Tray/#new-trayoption",
            "text": "option   {Object}  title   {String}  title  tooltip   {String}  tooltip  icon   {String}  icon  alticon   {String}  alternate  iconsAreTemplates   {Boolean}  whether icons are templates  menu   {Menu}  popup menu     Create a new  Tray ,  option  is an object contains initial settings for the  Tray . Every field has its own property in the  Tray , see documentation of each property for details.",
            "title": "new Tray(option)"
        },
        {
            "location": "/References/Tray/#traytitle",
            "text": "Get or set the  title  of the tray.  On Mac OS X  title  will be showed on status bar along with its  icon , but it doesn't have effects on GTK and Windows, since the latter two platforms only support tray to be showed as icons.",
            "title": "tray.title"
        },
        {
            "location": "/References/Tray/#traytooltip",
            "text": "Get or set the  tooltip  of the tray.  tooltip  shows when you hover the  Tray  with mouse.  !!! note\n     tooltip  is showed on all three platforms. Should be set as  Tray  property rather from  option  object constructor.",
            "title": "tray.tooltip"
        },
        {
            "location": "/References/Tray/#trayicon",
            "text": "Get or set the  icon  of the tray,  icon  must a path to your icon file. It can be a relative path which points to an icon in your app, or an absolute path pointing to a file in user's system.  !!! note \"Mac\"\n    Mac OS X caveat: when used in notification context, png icon is not sized down like in windows notification area, it is rather displayed in 1:1 ratio.",
            "title": "tray.icon"
        },
        {
            "location": "/References/Tray/#trayalticon-mac",
            "text": "Get or set the alternate (active) tray icon.",
            "title": "tray.alticon (Mac)"
        },
        {
            "location": "/References/Tray/#trayiconsaretemplates-mac",
            "text": "Get or set whether  icon  and  alticon  images are treated as \"templates\" ( true  by default). When the property is set to  true  the images are treated as \"templates\" and the system automatically ensures proper styling according to the various states of the status item (e.g. dark menu, light menu, etc.). Template images should consist only of black and clear colours and can use the alpha channel in the image to adjust the opacity of black content.",
            "title": "tray.iconsAreTemplates (Mac)"
        },
        {
            "location": "/References/Tray/#traymenu",
            "text": "Get or set the  menu  of the tray,  menu  will be showed when you click on the tray icon.  On Mac OS X the menu will be showed when you click on the tray (which is the only action available for tray icons on Mac OS X). On Windows and Linux, the menu will be showed when you single click on the tray with right mouse button, clicking with left mouse button sends the  click  event and does not show a menu.  In order to reduce differences from different platforms, setting  menu  property is the only way to bind a menu to tray, there's no way to popup a menu with left mouse button click on Linux and Windows.",
            "title": "tray.menu"
        },
        {
            "location": "/References/Tray/#trayremove",
            "text": "Remove the tray.  Once removed, you will not be able to show it again and you should set your tray variable to  null  to make it garbage collected. There is no way temporarily hide a tray icon.",
            "title": "tray.remove()"
        },
        {
            "location": "/References/Tray/#event-click",
            "text": "Emitted when user clicks the menu item with left mouse button.  You cannot catch click with right mouse button, because it is used to show menu. Even if you're not binding a menu to a tray, you still can not listen to it. Double click events are also ignored.  !!! note \"Mac\"\n    NW.js does not support menulet ( \u2318 +drag) since it will prohibit NW.js apps from being distributed in the App Store.",
            "title": "Event: click"
        },
        {
            "location": "/References/Window/",
            "text": "Window {: .doctitle}\n\n\n\n\n\n\n\n\nWindow {: .doctitle}\n\n\nSynopsis\n\n\nWindow.get([window_object])\n\n\nWindow.open(url, [options], [callback])\n\n\nwin.window\n\n\nwin.x\n\n\nwin.y\n\n\nwin.width\n\n\nwin.height\n\n\nwin.title\n\n\nwin.menu\n\n\nwin.isFullscreen\n\n\nwin.isTransparent\n\n\nwin.isKioskMode\n\n\nwin.zoomLevel\n\n\nwin.cookies.*\n\n\nwin.moveTo(x, y)\n\n\nwin.moveBy(x, y)\n\n\nwin.resizeTo(width, height)\n\n\nwin.resizeBy(width, height)\n\n\nwin.focus()\n\n\nwin.blur()\n\n\nwin.show([is_show])\n\n\nwin.hide()\n\n\nwin.close([force])\n\n\nwin.reload()\n\n\nwin.reloadDev()\n\n\nwin.reloadIgnoringCache()\n\n\nwin.maximize()\n\n\nwin.unmaximize()\n\n\nwin.minimize()\n\n\nwin.restore()\n\n\nwin.enterFullscreen()\n\n\nwin.leaveFullscreen()\n\n\nwin.toggleFullscreen()\n\n\nwin.enterKioskMode()\n\n\nwin.leaveKioskMode()\n\n\nwin.toggleKioskMode()\n\n\nwin.setTransparent(transparent)\n\n\nwin.showDevTools([iframe], [headless], [callback])\n\n\nwin.closeDevTools()\n\n\nwin.isDevToolsOpen()\n\n\nwin.setMaximumSize(width, height)\n\n\nwin.setMinimumSize(width, height)\n\n\nwin.setResizable(resizable)\n\n\nwin.setAlwaysOnTop(top)\n\n\nwin.setVisibleOnAllWorkspaces(visible) (Mac and Linux)\n\n\nwin.canSetVisibleOnAllWorkspaces() (Mac and Linux)\n\n\nwin.setPosition(position)\n\n\nwin.setShowInTaskbar(show)\n\n\nwin.requestAttention(attension)\n\n\nwin.capturePage(callback [, config ])\n\n\nwin.setProgressBar(progress)\n\n\nwin.setBadgeLabel(label)\n\n\nwin.eval(frame, script)\n\n\nwin.evalNWBin(frame, path)\n\n\nEvent: close\n\n\nEvent: closed\n\n\nEvent: loading\n\n\nEvent: loaded\n\n\nEvent: document-start(frame)\n\n\nEvent: document-end(frame)\n\n\nEvent: focus\n\n\nEvent: blur\n\n\nEvent: minimize\n\n\nEvent: restore\n\n\nEvent: maximize\n\n\nEvent: unmaximize\n\n\nEvent: move(x, y)\n\n\nEvent: resize(width, height)\n\n\nEvent: enter-fullscreen\n\n\nEvent: leave-fullscreen\n\n\nEvent: zoom\n\n\nEvent: capturepagedone\n\n\nEvent: devtools-opened(url)\n\n\nEvent: devtools-closed\n\n\nEvent: new-win-policy (frame, url, policy)\n\n\nEvent: navigation (frame, url, policy)\n\n\n\n\n\n\n\n\n\n\nWindow\n is a wrapper of the DOM's \nwindow\n object. It has extended operations and can receive various window events.\n\n\nEvery \nWindow\n is an instance of the EventEmitter class, and you're able to use \nWindow.on(...)\n to respond to native window's events.\n\n\nSynopsis\n\n\n// Get the current window\nvar win = nw.Window.get();\n\n// Listen to the minimize event\nwin.on('minimize', function() {\n  console.log('Window is minimized');\n});\n\n// Minimize the window\nwin.minimize();\n\n// Unlisten the minimize event\nwin.removeAllListeners('minimize');\n\n// Create a new window and get it\nnw.Window.open('https://github.com', {}, function(new_win) {\n  // And listen to new window's focus event\n  new_win.on('focus', function() {\n    console.log('New window is focused');\n  });\n\n});\n\n\n\n\nWindow.get([window_object])\n\n\n\n\nwindow_object\n \n{DOM Window}\n \nOptional\n is the DOM window\n\n\nReturns \n{Window}\n the native \nWindow\n object\n\n\n\n\nIf \nwindow_object\n is not specifed, then return current window's \nWindow\n object, otherwise return \nwindow_object\n's \nWindow\n object.\n\n\n// Get the current window\nvar win = nw.Window.get();\n\n// Create a new window and get it\nnw.Window.open('https://github.com/nwjs/nw.js', {}, function(new_win) {\n  // do something with the newly created window\n});\n\n\n\n\nWindow.open(url, [options], [callback])\n\n\n!!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\nurl\n \n{String}\n URL to be loaded in the opened window\n\n\noptions\n \n{Object}\n \nOptional\n see \nWindow subfields\n in manifest format. And following extra fields can also be used in options.\n\n\nnew-instance\n \n{Boolean}\n \nOptional\n whether to open a new window in a separate render process.\n\n\ninject-js-start\n \n{String}\n \nOptional\n the script to be injected before document loaded. See \nManifest format\n\n\ninject-js-end\n \n{String}\n \nOptional\n the script to be injected before document unloaded. See \nManifest format\n\n\nid\n \n{String}\n \nOptional\n the ID used to identify the window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. \nSee also the Chrome App documentation\n\n\n\n\n\n\ncallback(win)\n \n{Function}\n \nOptional\n callback when with the opened native \nWindow\n object\n\n\n\n\nOpen a new window and load \nurl\n in it.\n\n\n!!! note\n    You should wait for the Window's \nloaded\n event before interacting with any of its components.\n\n\n!!! note \"Focus\"\n    The opened window is not focused by default. If you want it to be focused by default, you can set \nfocus\n to \ntrue\n in \noptions\n.\n\n\nwin.window\n\n\nGet the corresponding DOM window object of the native window.\n\n\nwin.x\n\n\nwin.y\n\n\nGet or set left/top offset from window to screen.\n\n\nwin.width\n\n\nwin.height\n\n\nGet or set window's size.\n\n\nwin.title\n\n\nGet or set window's title.\n\n\nwin.menu\n\n\nGet or set window's menubar. Set with a Menu with type \nmenubar\n. See \nMenu\n.\n\n\nwin.isFullscreen\n\n\nGet whether we're in fullscreen mode.\n\n\nwin.isTransparent\n\n\nGet whether transparency is turned on\n\n\nwin.isKioskMode\n\n\nGet whether we're in kiosk mode.\n\n\nwin.zoomLevel\n\n\nGet or set the page zoom. \n0\n for normal size; positive value for zooming in; negative value for zooming out.\n\n\nwin.cookies.*\n\n\nThis includes multiple functions to manipulate the cookies. The API is defined in the same way as \nChrome Extensions'\n. NW.js supports the \nget\n, \ngetAll\n, \nremove\n and \nset\n methods; \nonChanged\n event (supporting both \naddListener\n and \nremoveListener\n function on this event).\n\n\nAnd anything related to \nCookieStore\n in the Chrome extension API is not supported, because there is only one global cookie store in NW.js apps.\n\n\nwin.moveTo(x, y)\n\n\n\n\nx\n \n{Integer}\n offset to the left of the screen\n\n\ny\n \n{Integer}\n offset to the top of the screen\n\n\n\n\nMoves a window's left and top edge to the specified coordinates.\n\n\nwin.moveBy(x, y)\n\n\n\n\nx\n \n{Integer}\n horizontal offset\n\n\ny\n \n{Integer}\n vertical offset\n\n\n\n\nMoves a window a specified number of pixels relative to its current coordinates.\n\n\nwin.resizeTo(width, height)\n\n\n\n\nwidth\n \n{Integer}\n the width of the window\n\n\nheight\n \n{Integer}\n the height of the window\n\n\n\n\nResizes a window to the specified \nwidth\n and \nheight\n.\n\n\nwin.resizeBy(width, height)\n\n\n\n\nwidth\n \n{Integer}\n the offset width of the window\n\n\nheight\n \n{Integer}\n the offset height of the window\n\n\n\n\nResizes a window by the specified amount.\n\n\nwin.focus()\n\n\nFocus on the window.\n\n\nwin.blur()\n\n\nMove focus away. Usually it will move focus to other windows of your app, since on some platforms there is no concept of blur.\n\n\nwin.show([is_show])\n\n\n\n\nis_show\n \n{Boolean}\n \nOptional\n specify whether the window should be shown or hidden. It's set to \ntrue\n by default.\n\n\n\n\nShow the window if it's not shown.\n\n\nshow(false)\n has the same effect with \nhide()\n.\n\n\n!!! note \"Focus\"\n    \nshow\n will not focus on the window on some platforms, so you need to call \nfocus\n if you want to.\n\n\nwin.hide()\n\n\nHide the window. User will not be able to find the window once it's hidden.\n\n\nwin.close([force])\n\n\n\n\nforce\n \n{Boolean}\n specify whether to close the window forcely and bypass \nclose\n event.\n\n\n\n\nClose current window. And you can prevent the closing by listening to the \nclose\n event. If \nforce\n is specified and equals to \ntrue\n, then the \nclose\n event will be ignored.\n\n\nUsually you would like to listen to the \nclose\n event and do some shutdown work and then do a \nclose(true)\n to really close the window.\n\n\nwin.on('close', function() {\n  this.hide(); // Pretend to be closed already\n  console.log(\"We're closing...\");\n  this.close(true); // then close it forcely\n});\n\nwin.close();\n\n\n\n\nwin.reload()\n\n\nReloads the current window.\n\n\nwin.reloadDev()\n\n\nReloads the current page by starting a new renderer process from scratch.\n\n\nwin.reloadIgnoringCache()\n\n\nLike \nreload()\n, but don't use caches (aka \"shift-reload\").\n\n\nwin.maximize()\n\n\nMaximize the window on GTK and Windows, and zoom the window on Mac OS X.\n\n\nwin.unmaximize()\n\n\n!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. It's now replaced by \nrestore\n event\n. See \nMigration Notes from 0.12 to 0.13\n.\n\n\nUnmaximize the window, i.e. the reverse of \nmaximize()\n.\n\n\nwin.minimize()\n\n\nMinimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.\n\n\nwin.restore()\n\n\nRestore window to previous state after the window is minimized, i.e. the reverse of \nminimize()\n. It's not named \nunminimize\n since \nrestore\n is used commonly.\n\n\nwin.enterFullscreen()\n\n\nMake the window fullscreen.\n\n\n!!! note\n    This function is different with HTML5 FullScreen API, which can make part of the page fullscreen, \nWindow.enterFullscreen()\n will only fullscreen the whole window.\n\n\nwin.leaveFullscreen()\n\n\nLeave the fullscreen mode.\n\n\nwin.toggleFullscreen()\n\n\nToggle the fullscreen mode.\n\n\nwin.enterKioskMode()\n\n\nEnter the Kiosk mode. In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. This mode is mainly used for presentation on public displays.\n\n\nwin.leaveKioskMode()\n\n\nLeave the Kiosk mode.\n\n\nwin.toggleKioskMode()\n\n\nToggle the kiosk mode.\n\n\nwin.setTransparent(transparent)\n\n\n!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. See \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\ntransparent\n \n{Boolean}\n whether to set the window to be transparent\n\n\n\n\nTurn on/off the transparency support. See more info on \nTransparent Window\n.\n\n\nwin.showDevTools([iframe], [headless], [callback])\n\n\n!!! note\n    This API is only available on SDK build flavor.\n\n\n!!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see \nMigration Notes from 0.12 to 0.13\n.\n\n\n\n\niframe\n \n{String} or {HTMLIFrameElement}\n \nOptional\n the id or the element of the \n<iframe>\n to be jailed on. By default, the DevTools is shown for entire window.\n\n\nheadless\n \n{Boolean}\n \nOptional\n whether show DevTools in headless mode. If ignored, it's set to \nfalse\n by default.\n\n\ncallback(dev_win)\n \n{Function}\n callback with the native window of the DevTools window when \nheadless\n is false.\n\n\n\n\nOpen the devtools to inspect the window.\n\n\nThe optional \niframe\n as \nString\n should be the value of \nid\n attribute of any \n<iframe>\n element in the window. It jails the DevTools to inspect the \n<iframe>\n only. If it is an empty string, this feature has no effect.\n\n\nThe optional \niframe\n as \nHTMLIFrameElement\n should be the iframe object. And it serves the same purpose with the \nid\n argument.\n\n\nWhen \nheadless\n is \ntrue\n, the Devtools window will not be opened. Instead, a \ndevtools-opened\n event will be emitted to the \nWindow\n object after Devtools is ready.\n\n\nThis function returns a \nWindow\n object when \nheadless\n is \nfalse\n. You can use any properties and methods of \nWindow\n except the events.\n\n\nwin.closeDevTools()\n\n\n!!! note\n    This API is only available on SDK build flavor.\n\n\nClose the devtools window.\n\n\nwin.isDevToolsOpen()\n\n\n!!! note\n    This API is only available on SDK build flavor.\n\n\nQuery the status of devtools window.\n\n\nThis will always return \nfalse\n if the \nheadless\n option was \ntrue\n when calling \nwin.showDevTools()\n.\n\n\nwin.setMaximumSize(width, height)\n\n\n\n\nwidth\n \n{Integer}\n the maximum width of the window\n\n\nheight\n \n{Integer}\n the maximum height of the window\n\n\n\n\nSet window's maximum size.\n\n\nwin.setMinimumSize(width, height)\n\n\n\n\nwidth\n \n{Integer}\n the minimum width of the window\n\n\nheight\n \n{Integer}\n the minimum height of the window\n\n\n\n\nSet window's minimum size.\n\n\nwin.setResizable(resizable)\n\n\n\n\nresizable\n \n{Boolean}\n whether the window can be resized\n\n\n\n\nSet whether window is resizable.\n\n\nwin.setAlwaysOnTop(top)\n\n\n\n\ntop\n \n{Boolean}\n whether the window should always be on top\n\n\n\n\nSets the widget to be on top of all other windows in the window system.\n\n\nwin.setVisibleOnAllWorkspaces(visible) (Mac and Linux)\n\n\n\n\ntop\n \n{Boolean}\n whether the window should be visible on all workspaces\n\n\n\n\nFor platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.\n\n\nwin.canSetVisibleOnAllWorkspaces() (Mac and Linux)\n\n\nReturns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method \nsetVisibleOnAllWorkspace(Boolean)\n.\n\n\nwin.setPosition(position)\n\n\n\n\nposition\n \n{String}\n the position of the window. There are three valid positions: \nnull\n or \ncenter\n or \nmouse\n\n\n\n\nMove window to specified position. Currently only \ncenter\n is supported on all platforms, which will put window in the middle of the screen.\n\n\nwin.setShowInTaskbar(show)\n\n\n\n\nshow\n \n{Boolean}\n whether show in task bar\n\n\n\n\nControl whether to show window in taskbar or dock. See also \nshow_in_taskbar\n in \nManifest-format\n.\n\n\nwin.requestAttention(attension)\n\n\n\n\nattension\n \n{Boolean} or {Integer}\n If a Boolean, it indicates to request or cancel user's attension. If an Integer, it indicates the number of times the window flashes.\n\n\n\n\nRequest the user's attension by making the window flashes in the task bar.\n\n\n!!! note \"Mac\"\n    On Mac, value < 0 will trigger \nNSInformationalRequest\n, while value > 0 will trigger \nNSCriticalRequest\n.\n\n\nwin.capturePage(callback [, config ])\n\n\n\n\ncallback\n \n{Function}\n the callback when finished capturing the window\n\n\nconfig\n \n{String} or {Object}\n \nOptional\n if a String, see \nconfig.format\n for valid values.\n\n\nformat\n \n{String}\n \noptional\n the image format used to generate the image. It supports two formats: \n\"png\"\n and \n\"jpeg\"\n. If ignored, it's \n\"jpeg\"\n by default.\n\n\ndatatype\n \n{String}\n it supports three types: \n\"raw\"\n, \n\"buffer\"\n and \n\"datauri\"\n. If ignored, it's \n\"datauri\"\n by default.\n\n\n\n\n\n\n\n\nCaptures the visible area of the window.\n\n\n!!! note \"\nraw\n or \ndatauri\n\"\n    The \n\"raw\"\n only contains the Base64 encoded image. But \n\"datauri\"\n contains the mime type headers as well, and it can be directly assigned to \nsrc\n of \nImage\n to load the image.\n\n\nExample usage:\n\n\n// png as base64string\nwin.capturePage(function(base64string){\n // do something with the base64string\n}, { format : 'png', datatype : 'raw'} );\n\n// png as node buffer\nwin.capturePage(function(buffer){\n // do something with the buffer\n}, { format : 'png', datatype : 'buffer'} );\n\n\n\n\nwin.setProgressBar(progress)\n\n\n\n\nprogress\n \n{Float}\n valid values within [0, 1]. Setting to negative value (<0) removes the progress bar.\n\n\n\n\n!!! note \"Linux\"\n    Only Ubuntu is supported, and you'll need to specify the application \n.desktop\n file through \nNW_DESKTOP\n env. If \nNW_DESKTOP\n env variable is not found, it uses \nnw.desktop\n by default.\n\n\nwin.setBadgeLabel(label)\n\n\nSet the badge label on the window icon in taskbar or dock.\n\n\n!!! note \"Linux\"\n    This API is only supported on Ubuntu and the label is restricted to a string number only. You'll also need to specify the \n.desktop\n file for your application (see the note on \nsetProgressBar\n)\n\n\nwin.eval(frame, script)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n the frame to execute in. If \niframe\n is \nnull\n, it assumes in current window / frame.\n\n\nscript\n \n{String}\n the source code of the script to be executed\n\n\n\n\nExecute a piece of JavaScript in the frame.\n\n\nwin.evalNWBin(frame, path)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n the frame to execute in. If \niframe\n is \nnull\n, it assumes in current window / frame.\n\n\npath\n \n{String}\n the path of the snapshot file generated by \nnwjc\n\n\n\n\nLoad and execute the compiled snapshot in the frame. See \nProtect JavaScript Source Code with V8 Snapshot\n.\n\n\nEvent: close\n\n\nThe \nclose\n event is a special event that will affect the result of the \nWindow.close()\n function. If developer is listening to the \nclose\n event of a window, the \nWindow.close()\n emit the \nclose\n event without closing the window.\n\n\nUsually you would do some shutdown work in the callback of \nclose\n event, and then call \nthis.close(true)\n to really close the window, which will not be caught again. Forgetting to add \ntrue\n when calling \nthis.close()\n in the callback will result in infinite loop.\n\n\nAnd if the shutdown work takes some time, users may feel that the app is exiting slowly, which is bad experience, so you could just hide the window in the \nclose\n event before really closing it to make a smooth user experience.\n\n\nSee example code of \nwin.close(true)\n above\n for the usage of \nclose\n event.\n\n\n!!! note \"Mac\"\n    On Mac, there is an argument passed to the callback indicating whether it's being closed by \n\u2318\n+\nQ\n.\n\n\nEvent: closed\n\n\nThe \nclosed\n event is emitted after corresponding window is closed. Normally you'll not be able to get this event since after the window is closed all js objects will be released. But it's useful if you're listening this window's events in another window, whose objects will not be released.\n\n\n// Open a new window.\nnw.Window.open('popup.html', {}, function(win) {\n// Release the 'win' object here after the new window is closed.\nwin.on('closed', function() {\n  win = null;\n});\n\n// Listen to main window's close event\nnw.Window.get().on('close', function() {\n  // Hide the window to give user the feeling of closing immediately\n  this.hide();\n\n  // If the new window is still open then close it.\n  if (win != null)\n    win.close(true);\n\n  // After closing the new window, close the main window.\n  this.close(true);\n});\n\n});\n\n\n\n\n\nEvent: loading\n\n\nEmitted when the window starts to reload, normally you cannot catch this event because usually it's emitted before you actually setup the callback.\n\n\nThe only situation that you can catch this event is when you refresh the window and listen to this event in another window.\n\n\nEvent: loaded\n\n\nEmitted when the window is fully loaded, this event behaves the same with \nwindow.onload\n, but doesn't rely on the DOM.\n\n\nEvent: document-start(frame)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n is the iframe object, or \nnull\n if the event is for the window. \n\n\n\n\nEmitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.\n\n\nSee \ninject-js-start\n in \nManifest-format\n.\n\n\nEvent: document-end(frame)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n is the iframe object, or \nnull\n if the event is for the window. \n\n\n\n\nEmitted when the document object in this window or a child iframe is unloaded, but before the \nonunload\n event is emitted.\n\n\nSee \ninject-js-end\n in [[Manifest-format]]\n\n\nEvent: focus\n\n\nEmitted when window gets focus.\n\n\nEvent: blur\n\n\nEmitted when window loses focus.\n\n\nEvent: minimize\n\n\nEmitted when window is minimized.\n\n\nEvent: restore\n\n\n!!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see \nMigration Notes from 0.12 to 0.13\n.\n\n\nEmitted when window is restored from minimize, maximize and fullscreen state.\n\n\nEvent: maximize\n\n\nEmitted when window is maximized.\n\n\nEvent: unmaximize\n\n\nEmitted when window is restored from maximize state.\n\n\n!!! note\n    On some platforms window can be resized even when maximized. The \nunmaximize\n may not be emitted when a maximized window is resized instead of being unmaximized\n\n\nEvent: move(x, y)\n\n\nEmitted after window is moved. The callback is called with 2 arguments: \n(x, y)\n for the new location of the left / top corner of the window.\n\n\nEvent: resize(width, height)\n\n\nEmitted after window is resized. The callback is called with 2 arguments: \n(width, height)\n for the new size of the window.\n\n\nEvent: enter-fullscreen\n\n\nEmitted when window enters fullscreen state.\n\n\nEvent: leave-fullscreen\n\n\n!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. It's now replaced by \nrestore\n event\n. See \nMigration Notes from 0.12 to 0.13\n.\n\n\nEmitted when window leaves fullscreen state.\n\n\nEvent: zoom\n\n\nEmitted when window zooming changed. It has a parameter indicating the new zoom level. See \nwin.zoom()\n method\n for the parameter's value definition.\n\n\nEvent: capturepagedone\n\n\n!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. Use the callback with \nwin.capturePage()\n instead. See \nMigration Notes from 0.12 to 0.13\n.\n\n\nEmitted after the capturePage method is called and image data is ready. See \nwin.capturePage()\n callback function for the parameter's value definition.\n\n\nEvent: devtools-opened(url)\n\n\n!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. Use the \ncallback\n passed to \nwin.showDevtools\n instead. See \nMigration Notes from 0.12 to 0.13\n.\n\n\nEmitted after Devtools is opened by any means, or ready after calling \nwin.showDevTools(id, headless)\n with \nheadless\n is \ntrue\n. The event callback has an \nurl\n argument, which is the URL to load Devtools UI.\n\n\nSee \nwin.showDevTools()\n method\n for more details.\n\n\nEvent: devtools-closed\n\n\nEmitted after Devtools is closed.\n\n\nSee \nwin.closeDevTools()\n method\n for more details.\n\n\nEvent: new-win-policy (frame, url, policy)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n is the object of the child iframe where the request is from, or \nnull\n if it's from the top window.\n\n\nurl\n \n{String}\n is the address of the requested link\n\n\npolicy\n \n{Object}\n is an object with the following methods:\n\n\nignore()\n : ignore the request, navigation won't happen.\n\n\nforceCurrent()\n : force the link to be opened in the same frame\n\n\nforceDownload()\n : force the link to be a downloadable, or open by external program\n\n\nforceNewWindow()\n : force the link to be opened in a new window\n\n\nforceNewPopup()\n : force the link to be opened in a new popup window\n\n\nsetNewWindowManifest(m)\n : control the options for the new popup window. The object \nm\n is in the same format as the \nWindow subfields\n in manifest format.\n\n\n\n\n\n\n\n\nEmitted when a new window is requested from this window or a child iframe. You can call \npolicy.*\n methods in the callback to change the default behavior of opening new windows.\n\n\nFor example, you can open the URL in system brower when user tries to open in a new window:\n\n\n\nnw.Window.get().on('new-win-policy', function(frame, url, policy) {\n  // do not open the window\n  policy.ignore();\n  // and open it in external browser\n  nw.Shell.openExternal(url);\n});\n\n\n\n\n\nEvent: navigation (frame, url, policy)\n\n\n\n\nframe\n \n{HTMLIFrameElement}\n is the object of the child iframe where the request is from, or \nnull\n if it's from the top window.\n\n\nurl\n \n{String}\n is the address of the requested link\n\n\npolicy\n \n{Object}\n is an object with the following methods:\n\n\nignore()\n : ignore the request, navigation won't happen.\n\n\n\n\n\n\n\n\nEmitted when navigating to another page. Similar to \nnew-win-policy\n, you can call \npolicy.ignore()\n within the callback to ignore the navigation.",
            "title": "Window"
        },
        {
            "location": "/References/Window/#window-doctitle",
            "text": "Window {: .doctitle}  Synopsis  Window.get([window_object])  Window.open(url, [options], [callback])  win.window  win.x  win.y  win.width  win.height  win.title  win.menu  win.isFullscreen  win.isTransparent  win.isKioskMode  win.zoomLevel  win.cookies.*  win.moveTo(x, y)  win.moveBy(x, y)  win.resizeTo(width, height)  win.resizeBy(width, height)  win.focus()  win.blur()  win.show([is_show])  win.hide()  win.close([force])  win.reload()  win.reloadDev()  win.reloadIgnoringCache()  win.maximize()  win.unmaximize()  win.minimize()  win.restore()  win.enterFullscreen()  win.leaveFullscreen()  win.toggleFullscreen()  win.enterKioskMode()  win.leaveKioskMode()  win.toggleKioskMode()  win.setTransparent(transparent)  win.showDevTools([iframe], [headless], [callback])  win.closeDevTools()  win.isDevToolsOpen()  win.setMaximumSize(width, height)  win.setMinimumSize(width, height)  win.setResizable(resizable)  win.setAlwaysOnTop(top)  win.setVisibleOnAllWorkspaces(visible) (Mac and Linux)  win.canSetVisibleOnAllWorkspaces() (Mac and Linux)  win.setPosition(position)  win.setShowInTaskbar(show)  win.requestAttention(attension)  win.capturePage(callback [, config ])  win.setProgressBar(progress)  win.setBadgeLabel(label)  win.eval(frame, script)  win.evalNWBin(frame, path)  Event: close  Event: closed  Event: loading  Event: loaded  Event: document-start(frame)  Event: document-end(frame)  Event: focus  Event: blur  Event: minimize  Event: restore  Event: maximize  Event: unmaximize  Event: move(x, y)  Event: resize(width, height)  Event: enter-fullscreen  Event: leave-fullscreen  Event: zoom  Event: capturepagedone  Event: devtools-opened(url)  Event: devtools-closed  Event: new-win-policy (frame, url, policy)  Event: navigation (frame, url, policy)      Window  is a wrapper of the DOM's  window  object. It has extended operations and can receive various window events.  Every  Window  is an instance of the EventEmitter class, and you're able to use  Window.on(...)  to respond to native window's events.",
            "title": "Window {: .doctitle}"
        },
        {
            "location": "/References/Window/#synopsis",
            "text": "// Get the current window\nvar win = nw.Window.get();\n\n// Listen to the minimize event\nwin.on('minimize', function() {\n  console.log('Window is minimized');\n});\n\n// Minimize the window\nwin.minimize();\n\n// Unlisten the minimize event\nwin.removeAllListeners('minimize');\n\n// Create a new window and get it\nnw.Window.open('https://github.com', {}, function(new_win) {\n  // And listen to new window's focus event\n  new_win.on('focus', function() {\n    console.log('New window is focused');\n  });\n\n});",
            "title": "Synopsis"
        },
        {
            "location": "/References/Window/#windowgetwindow_object",
            "text": "window_object   {DOM Window}   Optional  is the DOM window  Returns  {Window}  the native  Window  object   If  window_object  is not specifed, then return current window's  Window  object, otherwise return  window_object 's  Window  object.  // Get the current window\nvar win = nw.Window.get();\n\n// Create a new window and get it\nnw.Window.open('https://github.com/nwjs/nw.js', {}, function(new_win) {\n  // do something with the newly created window\n});",
            "title": "Window.get([window_object])"
        },
        {
            "location": "/References/Window/#windowopenurl-options-callback",
            "text": "!!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see  Migration Notes from 0.12 to 0.13 .   url   {String}  URL to be loaded in the opened window  options   {Object}   Optional  see  Window subfields  in manifest format. And following extra fields can also be used in options.  new-instance   {Boolean}   Optional  whether to open a new window in a separate render process.  inject-js-start   {String}   Optional  the script to be injected before document loaded. See  Manifest format  inject-js-end   {String}   Optional  the script to be injected before document unloaded. See  Manifest format  id   {String}   Optional  the ID used to identify the window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened.  See also the Chrome App documentation    callback(win)   {Function}   Optional  callback when with the opened native  Window  object   Open a new window and load  url  in it.  !!! note\n    You should wait for the Window's  loaded  event before interacting with any of its components.  !!! note \"Focus\"\n    The opened window is not focused by default. If you want it to be focused by default, you can set  focus  to  true  in  options .",
            "title": "Window.open(url, [options], [callback])"
        },
        {
            "location": "/References/Window/#winwindow",
            "text": "Get the corresponding DOM window object of the native window.",
            "title": "win.window"
        },
        {
            "location": "/References/Window/#winx",
            "text": "",
            "title": "win.x"
        },
        {
            "location": "/References/Window/#winy",
            "text": "Get or set left/top offset from window to screen.",
            "title": "win.y"
        },
        {
            "location": "/References/Window/#winwidth",
            "text": "",
            "title": "win.width"
        },
        {
            "location": "/References/Window/#winheight",
            "text": "Get or set window's size.",
            "title": "win.height"
        },
        {
            "location": "/References/Window/#wintitle",
            "text": "Get or set window's title.",
            "title": "win.title"
        },
        {
            "location": "/References/Window/#winmenu",
            "text": "Get or set window's menubar. Set with a Menu with type  menubar . See  Menu .",
            "title": "win.menu"
        },
        {
            "location": "/References/Window/#winisfullscreen",
            "text": "Get whether we're in fullscreen mode.",
            "title": "win.isFullscreen"
        },
        {
            "location": "/References/Window/#winistransparent",
            "text": "Get whether transparency is turned on",
            "title": "win.isTransparent"
        },
        {
            "location": "/References/Window/#winiskioskmode",
            "text": "Get whether we're in kiosk mode.",
            "title": "win.isKioskMode"
        },
        {
            "location": "/References/Window/#winzoomlevel",
            "text": "Get or set the page zoom.  0  for normal size; positive value for zooming in; negative value for zooming out.",
            "title": "win.zoomLevel"
        },
        {
            "location": "/References/Window/#wincookies",
            "text": "This includes multiple functions to manipulate the cookies. The API is defined in the same way as  Chrome Extensions' . NW.js supports the  get ,  getAll ,  remove  and  set  methods;  onChanged  event (supporting both  addListener  and  removeListener  function on this event).  And anything related to  CookieStore  in the Chrome extension API is not supported, because there is only one global cookie store in NW.js apps.",
            "title": "win.cookies.*"
        },
        {
            "location": "/References/Window/#winmovetox-y",
            "text": "x   {Integer}  offset to the left of the screen  y   {Integer}  offset to the top of the screen   Moves a window's left and top edge to the specified coordinates.",
            "title": "win.moveTo(x, y)"
        },
        {
            "location": "/References/Window/#winmovebyx-y",
            "text": "x   {Integer}  horizontal offset  y   {Integer}  vertical offset   Moves a window a specified number of pixels relative to its current coordinates.",
            "title": "win.moveBy(x, y)"
        },
        {
            "location": "/References/Window/#winresizetowidth-height",
            "text": "width   {Integer}  the width of the window  height   {Integer}  the height of the window   Resizes a window to the specified  width  and  height .",
            "title": "win.resizeTo(width, height)"
        },
        {
            "location": "/References/Window/#winresizebywidth-height",
            "text": "width   {Integer}  the offset width of the window  height   {Integer}  the offset height of the window   Resizes a window by the specified amount.",
            "title": "win.resizeBy(width, height)"
        },
        {
            "location": "/References/Window/#winfocus",
            "text": "Focus on the window.",
            "title": "win.focus()"
        },
        {
            "location": "/References/Window/#winblur",
            "text": "Move focus away. Usually it will move focus to other windows of your app, since on some platforms there is no concept of blur.",
            "title": "win.blur()"
        },
        {
            "location": "/References/Window/#winshowis_show",
            "text": "is_show   {Boolean}   Optional  specify whether the window should be shown or hidden. It's set to  true  by default.   Show the window if it's not shown.  show(false)  has the same effect with  hide() .  !!! note \"Focus\"\n     show  will not focus on the window on some platforms, so you need to call  focus  if you want to.",
            "title": "win.show([is_show])"
        },
        {
            "location": "/References/Window/#winhide",
            "text": "Hide the window. User will not be able to find the window once it's hidden.",
            "title": "win.hide()"
        },
        {
            "location": "/References/Window/#wincloseforce",
            "text": "force   {Boolean}  specify whether to close the window forcely and bypass  close  event.   Close current window. And you can prevent the closing by listening to the  close  event. If  force  is specified and equals to  true , then the  close  event will be ignored.  Usually you would like to listen to the  close  event and do some shutdown work and then do a  close(true)  to really close the window.  win.on('close', function() {\n  this.hide(); // Pretend to be closed already\n  console.log(\"We're closing...\");\n  this.close(true); // then close it forcely\n});\n\nwin.close();",
            "title": "win.close([force])"
        },
        {
            "location": "/References/Window/#winreload",
            "text": "Reloads the current window.",
            "title": "win.reload()"
        },
        {
            "location": "/References/Window/#winreloaddev",
            "text": "Reloads the current page by starting a new renderer process from scratch.",
            "title": "win.reloadDev()"
        },
        {
            "location": "/References/Window/#winreloadignoringcache",
            "text": "Like  reload() , but don't use caches (aka \"shift-reload\").",
            "title": "win.reloadIgnoringCache()"
        },
        {
            "location": "/References/Window/#winmaximize",
            "text": "Maximize the window on GTK and Windows, and zoom the window on Mac OS X.",
            "title": "win.maximize()"
        },
        {
            "location": "/References/Window/#winunmaximize",
            "text": "!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. It's now replaced by  restore  event . See  Migration Notes from 0.12 to 0.13 .  Unmaximize the window, i.e. the reverse of  maximize() .",
            "title": "win.unmaximize()"
        },
        {
            "location": "/References/Window/#winminimize",
            "text": "Minimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.",
            "title": "win.minimize()"
        },
        {
            "location": "/References/Window/#winrestore",
            "text": "Restore window to previous state after the window is minimized, i.e. the reverse of  minimize() . It's not named  unminimize  since  restore  is used commonly.",
            "title": "win.restore()"
        },
        {
            "location": "/References/Window/#winenterfullscreen",
            "text": "Make the window fullscreen.  !!! note\n    This function is different with HTML5 FullScreen API, which can make part of the page fullscreen,  Window.enterFullscreen()  will only fullscreen the whole window.",
            "title": "win.enterFullscreen()"
        },
        {
            "location": "/References/Window/#winleavefullscreen",
            "text": "Leave the fullscreen mode.",
            "title": "win.leaveFullscreen()"
        },
        {
            "location": "/References/Window/#wintogglefullscreen",
            "text": "Toggle the fullscreen mode.",
            "title": "win.toggleFullscreen()"
        },
        {
            "location": "/References/Window/#winenterkioskmode",
            "text": "Enter the Kiosk mode. In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. This mode is mainly used for presentation on public displays.",
            "title": "win.enterKioskMode()"
        },
        {
            "location": "/References/Window/#winleavekioskmode",
            "text": "Leave the Kiosk mode.",
            "title": "win.leaveKioskMode()"
        },
        {
            "location": "/References/Window/#wintogglekioskmode",
            "text": "Toggle the kiosk mode.",
            "title": "win.toggleKioskMode()"
        },
        {
            "location": "/References/Window/#winsettransparenttransparent",
            "text": "!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. See  Migration Notes from 0.12 to 0.13 .   transparent   {Boolean}  whether to set the window to be transparent   Turn on/off the transparency support. See more info on  Transparent Window .",
            "title": "win.setTransparent(transparent)"
        },
        {
            "location": "/References/Window/#winshowdevtoolsiframe-headless-callback",
            "text": "!!! note\n    This API is only available on SDK build flavor.  !!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see  Migration Notes from 0.12 to 0.13 .   iframe   {String} or {HTMLIFrameElement}   Optional  the id or the element of the  <iframe>  to be jailed on. By default, the DevTools is shown for entire window.  headless   {Boolean}   Optional  whether show DevTools in headless mode. If ignored, it's set to  false  by default.  callback(dev_win)   {Function}  callback with the native window of the DevTools window when  headless  is false.   Open the devtools to inspect the window.  The optional  iframe  as  String  should be the value of  id  attribute of any  <iframe>  element in the window. It jails the DevTools to inspect the  <iframe>  only. If it is an empty string, this feature has no effect.  The optional  iframe  as  HTMLIFrameElement  should be the iframe object. And it serves the same purpose with the  id  argument.  When  headless  is  true , the Devtools window will not be opened. Instead, a  devtools-opened  event will be emitted to the  Window  object after Devtools is ready.  This function returns a  Window  object when  headless  is  false . You can use any properties and methods of  Window  except the events.",
            "title": "win.showDevTools([iframe], [headless], [callback])"
        },
        {
            "location": "/References/Window/#winclosedevtools",
            "text": "!!! note\n    This API is only available on SDK build flavor.  Close the devtools window.",
            "title": "win.closeDevTools()"
        },
        {
            "location": "/References/Window/#winisdevtoolsopen",
            "text": "!!! note\n    This API is only available on SDK build flavor.  Query the status of devtools window.  This will always return  false  if the  headless  option was  true  when calling  win.showDevTools() .",
            "title": "win.isDevToolsOpen()"
        },
        {
            "location": "/References/Window/#winsetmaximumsizewidth-height",
            "text": "width   {Integer}  the maximum width of the window  height   {Integer}  the maximum height of the window   Set window's maximum size.",
            "title": "win.setMaximumSize(width, height)"
        },
        {
            "location": "/References/Window/#winsetminimumsizewidth-height",
            "text": "width   {Integer}  the minimum width of the window  height   {Integer}  the minimum height of the window   Set window's minimum size.",
            "title": "win.setMinimumSize(width, height)"
        },
        {
            "location": "/References/Window/#winsetresizableresizable",
            "text": "resizable   {Boolean}  whether the window can be resized   Set whether window is resizable.",
            "title": "win.setResizable(resizable)"
        },
        {
            "location": "/References/Window/#winsetalwaysontoptop",
            "text": "top   {Boolean}  whether the window should always be on top   Sets the widget to be on top of all other windows in the window system.",
            "title": "win.setAlwaysOnTop(top)"
        },
        {
            "location": "/References/Window/#winsetvisibleonallworkspacesvisible-mac-and-linux",
            "text": "top   {Boolean}  whether the window should be visible on all workspaces   For platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.",
            "title": "win.setVisibleOnAllWorkspaces(visible) (Mac and Linux)"
        },
        {
            "location": "/References/Window/#wincansetvisibleonallworkspaces-mac-and-linux",
            "text": "Returns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method  setVisibleOnAllWorkspace(Boolean) .",
            "title": "win.canSetVisibleOnAllWorkspaces() (Mac and Linux)"
        },
        {
            "location": "/References/Window/#winsetpositionposition",
            "text": "position   {String}  the position of the window. There are three valid positions:  null  or  center  or  mouse   Move window to specified position. Currently only  center  is supported on all platforms, which will put window in the middle of the screen.",
            "title": "win.setPosition(position)"
        },
        {
            "location": "/References/Window/#winsetshowintaskbarshow",
            "text": "show   {Boolean}  whether show in task bar   Control whether to show window in taskbar or dock. See also  show_in_taskbar  in  Manifest-format .",
            "title": "win.setShowInTaskbar(show)"
        },
        {
            "location": "/References/Window/#winrequestattentionattension",
            "text": "attension   {Boolean} or {Integer}  If a Boolean, it indicates to request or cancel user's attension. If an Integer, it indicates the number of times the window flashes.   Request the user's attension by making the window flashes in the task bar.  !!! note \"Mac\"\n    On Mac, value < 0 will trigger  NSInformationalRequest , while value > 0 will trigger  NSCriticalRequest .",
            "title": "win.requestAttention(attension)"
        },
        {
            "location": "/References/Window/#wincapturepagecallback-config",
            "text": "callback   {Function}  the callback when finished capturing the window  config   {String} or {Object}   Optional  if a String, see  config.format  for valid values.  format   {String}   optional  the image format used to generate the image. It supports two formats:  \"png\"  and  \"jpeg\" . If ignored, it's  \"jpeg\"  by default.  datatype   {String}  it supports three types:  \"raw\" ,  \"buffer\"  and  \"datauri\" . If ignored, it's  \"datauri\"  by default.     Captures the visible area of the window.  !!! note \" raw  or  datauri \"\n    The  \"raw\"  only contains the Base64 encoded image. But  \"datauri\"  contains the mime type headers as well, and it can be directly assigned to  src  of  Image  to load the image.  Example usage:  // png as base64string\nwin.capturePage(function(base64string){\n // do something with the base64string\n}, { format : 'png', datatype : 'raw'} );\n\n// png as node buffer\nwin.capturePage(function(buffer){\n // do something with the buffer\n}, { format : 'png', datatype : 'buffer'} );",
            "title": "win.capturePage(callback [, config ])"
        },
        {
            "location": "/References/Window/#winsetprogressbarprogress",
            "text": "progress   {Float}  valid values within [0, 1]. Setting to negative value (<0) removes the progress bar.   !!! note \"Linux\"\n    Only Ubuntu is supported, and you'll need to specify the application  .desktop  file through  NW_DESKTOP  env. If  NW_DESKTOP  env variable is not found, it uses  nw.desktop  by default.",
            "title": "win.setProgressBar(progress)"
        },
        {
            "location": "/References/Window/#winsetbadgelabellabel",
            "text": "Set the badge label on the window icon in taskbar or dock.  !!! note \"Linux\"\n    This API is only supported on Ubuntu and the label is restricted to a string number only. You'll also need to specify the  .desktop  file for your application (see the note on  setProgressBar )",
            "title": "win.setBadgeLabel(label)"
        },
        {
            "location": "/References/Window/#winevalframe-script",
            "text": "frame   {HTMLIFrameElement}  the frame to execute in. If  iframe  is  null , it assumes in current window / frame.  script   {String}  the source code of the script to be executed   Execute a piece of JavaScript in the frame.",
            "title": "win.eval(frame, script)"
        },
        {
            "location": "/References/Window/#winevalnwbinframe-path",
            "text": "frame   {HTMLIFrameElement}  the frame to execute in. If  iframe  is  null , it assumes in current window / frame.  path   {String}  the path of the snapshot file generated by  nwjc   Load and execute the compiled snapshot in the frame. See  Protect JavaScript Source Code with V8 Snapshot .",
            "title": "win.evalNWBin(frame, path)"
        },
        {
            "location": "/References/Window/#event-close",
            "text": "The  close  event is a special event that will affect the result of the  Window.close()  function. If developer is listening to the  close  event of a window, the  Window.close()  emit the  close  event without closing the window.  Usually you would do some shutdown work in the callback of  close  event, and then call  this.close(true)  to really close the window, which will not be caught again. Forgetting to add  true  when calling  this.close()  in the callback will result in infinite loop.  And if the shutdown work takes some time, users may feel that the app is exiting slowly, which is bad experience, so you could just hide the window in the  close  event before really closing it to make a smooth user experience.  See example code of  win.close(true)  above  for the usage of  close  event.  !!! note \"Mac\"\n    On Mac, there is an argument passed to the callback indicating whether it's being closed by  \u2318 + Q .",
            "title": "Event: close"
        },
        {
            "location": "/References/Window/#event-closed",
            "text": "The  closed  event is emitted after corresponding window is closed. Normally you'll not be able to get this event since after the window is closed all js objects will be released. But it's useful if you're listening this window's events in another window, whose objects will not be released.  // Open a new window.\nnw.Window.open('popup.html', {}, function(win) {\n// Release the 'win' object here after the new window is closed.\nwin.on('closed', function() {\n  win = null;\n});\n\n// Listen to main window's close event\nnw.Window.get().on('close', function() {\n  // Hide the window to give user the feeling of closing immediately\n  this.hide();\n\n  // If the new window is still open then close it.\n  if (win != null)\n    win.close(true);\n\n  // After closing the new window, close the main window.\n  this.close(true);\n});\n\n});",
            "title": "Event: closed"
        },
        {
            "location": "/References/Window/#event-loading",
            "text": "Emitted when the window starts to reload, normally you cannot catch this event because usually it's emitted before you actually setup the callback.  The only situation that you can catch this event is when you refresh the window and listen to this event in another window.",
            "title": "Event: loading"
        },
        {
            "location": "/References/Window/#event-loaded",
            "text": "Emitted when the window is fully loaded, this event behaves the same with  window.onload , but doesn't rely on the DOM.",
            "title": "Event: loaded"
        },
        {
            "location": "/References/Window/#event-document-startframe",
            "text": "frame   {HTMLIFrameElement}  is the iframe object, or  null  if the event is for the window.    Emitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.  See  inject-js-start  in  Manifest-format .",
            "title": "Event: document-start(frame)"
        },
        {
            "location": "/References/Window/#event-document-endframe",
            "text": "frame   {HTMLIFrameElement}  is the iframe object, or  null  if the event is for the window.    Emitted when the document object in this window or a child iframe is unloaded, but before the  onunload  event is emitted.  See  inject-js-end  in [[Manifest-format]]",
            "title": "Event: document-end(frame)"
        },
        {
            "location": "/References/Window/#event-focus",
            "text": "Emitted when window gets focus.",
            "title": "Event: focus"
        },
        {
            "location": "/References/Window/#event-blur",
            "text": "Emitted when window loses focus.",
            "title": "Event: blur"
        },
        {
            "location": "/References/Window/#event-minimize",
            "text": "Emitted when window is minimized.",
            "title": "Event: minimize"
        },
        {
            "location": "/References/Window/#event-restore",
            "text": "!!! warning \"Behavior Changed\"\n    The behavior of the function is changed since 0.13.0. Please see  Migration Notes from 0.12 to 0.13 .  Emitted when window is restored from minimize, maximize and fullscreen state.",
            "title": "Event: restore"
        },
        {
            "location": "/References/Window/#event-maximize",
            "text": "Emitted when window is maximized.",
            "title": "Event: maximize"
        },
        {
            "location": "/References/Window/#event-unmaximize",
            "text": "Emitted when window is restored from maximize state.  !!! note\n    On some platforms window can be resized even when maximized. The  unmaximize  may not be emitted when a maximized window is resized instead of being unmaximized",
            "title": "Event: unmaximize"
        },
        {
            "location": "/References/Window/#event-movex-y",
            "text": "Emitted after window is moved. The callback is called with 2 arguments:  (x, y)  for the new location of the left / top corner of the window.",
            "title": "Event: move(x, y)"
        },
        {
            "location": "/References/Window/#event-resizewidth-height",
            "text": "Emitted after window is resized. The callback is called with 2 arguments:  (width, height)  for the new size of the window.",
            "title": "Event: resize(width, height)"
        },
        {
            "location": "/References/Window/#event-enter-fullscreen",
            "text": "Emitted when window enters fullscreen state.",
            "title": "Event: enter-fullscreen"
        },
        {
            "location": "/References/Window/#event-leave-fullscreen",
            "text": "!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. It's now replaced by  restore  event . See  Migration Notes from 0.12 to 0.13 .  Emitted when window leaves fullscreen state.",
            "title": "Event: leave-fullscreen"
        },
        {
            "location": "/References/Window/#event-zoom",
            "text": "Emitted when window zooming changed. It has a parameter indicating the new zoom level. See  win.zoom()  method  for the parameter's value definition.",
            "title": "Event: zoom"
        },
        {
            "location": "/References/Window/#event-capturepagedone",
            "text": "!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. Use the callback with  win.capturePage()  instead. See  Migration Notes from 0.12 to 0.13 .  Emitted after the capturePage method is called and image data is ready. See  win.capturePage()  callback function for the parameter's value definition.",
            "title": "Event: capturepagedone"
        },
        {
            "location": "/References/Window/#event-devtools-openedurl",
            "text": "!!! warning \"Deprecated\"\n    This feature is deprecated since 0.13.0. Use the  callback  passed to  win.showDevtools  instead. See  Migration Notes from 0.12 to 0.13 .  Emitted after Devtools is opened by any means, or ready after calling  win.showDevTools(id, headless)  with  headless  is  true . The event callback has an  url  argument, which is the URL to load Devtools UI.  See  win.showDevTools()  method  for more details.",
            "title": "Event: devtools-opened(url)"
        },
        {
            "location": "/References/Window/#event-devtools-closed",
            "text": "Emitted after Devtools is closed.  See  win.closeDevTools()  method  for more details.",
            "title": "Event: devtools-closed"
        },
        {
            "location": "/References/Window/#event-new-win-policy-frame-url-policy",
            "text": "frame   {HTMLIFrameElement}  is the object of the child iframe where the request is from, or  null  if it's from the top window.  url   {String}  is the address of the requested link  policy   {Object}  is an object with the following methods:  ignore()  : ignore the request, navigation won't happen.  forceCurrent()  : force the link to be opened in the same frame  forceDownload()  : force the link to be a downloadable, or open by external program  forceNewWindow()  : force the link to be opened in a new window  forceNewPopup()  : force the link to be opened in a new popup window  setNewWindowManifest(m)  : control the options for the new popup window. The object  m  is in the same format as the  Window subfields  in manifest format.     Emitted when a new window is requested from this window or a child iframe. You can call  policy.*  methods in the callback to change the default behavior of opening new windows.  For example, you can open the URL in system brower when user tries to open in a new window:  \nnw.Window.get().on('new-win-policy', function(frame, url, policy) {\n  // do not open the window\n  policy.ignore();\n  // and open it in external browser\n  nw.Shell.openExternal(url);\n});",
            "title": "Event: new-win-policy (frame, url, policy)"
        },
        {
            "location": "/References/Window/#event-navigation-frame-url-policy",
            "text": "frame   {HTMLIFrameElement}  is the object of the child iframe where the request is from, or  null  if it's from the top window.  url   {String}  is the address of the requested link  policy   {Object}  is an object with the following methods:  ignore()  : ignore the request, navigation won't happen.     Emitted when navigating to another page. Similar to  new-win-policy , you can call  policy.ignore()  within the callback to ignore the navigation.",
            "title": "Event: navigation (frame, url, policy)"
        },
        {
            "location": "/References/webview Tag/",
            "text": "<webview> Tag\n\n\n\n\n\n\n\n\n<webview> Tag\n\n\nSynopsis\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\nUse the \n<webview>\n tag to embed 'guest' content (such as web pages) in your app. Different from the \n<iframe>\n, the \n<webview>\n runs in a separate process than your app; it doesn't have the same permissions as your app and all interactions between your app and embedded content will be asynchronous. This keeps your app safe from the embedded content.\n\n\nSynopsis\n\n\nTo embed a web page in your app, add the webview tag to your app's embedder page (this is the app page that will display the guest content). In its simplest form, the webview tag includes the src of the web page and css styles that control the appearance of the webview container:\n\n\n<webview id=\"foo\" src=\"http://www.google.com/\" style=\"width:640px; height:480px\"></webview>\n\n\n\n\nReferences\n\n\nSee \nChrome document of \n<webview>\n tag\n for detailed API references.",
            "title": "webview Tag"
        },
        {
            "location": "/References/webview Tag/#webview-tag",
            "text": "<webview> Tag  Synopsis  References      Use the  <webview>  tag to embed 'guest' content (such as web pages) in your app. Different from the  <iframe> , the  <webview>  runs in a separate process than your app; it doesn't have the same permissions as your app and all interactions between your app and embedded content will be asynchronous. This keeps your app safe from the embedded content.",
            "title": "<webview> Tag"
        },
        {
            "location": "/References/webview Tag/#synopsis",
            "text": "To embed a web page in your app, add the webview tag to your app's embedder page (this is the app page that will display the guest content). In its simplest form, the webview tag includes the src of the web page and css styles that control the appearance of the webview container:  <webview id=\"foo\" src=\"http://www.google.com/\" style=\"width:640px; height:480px\"></webview>",
            "title": "Synopsis"
        },
        {
            "location": "/References/webview Tag/#references",
            "text": "See  Chrome document of  <webview>  tag  for detailed API references.",
            "title": "References"
        }
    ]
}